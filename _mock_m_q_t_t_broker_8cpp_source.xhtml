<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: MockMQTTBroker.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(0); });
/* @license-end */
</script>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_dbaa8d7e02b71692f61487f3a0357a30.xhtml">mock</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">MockMQTTBroker.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="_mock_m_q_t_t_broker_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &quot;<a class="code" href="_mock_m_q_t_t_broker_8hpp.xhtml">mock/MockMQTTBroker.hpp</a>&quot;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &quot;<a class="code" href="_logging_8hpp.xhtml">Logging.hpp</a>&quot;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &quot;<a class="code" href="conf_8hpp.xhtml">conf.hpp</a>&quot;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &quot;<a class="code" href="secrets_8hpp.xhtml">secrets.hpp</a>&quot;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;ArduinoJson.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">// TAG for logging purposes</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno"><a class="line" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">    9</a></span><span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> <a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a> = <span class="stringliteral">&quot;MockMQTTBroker&quot;</span>;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefabomatic.xhtml">fabomatic</a></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>{</div>
<div class="foldopen" id="foldopen00020" data-start="{" data-end="}">
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">   20</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">MockMQTTBroker::start</a>() -&gt; <span class="keywordtype">void</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  {</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>    <span class="comment">// Wait for the Wi-Fi to connect</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="keywordflow">while</span> (WiFi.status() != WL_CONNECTED)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    {</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: WiFi status changed to %d&quot;</span>, WiFi.status());</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>      is_running = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>    }</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    <span class="comment">// Initialize the broker if it&#39;s not running</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>    <span class="keywordflow">if</span> (!is_running)</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    {</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>      is_running = init(<a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#ac26a2c6d2866b19ee035b735bdfaff54">conf::mqtt::PORT_NUMBER</a>, <span class="keyword">true</span>);</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>      ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: started with result %d&quot;</span>, is_running);</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    }</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  }</div>
</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1bdfd3cf53bce5d2923f4efeff0621a7">   46</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1bdfd3cf53bce5d2923f4efeff0621a7">MockMQTTBroker::onEvent</a>(sMQTTEvent *event) -&gt; <span class="keywordtype">bool</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  {</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    <span class="keywordflow">switch</span> (event-&gt;Type())</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    {</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    <span class="keywordflow">case</span> NewClient_sMQTTEventType:</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>    {</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>      <span class="comment">// Handle new client connection event</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTNewClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: client connected, id:%s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str());</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    }</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    <span class="keywordflow">case</span> Public_sMQTTEventType:</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    {</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>      <span class="comment">// Handle publish event</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>      std::lock_guard&lt;std::mutex&gt; lock(mutex);</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTPublicClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>      topic = e-&gt;Topic();</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>      payload = e-&gt;Payload();</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>      ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: Received  %s -&gt; %s&quot;</span>, topic.c_str(), payload.c_str());</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>      queries.push({topic, payload, topic + <span class="stringliteral">&quot;/reply&quot;</span>});</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    }</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="keywordflow">case</span> RemoveClient_sMQTTEventType:</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    {</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>      <span class="comment">// Handle client removal event</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTRemoveClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: removed client id: %s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str());</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    }</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    <span class="keywordflow">case</span> LostConnect_sMQTTEventType:</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    {</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>      <span class="comment">// Handle lost connection event</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>      is_running = <span class="keyword">false</span>;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: lost connection&quot;</span>);</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    }</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="keywordflow">case</span> Subscribe_sMQTTEventType:</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    {</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>      <span class="comment">// Handle subscription event</span></div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTSubUnSubClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: client %s subscribed to %s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str(), e-&gt;Topic().c_str());</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    }</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    <span class="keywordflow">case</span> UnSubscribe_sMQTTEventType:</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    {</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>      <span class="comment">// Handle unsubscription event</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTSubUnSubClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: got unsubscribe from %s&quot;</span>, e-&gt;Topic().c_str());</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    }</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    <span class="keywordflow">default</span>:</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: unhandled event %d&quot;</span>, event-&gt;Type());</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>      <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    }</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  }</div>
</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="foldopen" id="foldopen00109" data-start="{" data-end="}">
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">  109</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">MockMQTTBroker::isRunning</a>() const -&gt; <span class="keywordtype">bool</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  {</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a>;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  }</div>
</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="}">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">  120</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">MockMQTTBroker::defaultReplies</a>(<span class="keyword">const</span> std::string &amp;<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>) <span class="keyword">const</span> -&gt; <span class="keyword">const</span> std::string</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  {</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;checkmachine&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    {</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:true,\&quot;allowed\&quot;:true,\&quot;maintenance\&quot;:false,\&quot;logoff\&quot;:30,\&quot;name\&quot;:\&quot;ENDER_1\&quot;,\&quot;type\&quot;:1,\&quot;description\&quot;:\&quot;\&quot;}&quot;</span>;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    }</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;maintenance&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    {</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    }</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;startuse&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    }</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;inuse&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    {</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    }</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;stopuse&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    {</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>    }</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;checkuser&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    {</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>      JsonDocument doc;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>      <span class="keywordflow">if</span> (deserializeJson(doc, <a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>) == DeserializationError::Ok &amp;&amp; doc.containsKey(<span class="stringliteral">&quot;uid&quot;</span>))</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      {</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>        <span class="keyword">const</span> <span class="keyword">auto</span> uid_str = doc[<span class="stringliteral">&quot;uid&quot;</span>].as&lt;std::string&gt;();</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>        <span class="comment">// Check if the uid is present in the secrets::cards::whitelist</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>        <span class="keyword">const</span> <span class="keyword">auto</span> elem = std::find_if(<a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.begin(), <a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.end(),</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>                                       [&amp;uid_str](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;elem)</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>                                       {</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>                                         <span class="keyword">const</span> <span class="keyword">auto</span> &amp;[id, level, name] = elem;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>                                         <span class="keywordflow">return</span> <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<span class="keywordtype">id</span>) == uid_str;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>                                       });</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        <span class="keywordflow">if</span> (elem != <a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.end())</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>          std::stringstream ss;</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>          <span class="keyword">const</span> <span class="keyword">auto</span> &amp;[id, level, name] = *elem;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>          ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:&quot;</span> &lt;&lt; (level != <a class="code hl_enumvalue" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">FabUser::UserLevel::Unknown</a> ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>)</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>             &lt;&lt; <span class="stringliteral">&quot;,\&quot;level\&quot;:&quot;</span> &lt;&lt; +<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(level)</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>             &lt;&lt; <span class="stringliteral">&quot;,\&quot;name\&quot;:\&quot;&quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;\&quot;}&quot;</span>;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>          <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>        }</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>        <span class="comment">// Still return a valid user</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>        std::stringstream ss;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>        ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:true,\&quot;level\&quot;:&quot;</span> &lt;&lt; +2</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>           &lt;&lt; <span class="stringliteral">&quot;,\&quot;name\&quot;:\&quot;User&quot;</span> &lt;&lt; uid_str &lt;&lt; <span class="stringliteral">&quot;\&quot;}&quot;</span>;</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>        <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>      }</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>      ESP_LOGE(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;Failed to parse checkuser query&quot;</span>);</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:false}&quot;</span>;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<span class="stringliteral">&quot;alive&quot;</span>) != std::string::npos)</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    {</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; <span class="comment">// No reply to alive message</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    }</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keywordflow">if</span> (<a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>.find(<a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">conf::mqtt::mqtt_switch_topic</a>) != std::string::npos) <span class="comment">// Shelly doesn&#39;t reply</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    {</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    }</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    <span class="keywordflow">return</span> std::string{<span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>};</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  }</div>
</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="foldopen" id="foldopen00199" data-start="{" data-end="}">
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a6ca30ff9daccacbdecdc598f1749951e">  199</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a6ca30ff9daccacbdecdc598f1749951e">MockMQTTBroker::configureReplies</a>(std::function&lt;<span class="keyword">const</span> std::string(<span class="keyword">const</span> std::string &amp;, <span class="keyword">const</span> std::string &amp;)&gt; callback) -&gt; <span class="keywordtype">void</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  {</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    std::lock_guard&lt;std::mutex&gt; lock(mutex);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    this-&gt;callback = callback;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  }</div>
</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="foldopen" id="foldopen00213" data-start="{" data-end="}">
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">  213</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">MockMQTTBroker::processQueries</a>() -&gt; <span class="keywordtype">size_t</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  {</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    std::lock_guard&lt;std::mutex&gt; lock(mutex);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>    <span class="keywordflow">if</span> (!queries.empty())</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    {</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>      std::string response{<span class="stringliteral">&quot;&quot;</span>};</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>      <span class="keyword">const</span> <span class="keyword">auto</span> [topic, <a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>, reply_topic] = queries.front();</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>      queries.pop();</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>      response = callback(topic, <a class="code hl_struct" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>      <span class="keywordflow">if</span> (!response.empty())</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>      {</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>        ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: Sending %s -&gt; %s&quot;</span>, reply_topic.c_str(), response.c_str());</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>        publish(reply_topic, response);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>      }</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    }</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    <span class="keywordflow">return</span> queries.size();</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  }</div>
</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="foldopen" id="foldopen00239" data-start="{" data-end="}">
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">  239</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">MockMQTTBroker::mainLoop</a>()</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  {</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <span class="comment">// Check if the server is online</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>    <span class="keywordflow">if</span> (!<a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a>())</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>    {</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>      <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">start</a>();</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>    }</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>    {</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>      update();</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>      <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">processQueries</a>();</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    }</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  }</div>
</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>} <span class="comment">// namespace fabomatic</span></div>
<div class="ttc" id="a_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="a_mock_m_q_t_t_broker_8cpp_xhtml_a1cd7583262c7df24a997b8ddbcc8397b"><div class="ttname"><a href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a></div><div class="ttdeci">static const char *const TAG2</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">MockMQTTBroker.cpp:9</a></div></div>
<div class="ttc" id="a_mock_m_q_t_t_broker_8hpp_xhtml"><div class="ttname"><a href="_mock_m_q_t_t_broker_8hpp.xhtml">MockMQTTBroker.hpp</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a119e59001d5ce25708aa2198623505c6"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">fabomatic::MockMQTTBroker::processQueries</a></div><div class="ttdeci">auto processQueries() -&gt; size_t</div><div class="ttdoc">Processes pending MQTT queries.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00213">MockMQTTBroker.cpp:213</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a1bdfd3cf53bce5d2923f4efeff0621a7"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1bdfd3cf53bce5d2923f4efeff0621a7">fabomatic::MockMQTTBroker::onEvent</a></div><div class="ttdeci">auto onEvent(sMQTTEvent *event) -&gt; bool override</div><div class="ttdoc">Handles MQTT events.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00046">MockMQTTBroker.cpp:46</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a4cd18cc3fb887b17e4668bbf99a531e5"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">fabomatic::MockMQTTBroker::mainLoop</a></div><div class="ttdeci">auto mainLoop() -&gt; void</div><div class="ttdoc">Main loop for the MQTT broker.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">MockMQTTBroker.cpp:239</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a6ca30ff9daccacbdecdc598f1749951e"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a6ca30ff9daccacbdecdc598f1749951e">fabomatic::MockMQTTBroker::configureReplies</a></div><div class="ttdeci">auto configureReplies(std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt; callback) -&gt; void</div><div class="ttdoc">set the reply generation function. May be called from a different thread</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00199">MockMQTTBroker.cpp:199</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a78a57e64b156c6d6d93104fec142740d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">fabomatic::MockMQTTBroker::isRunning</a></div><div class="ttdeci">auto isRunning() const -&gt; bool</div><div class="ttdoc">Checks if the MQTT broker is running.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">MockMQTTBroker.cpp:109</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_aaee749f4bebf96f67e62da34998ab900"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">fabomatic::MockMQTTBroker::is_running</a></div><div class="ttdeci">bool is_running</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00048">MockMQTTBroker.hpp:48</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_ac6c05df03ca2f41d6a9b48d17ce84ab1"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">fabomatic::MockMQTTBroker::start</a></div><div class="ttdeci">auto start() -&gt; void</div><div class="ttdoc">Starts the MQTT broker.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00020">MockMQTTBroker.cpp:20</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_aeb5eadd85f359d48e3871bfede5ee19d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">fabomatic::MockMQTTBroker::defaultReplies</a></div><div class="ttdeci">auto defaultReplies(const std::string &amp;query) const -&gt; const std::string</div><div class="ttdoc">Provides fake server replies for testing purposes.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00120">MockMQTTBroker.cpp:120</a></div></div>
<div class="ttc" id="aconf_8hpp_xhtml"><div class="ttname"><a href="conf_8hpp.xhtml">conf.hpp</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1card_xhtml_aef091ec171625c69f9d4eab20ebaefec"><div class="ttname"><a href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">fabomatic::card::uid_str</a></div><div class="ttdeci">auto uid_str(const card::uid_t uid) -&gt; const std::string</div><div class="ttdoc">Returns a string representation of the UID.</div><div class="ttdef"><b>Definition</b> <a href="card_8hpp_source.xhtml#l00022">card.hpp:22</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1mqtt_xhtml_a27d3131c4e18f30225c9499cadb75ff4"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">fabomatic::conf::mqtt::mqtt_switch_topic</a></div><div class="ttdeci">static constexpr std::string_view mqtt_switch_topic</div><div class="ttdoc">In case Shelly is used, name of the topic on MQTT Broker.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00155">conf.hpp:155</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1mqtt_xhtml_ac26a2c6d2866b19ee035b735bdfaff54"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#ac26a2c6d2866b19ee035b735bdfaff54">fabomatic::conf::mqtt::PORT_NUMBER</a></div><div class="ttdeci">static constexpr auto PORT_NUMBER</div><div class="ttdoc">MQTT port for broker.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00149">conf.hpp:149</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1secrets_1_1cards_xhtml_a83b3f579950d846c48fb7654ccef9e17"><div class="ttname"><a href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">fabomatic::secrets::cards::whitelist</a></div><div class="ttdeci">static constexpr WhiteList whitelist</div><div class="ttdoc">Static list of whitelisted RFID cards.</div><div class="ttdef"><b>Definition</b> <a href="secrets_8hpp_source.xhtml#l00023">secrets.hpp:23</a></div></div>
<div class="ttc" id="anamespacefabomatic_xhtml"><div class="ttname"><a href="namespacefabomatic.xhtml">fabomatic</a></div><div class="ttdef"><b>Definition</b> <a href="_auth_provider_8cpp_source.xhtml#l00010">AuthProvider.cpp:11</a></div></div>
<div class="ttc" id="asecrets_8hpp_xhtml"><div class="ttname"><a href="secrets_8hpp.xhtml">secrets.hpp</a></div></div>
<div class="ttc" id="astructfabomatic_1_1_fab_user_xhtml_a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">fabomatic::FabUser::UserLevel::Unknown</a></div><div class="ttdeci">@ Unknown</div></div>
<div class="ttc" id="astructfabomatic_1_1_mock_m_q_t_t_broker_1_1query_xhtml"><div class="ttname"><a href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">fabomatic::MockMQTTBroker::query</a></div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00037">MockMQTTBroker.hpp:38</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 2 2024 19:19:45 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
