<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: fabomatic::MockMrfc522 Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacefabomatic.xhtml">fabomatic</a></li><li class="navelem"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classfabomatic_1_1_mock_mrfc522-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fabomatic::MockMrfc522 Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class implements a Mrfc522 with settable tag ID in order to allow simulation.  
 <a href="classfabomatic_1_1_mock_mrfc522.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for fabomatic::MockMrfc522:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_mrfc522__coll__graph.svg" width="203" height="356"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfabomatic_1_1_mock_mrfc522_1_1_uid_driver.xhtml">UidDriver</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a18613a2d39ea0cc9fc3b9ce74b24cb5a" id="r_a18613a2d39ea0cc9fc3b9ce74b24cb5a"><td class="memItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a18613a2d39ea0cc9fc3b9ce74b24cb5a">MockMrfc522</a> ()</td></tr>
<tr class="separator:a18613a2d39ea0cc9fc3b9ce74b24cb5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2928fd9f4f0bd4d9f0b715d59122308" id="r_ac2928fd9f4f0bd4d9f0b715d59122308"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ac2928fd9f4f0bd4d9f0b715d59122308">PICC_IsNewCardPresent</a> () -&gt; bool</td></tr>
<tr class="separator:ac2928fd9f4f0bd4d9f0b715d59122308"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a788900abe7e2b23aaf1471fc36ea2b5c" id="r_a788900abe7e2b23aaf1471fc36ea2b5c"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a788900abe7e2b23aaf1471fc36ea2b5c">PICC_ReadCardSerial</a> () -&gt; bool</td></tr>
<tr class="separator:a788900abe7e2b23aaf1471fc36ea2b5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a475646b621a7ac3dfaa21e0b3cee456a" id="r_a475646b621a7ac3dfaa21e0b3cee456a"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a475646b621a7ac3dfaa21e0b3cee456a">reset</a> () -&gt; void</td></tr>
<tr class="separator:a475646b621a7ac3dfaa21e0b3cee456a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac619cfce167b1c4eedf6761770c6b6fd" id="r_ac619cfce167b1c4eedf6761770c6b6fd"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ac619cfce167b1c4eedf6761770c6b6fd">PCD_Init</a> () -&gt; bool</td></tr>
<tr class="separator:ac619cfce167b1c4eedf6761770c6b6fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3984f22a62b0e5b294eadc7649ce587e" id="r_a3984f22a62b0e5b294eadc7649ce587e"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a3984f22a62b0e5b294eadc7649ce587e">PICC_WakeupA</a> (byte *bufferATQA, byte &amp;bufferSize) -&gt; bool</td></tr>
<tr class="separator:a3984f22a62b0e5b294eadc7649ce587e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae311fea38ecaabac33b39acfb85b6bb5" id="r_ae311fea38ecaabac33b39acfb85b6bb5"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ae311fea38ecaabac33b39acfb85b6bb5">PCD_PerformSelfTest</a> () -&gt; bool</td></tr>
<tr class="separator:ae311fea38ecaabac33b39acfb85b6bb5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b795aa73514e7810386f308c08f1411" id="r_a4b795aa73514e7810386f308c08f1411"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a4b795aa73514e7810386f308c08f1411">getDriverUid</a> () const -&gt; <a class="el" href="structfabomatic_1_1_mock_mrfc522_1_1_uid_driver.xhtml">MockMrfc522::UidDriver</a></td></tr>
<tr class="separator:a4b795aa73514e7810386f308c08f1411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97cb55d9358954fd872f818d54c126c" id="r_ad97cb55d9358954fd872f818d54c126c"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ad97cb55d9358954fd872f818d54c126c">PCD_SetAntennaGain</a> (MFRC522Constants::PCD_RxGain gain) -&gt; void</td></tr>
<tr class="separator:ad97cb55d9358954fd872f818d54c126c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae01dcbbe40b54dcdd530d9a754ee9a5c" id="r_ae01dcbbe40b54dcdd530d9a754ee9a5c"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ae01dcbbe40b54dcdd530d9a754ee9a5c">PCD_DumpVersionToSerial</a> () -&gt; void</td></tr>
<tr class="separator:ae01dcbbe40b54dcdd530d9a754ee9a5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5243105821375118132fe7a3e5d7ea3" id="r_aa5243105821375118132fe7a3e5d7ea3"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#aa5243105821375118132fe7a3e5d7ea3">setUid</a> (const std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt; &amp;<a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a>, const std::optional&lt; std::chrono::milliseconds &gt; &amp;max_delay) -&gt; void</td></tr>
<tr class="separator:aa5243105821375118132fe7a3e5d7ea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c9904c7fe8ef1d9ab3a0b32a60c0c17" id="r_a4c9904c7fe8ef1d9ab3a0b32a60c0c17"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a4c9904c7fe8ef1d9ab3a0b32a60c0c17">resetUid</a> () -&gt; void</td></tr>
<tr class="separator:a4c9904c7fe8ef1d9ab3a0b32a60c0c17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:ab63703def0afb2b54e76a3e337c38c0c" id="r_ab63703def0afb2b54e76a3e337c38c0c"><td class="memItemLeft" align="right" valign="top">static constexpr auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab63703def0afb2b54e76a3e337c38c0c">RxGainMax</a> = MFRC522::PCD_RxGain::RxGain_max</td></tr>
<tr class="separator:ab63703def0afb2b54e76a3e337c38c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-methods" name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a920d2c5f7680ea063bbb2f103696259a" id="r_a920d2c5f7680ea063bbb2f103696259a"><td class="memItemLeft" align="right" valign="top">std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">getSimulatedUid</a> () const</td></tr>
<tr class="separator:a920d2c5f7680ea063bbb2f103696259a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a919ba03da1573ff5cebabd976a55aea1" id="r_a919ba03da1573ff5cebabd976a55aea1"><td class="memItemLeft" align="right" valign="top">std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a> {std::nullopt}</td></tr>
<tr class="separator:a919ba03da1573ff5cebabd976a55aea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3ec1d48b6b3465183bcbd4565ebe712" id="r_ab3ec1d48b6b3465183bcbd4565ebe712"><td class="memItemLeft" align="right" valign="top">std::optional&lt; std::chrono::time_point&lt; std::chrono::system_clock &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a> {std::nullopt}</td></tr>
<tr class="separator:ab3ec1d48b6b3465183bcbd4565ebe712"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class implements a Mrfc522 with settable tag ID in order to allow simulation. </p>

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00018">18</a> of file <a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a18613a2d39ea0cc9fc3b9ce74b24cb5a" name="a18613a2d39ea0cc9fc3b9ce74b24cb5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18613a2d39ea0cc9fc3b9ce74b24cb5a">&#9670;&#160;</a></span>MockMrfc522()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr fabomatic::MockMrfc522::MockMrfc522 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   35</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4b795aa73514e7810386f308c08f1411" name="a4b795aa73514e7810386f308c08f1411"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b795aa73514e7810386f308c08f1411">&#9670;&#160;</a></span>getDriverUid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::getDriverUid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; <a class="el" href="structfabomatic_1_1_mock_mrfc522_1_1_uid_driver.xhtml">MockMrfc522::UidDriver</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00007">7</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">    8</span>  {</div>
<div class="line"><span class="lineno">    9</span>    UidDriver retVal{};</div>
<div class="line"><span class="lineno">   10</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">getSimulatedUid</a>().has_value())</div>
<div class="line"><span class="lineno">   11</span>    {</div>
<div class="line"><span class="lineno">   12</span>      retVal.size = <span class="keyword">sizeof</span>(<a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a>.value());</div>
<div class="line"><span class="lineno">   13</span>      <span class="keyword">const</span> <span class="keyword">auto</span> arr_uid = <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#a9a05432556bd8ae825f9adaab9ee8492">card::to_array</a>(<a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a>.value());</div>
<div class="line"><span class="lineno">   14</span>      std::copy(arr_uid.begin(), arr_uid.end(), retVal.uidByte.begin());</div>
<div class="line"><span class="lineno">   15</span>      retVal.sak = 1;</div>
<div class="line"><span class="lineno">   16</span>    }</div>
<div class="line"><span class="lineno">   17</span>    <span class="keywordflow">return</span> retVal;</div>
<div class="line"><span class="lineno">   18</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml_a919ba03da1573ff5cebabd976a55aea1"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">fabomatic::MockMrfc522::uid</a></div><div class="ttdeci">std::optional&lt; card::uid_t &gt; uid</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8hpp_source.xhtml#l00021">MockMrfc522.hpp:21</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml_a920d2c5f7680ea063bbb2f103696259a"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">fabomatic::MockMrfc522::getSimulatedUid</a></div><div class="ttdeci">std::optional&lt; card::uid_t &gt; getSimulatedUid() const</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8cpp_source.xhtml#l00062">MockMrfc522.cpp:62</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1card_xhtml_a9a05432556bd8ae825f9adaab9ee8492"><div class="ttname"><a href="namespacefabomatic_1_1card.xhtml#a9a05432556bd8ae825f9adaab9ee8492">fabomatic::card::to_array</a></div><div class="ttdeci">constexpr auto to_array(const uid_t uid) -&gt; const std::array&lt; uint8_t, conf::rfid_tags::UID_BYTE_LEN &gt;</div><div class="ttdoc">Converts a UID from an array of bytes to a number.</div><div class="ttdef"><b>Definition</b> <a href="card_8hpp_source.xhtml#l00053">card.hpp:53</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00062">getSimulatedUid()</a>, <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00029">fabomatic::MockMrfc522::UidDriver::size</a>, <a class="el" href="card_8hpp_source.xhtml#l00053">fabomatic::card::to_array()</a>, and <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00021">uid</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_mrfc522_a4b795aa73514e7810386f308c08f1411_cgraph.svg" width="386" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a920d2c5f7680ea063bbb2f103696259a" name="a920d2c5f7680ea063bbb2f103696259a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a920d2c5f7680ea063bbb2f103696259a">&#9670;&#160;</a></span>getSimulatedUid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::getSimulatedUid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   63</span>  {</div>
<div class="line"><span class="lineno">   64</span>    <span class="keywordflow">if</span> (<a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a>.has_value() &amp;&amp; std::chrono::system_clock::now() &gt; <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a>.value())</div>
<div class="line"><span class="lineno">   65</span>    {</div>
<div class="line"><span class="lineno">   66</span>      <span class="keywordflow">return</span> std::nullopt;</div>
<div class="line"><span class="lineno">   67</span>    }</div>
<div class="line"><span class="lineno">   68</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a>;</div>
<div class="line"><span class="lineno">   69</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml_ab3ec1d48b6b3465183bcbd4565ebe712"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">fabomatic::MockMrfc522::stop_uid_simulate_time</a></div><div class="ttdeci">std::optional&lt; std::chrono::time_point&lt; std::chrono::system_clock &gt; &gt; stop_uid_simulate_time</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8hpp_source.xhtml#l00022">MockMrfc522.hpp:22</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00022">stop_uid_simulate_time</a>, and <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00021">uid</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00007">getDriverUid()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_mrfc522_a920d2c5f7680ea063bbb2f103696259a_icgraph.svg" width="386" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae01dcbbe40b54dcdd530d9a754ee9a5c" name="ae01dcbbe40b54dcdd530d9a754ee9a5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae01dcbbe40b54dcdd530d9a754ee9a5c">&#9670;&#160;</a></span>PCD_DumpVersionToSerial()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PCD_DumpVersionToSerial </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   41</span>{}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac619cfce167b1c4eedf6761770c6b6fd" name="ac619cfce167b1c4eedf6761770c6b6fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac619cfce167b1c4eedf6761770c6b6fd">&#9670;&#160;</a></span>PCD_Init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PCD_Init </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00026">26</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   26</span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae311fea38ecaabac33b39acfb85b6bb5" name="ae311fea38ecaabac33b39acfb85b6bb5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae311fea38ecaabac33b39acfb85b6bb5">&#9670;&#160;</a></span>PCD_PerformSelfTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PCD_PerformSelfTest </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   37</span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ad97cb55d9358954fd872f818d54c126c" name="ad97cb55d9358954fd872f818d54c126c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad97cb55d9358954fd872f818d54c126c">&#9670;&#160;</a></span>PCD_SetAntennaGain()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PCD_SetAntennaGain </td>
          <td>(</td>
          <td class="paramtype">MFRC522Constants::PCD_RxGain&#160;</td>
          <td class="paramname"><em>gain</em></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   39</span>{}</div>
</div><!-- fragment -->
</div>
</div>
<a id="ac2928fd9f4f0bd4d9f0b715d59122308" name="ac2928fd9f4f0bd4d9f0b715d59122308"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2928fd9f4f0bd4d9f0b715d59122308">&#9670;&#160;</a></span>PICC_IsNewCardPresent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PICC_IsNewCardPresent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   20</span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">getSimulatedUid</a>().has_value(); }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a788900abe7e2b23aaf1471fc36ea2b5c" name="a788900abe7e2b23aaf1471fc36ea2b5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a788900abe7e2b23aaf1471fc36ea2b5c">&#9670;&#160;</a></span>PICC_ReadCardSerial()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PICC_ReadCardSerial </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   22</span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">getSimulatedUid</a>().has_value(); }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a3984f22a62b0e5b294eadc7649ce587e" name="a3984f22a62b0e5b294eadc7649ce587e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3984f22a62b0e5b294eadc7649ce587e">&#9670;&#160;</a></span>PICC_WakeupA()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::PICC_WakeupA </td>
          <td>(</td>
          <td class="paramtype">byte *&#160;</td>
          <td class="paramname"><em>bufferATQA</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">byte &amp;&#160;</td>
          <td class="paramname"><em>bufferSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   29</span>  {</div>
<div class="line"><span class="lineno">   30</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#a920d2c5f7680ea063bbb2f103696259a">getSimulatedUid</a>().has_value())</div>
<div class="line"><span class="lineno">   31</span>    {</div>
<div class="line"><span class="lineno">   32</span>      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">   33</span>    }</div>
<div class="line"><span class="lineno">   34</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">   35</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a475646b621a7ac3dfaa21e0b3cee456a" name="a475646b621a7ac3dfaa21e0b3cee456a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a475646b621a7ac3dfaa21e0b3cee456a">&#9670;&#160;</a></span>reset()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::MockMrfc522::reset </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   24</span>{ <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a> = std::nullopt; }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00021">uid</a>.</p>

</div>
</div>
<a id="a4c9904c7fe8ef1d9ab3a0b32a60c0c17" name="a4c9904c7fe8ef1d9ab3a0b32a60c0c17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c9904c7fe8ef1d9ab3a0b32a60c0c17">&#9670;&#160;</a></span>resetUid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::resetUid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   57</span>  {</div>
<div class="line"><span class="lineno">   58</span>    <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a> = std::nullopt;</div>
<div class="line"><span class="lineno">   59</span>    <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a> = std::nullopt;</div>
<div class="line"><span class="lineno">   60</span>  }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__common_8cpp_source.xhtml#l00019">fabomatic::tests::simulate_rfid_card()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_mrfc522_a4c9904c7fe8ef1d9ab3a0b32a60c0c17_icgraph.svg" width="100%" height="578"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aa5243105821375118132fe7a3e5d7ea3" name="aa5243105821375118132fe7a3e5d7ea3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5243105821375118132fe7a3e5d7ea3">&#9670;&#160;</a></span>setUid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMrfc522::setUid </td>
          <td>(</td>
          <td class="paramtype">const std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>uid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::optional&lt; std::chrono::milliseconds &gt; &amp;&#160;</td>
          <td class="paramname"><em>max_delay</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00043">43</a> of file <a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   44</span>  {</div>
<div class="line"><span class="lineno">   45</span>    this-&gt;<a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a> = <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#a919ba03da1573ff5cebabd976a55aea1">uid</a>;</div>
<div class="line"><span class="lineno">   46</span>    <span class="keywordflow">if</span> (max_delay.has_value())</div>
<div class="line"><span class="lineno">   47</span>    {</div>
<div class="line"><span class="lineno">   48</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a> = std::chrono::system_clock::now() + max_delay.value();</div>
<div class="line"><span class="lineno">   49</span>    }</div>
<div class="line"><span class="lineno">   50</span>    <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">   51</span>    {</div>
<div class="line"><span class="lineno">   52</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_mrfc522.xhtml#ab3ec1d48b6b3465183bcbd4565ebe712">stop_uid_simulate_time</a> = std::nullopt;</div>
<div class="line"><span class="lineno">   53</span>    }</div>
<div class="line"><span class="lineno">   54</span>  }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__common_8cpp_source.xhtml#l00019">fabomatic::tests::simulate_rfid_card()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_mrfc522_aa5243105821375118132fe7a3e5d7ea3_icgraph.svg" width="100%" height="578"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ab63703def0afb2b54e76a3e337c38c0c" name="ab63703def0afb2b54e76a3e337c38c0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab63703def0afb2b54e76a3e337c38c0c">&#9670;&#160;</a></span>RxGainMax</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr auto fabomatic::MockMrfc522::RxGainMax = MFRC522::PCD_RxGain::RxGain_max</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00051">51</a> of file <a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>.</p>

</div>
</div>
<a id="ab3ec1d48b6b3465183bcbd4565ebe712" name="ab3ec1d48b6b3465183bcbd4565ebe712"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3ec1d48b6b3465183bcbd4565ebe712">&#9670;&#160;</a></span>stop_uid_simulate_time</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::optional&lt;std::chrono::time_point&lt;std::chrono::system_clock&gt; &gt; fabomatic::MockMrfc522::stop_uid_simulate_time {std::nullopt}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00022">22</a> of file <a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   22</span>{std::nullopt};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00062">getSimulatedUid()</a>.</p>

</div>
</div>
<a id="a919ba03da1573ff5cebabd976a55aea1" name="a919ba03da1573ff5cebabd976a55aea1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a919ba03da1573ff5cebabd976a55aea1">&#9670;&#160;</a></span>uid</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::optional&lt;<a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a>&gt; fabomatic::MockMrfc522::uid {std::nullopt}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_mrfc522_8hpp_source.xhtml#l00021">21</a> of file <a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   21</span>{std::nullopt};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00007">getDriverUid()</a>, <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00062">getSimulatedUid()</a>, and <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00024">reset()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="_mock_mrfc522_8hpp_source.xhtml">MockMrfc522.hpp</a></li>
<li><a class="el" href="_mock_mrfc522_8cpp_source.xhtml">MockMrfc522.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 2 2024 19:19:46 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
