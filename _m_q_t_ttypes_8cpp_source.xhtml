<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: MQTTtypes.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(0); });
/* @license-end */
</script>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">MQTTtypes.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="_m_q_t_ttypes_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;string_view&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;WiFi.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &quot;<a class="code" href="_espressif_8hpp.xhtml">Espressif.hpp</a>&quot;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="preprocessor">#include &quot;<a class="code" href="_m_q_t_ttypes_8hpp.xhtml">MQTTtypes.hpp</a>&quot;</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#include &quot;ArduinoJson.hpp&quot;</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="preprocessor">#include &quot;<a class="code" href="_fab_user_8hpp.xhtml">FabUser.hpp</a>&quot;</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="preprocessor">#include &quot;<a class="code" href="card_8hpp.xhtml">card.hpp</a>&quot;</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="preprocessor">#ifndef GIT_VERSION</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="_m_q_t_ttypes_8cpp.xhtml#aef0b5124fcadf80db529fcb6df42808a">   15</a></span><span class="preprocessor">#define GIT_VERSION &quot;unknown&quot;</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="foldopen" id="foldopen00018" data-start="{" data-end="}">
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1_server_m_q_t_t.xhtml">   18</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefabomatic_1_1_server_m_q_t_t.xhtml">fabomatic::ServerMQTT</a></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>{</div>
<div class="foldopen" id="foldopen00020" data-start="{" data-end="}">
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_query.xhtml#aa6e13afa68b41305361dc1bca3669e2e">   20</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_query.xhtml#aa6e13afa68b41305361dc1bca3669e2e">UserQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  {</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;checkuser\&quot;,&quot;</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;uid\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_query.xhtml#a428e38ba676c83886902594b5271ca0a">uid</a>) &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  }</div>
</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="}">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_query.xhtml#a4d55c0db788aa536aa3ee9a7cc37a5e7">   29</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_query.xhtml#a4d55c0db788aa536aa3ee9a7cc37a5e7">MachineQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  {</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;checkmachine\&quot;&quot;</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  }</div>
</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="foldopen" id="foldopen00037" data-start="{" data-end="}">
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_alive_query.xhtml#a3527dd22c8ead3ebe0cba6b02f477e90">   37</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_alive_query.xhtml#a3527dd22c8ead3ebe0cba6b02f477e90">AliveQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  {</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    <span class="comment">// Get MAC address</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    <span class="keyword">const</span> <span class="keyword">auto</span> serial = <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">esp32::esp_serial</a>();</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;alive\&quot;,&quot;</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;version\&quot;:\&quot;&quot;</span> &lt;&lt; FABOMATIC_BUILD &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; <a class="code hl_define" href="_board_logic_8cpp.xhtml#aef0b5124fcadf80db529fcb6df42808a">GIT_VERSION</a> &lt;&lt; <span class="stringliteral">&quot;\&quot;,&quot;</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;ip\&quot;:\&quot;&quot;</span> &lt;&lt; WiFi.localIP().toString() &lt;&lt; <span class="stringliteral">&quot;\&quot;,&quot;</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;serial\&quot;:\&quot;&quot;</span> &lt;&lt; serial &lt;&lt; <span class="stringliteral">&quot;\&quot;,&quot;</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;heap\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">esp32::getFreeHeap</a>() &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  }</div>
</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="}">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_start_use_query.xhtml#abef135f36ca9b398ed54627c5d928568">   53</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_start_use_query.xhtml#abef135f36ca9b398ed54627c5d928568">StartUseQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  {</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;startuse\&quot;, &quot;</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;uid\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_start_use_query.xhtml#a12f596a89d00ca026f26fc51fa20f428">uid</a>) &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  }</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a55716ec72bb9477983513a35c8ec404e">   62</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a55716ec72bb9477983513a35c8ec404e">StopUseQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  {</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;stopuse\&quot;, &quot;</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;uid\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a76bfb591acccc333b1636dc431854f23">uid</a>) &lt;&lt; <span class="stringliteral">&quot;\&quot;,&quot;</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;duration\&quot;:&quot;</span> &lt;&lt; <a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a8a6fd6be04bf9a2cfca116926508516b">duration_s</a>.count()</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  }</div>
</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="foldopen" id="foldopen00072" data-start="{" data-end="}">
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#acdbbda2b17d14cf9035333a2d107a340">   72</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#acdbbda2b17d14cf9035333a2d107a340">InUseQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  {</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;inuse\&quot;, &quot;</span></div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;uid\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#a2a57c516394c61cfc5afe68450061f01">uid</a>) &lt;&lt; <span class="stringliteral">&quot;\&quot;,&quot;</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;duration\&quot;:&quot;</span> &lt;&lt; <a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#adbbea3cfe94c3b33051b0874024866be">duration_s</a>.count()</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  }</div>
</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query.xhtml#aa585b84098a163fe22c46533e81e9e27">   82</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query.xhtml#aa585b84098a163fe22c46533e81e9e27">RegisterMaintenanceQuery::payload</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  {</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;action\&quot;:\&quot;maintenance\&quot;, &quot;</span></div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>       &lt;&lt; <span class="stringliteral">&quot;\&quot;uid\&quot;:\&quot;&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query.xhtml#a59171de615b71f363534560049d1da13">uid</a>) &lt;&lt; <span class="stringliteral">&quot;\&quot;&quot;</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>       &lt;&lt; <span class="stringliteral">&quot;}&quot;</span>;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  }</div>
</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="foldopen" id="foldopen00091" data-start="{" data-end="}">
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a7182cd6e6db0a44ea9f13041de81b240">   91</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a7182cd6e6db0a44ea9f13041de81b240">UserResponse::getResult</a>() const -&gt; <a class="code hl_enumeration" href="namespacefabomatic_1_1_server_m_q_t_t.xhtml#a84cb68ff1e79f3f6d5e3cd37a3289d9d">UserResult</a></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  {</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code hl_enumeration" href="namespacefabomatic_1_1_server_m_q_t_t.xhtml#a84cb68ff1e79f3f6d5e3cd37a3289d9d">UserResult</a><span class="keyword">&gt;</span>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#af86ce395e8c8f08df94f6e222bb37e47">result</a>);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  }</div>
</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="foldopen" id="foldopen00096" data-start="{" data-end="}">
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a90b12a6e5b4c97fd8a80e9d1a1529854">   96</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a90b12a6e5b4c97fd8a80e9d1a1529854">UserResponse::fromJson</a>(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt;UserResponse&gt;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  {</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    <span class="keyword">auto</span> response = std::make_unique&lt;UserResponse&gt;(doc[<span class="stringliteral">&quot;request_ok&quot;</span>].as&lt;bool&gt;());</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    response-&gt;result = doc[<span class="stringliteral">&quot;is_valid&quot;</span>];</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    response-&gt;holder_name = doc[<span class="stringliteral">&quot;name&quot;</span>].as&lt;std::string&gt;();</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    response-&gt;user_level = <span class="keyword">static_cast&lt;</span><a class="code hl_enumeration" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0">FabUser::UserLevel</a><span class="keyword">&gt;</span>(doc[<span class="stringliteral">&quot;level&quot;</span>].as&lt;<span class="keywordtype">int</span>&gt;());</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keywordflow">return</span> response;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  }</div>
</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="foldopen" id="foldopen00106" data-start="{" data-end="}">
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a02af95da05866ab09a247859a5b93c8e">  106</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a02af95da05866ab09a247859a5b93c8e">UserResponse::toString</a>() const -&gt; const std::<span class="keywordtype">string</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  {</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    std::stringstream ss{};</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>    ss &lt;&lt; <span class="stringliteral">&quot;UserResponse: &quot;</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>       &lt;&lt; <span class="stringliteral">&quot;request_ok: &quot;</span> &lt;&lt; <a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_response.xhtml#a4fdd19ea83639a455fba841a43be1409">request_ok</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>       &lt;&lt; <span class="stringliteral">&quot;result: &quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#af86ce395e8c8f08df94f6e222bb37e47">result</a>) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>       &lt;&lt; <span class="stringliteral">&quot;holder_name: &quot;</span> &lt;&lt; <a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a1b0892910c94b2fc7cc55d73ba5ab905">holder_name</a> &lt;&lt; <span class="stringliteral">&quot;, &quot;</span></div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>       &lt;&lt; <span class="stringliteral">&quot;user_level: &quot;</span> &lt;&lt; <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code hl_variable" href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a92f3710dd8d00d4acffc21e6c7a98dec">user_level</a>);</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  }</div>
</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="foldopen" id="foldopen00117" data-start="{" data-end="}">
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_response.xhtml#afbbd0aad7920361b3f89b4f0be34581b">  117</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_response.xhtml#afbbd0aad7920361b3f89b4f0be34581b">MachineResponse::fromJson</a>(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt;MachineResponse&gt;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  {</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>    <span class="keyword">auto</span> response = std::make_unique&lt;MachineResponse&gt;(doc[<span class="stringliteral">&quot;request_ok&quot;</span>].as&lt;bool&gt;());</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    response-&gt;is_valid = doc[<span class="stringliteral">&quot;is_valid&quot;</span>];</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    response-&gt;maintenance = doc[<span class="stringliteral">&quot;maintenance&quot;</span>];</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    response-&gt;allowed = doc[<span class="stringliteral">&quot;allowed&quot;</span>];</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    response-&gt;logoff = doc[<span class="stringliteral">&quot;logoff&quot;</span>];</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>    response-&gt;name = doc[<span class="stringliteral">&quot;name&quot;</span>].as&lt;std::string&gt;();</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    response-&gt;type = doc[<span class="stringliteral">&quot;type&quot;</span>];</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    <span class="keywordflow">if</span> (!doc[<span class="stringliteral">&quot;grace&quot;</span>].isNull())</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    {</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>      response-&gt;grace = doc[<span class="stringliteral">&quot;grace&quot;</span>];</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    }</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    {</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>      response-&gt;grace = std::chrono::duration_cast&lt;std::chrono::minutes&gt;(<a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1machine.xhtml#ae8241f637717805c02c092b26b3e5091">conf::machine::DEFAULT_GRACE_PERIOD</a>).count();</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    }</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>    <span class="keywordflow">if</span> (!doc[<span class="stringliteral">&quot;description&quot;</span>].isNull())</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    {</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>      response-&gt;description = doc[<span class="stringliteral">&quot;description&quot;</span>].as&lt;std::string&gt;();</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    }</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    {</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>      response-&gt;description = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    <span class="keywordflow">return</span> response;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  }</div>
</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="classfabomatic_1_1_server_m_q_t_t_1_1_simple_response.xhtml#abf469170d8ada231a20da23864caa722">  146</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="classfabomatic_1_1_server_m_q_t_t_1_1_simple_response.xhtml#abf469170d8ada231a20da23864caa722">SimpleResponse::fromJson</a>(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt;SimpleResponse&gt;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  {</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="keyword">auto</span> response = std::make_unique&lt;SimpleResponse&gt;(doc[<span class="stringliteral">&quot;request_ok&quot;</span>].as&lt;bool&gt;());</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    <span class="keywordflow">return</span> response;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  }</div>
</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>} <span class="comment">// namespace fabomatic::ServerMQTT</span></div>
</div>
<div class="ttc" id="a_board_logic_8cpp_xhtml_aef0b5124fcadf80db529fcb6df42808a"><div class="ttname"><a href="_board_logic_8cpp.xhtml#aef0b5124fcadf80db529fcb6df42808a">GIT_VERSION</a></div><div class="ttdeci">#define GIT_VERSION</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00022">BoardLogic.cpp:22</a></div></div>
<div class="ttc" id="a_espressif_8hpp_xhtml"><div class="ttname"><a href="_espressif_8hpp.xhtml">Espressif.hpp</a></div></div>
<div class="ttc" id="a_fab_user_8hpp_xhtml"><div class="ttname"><a href="_fab_user_8hpp.xhtml">FabUser.hpp</a></div></div>
<div class="ttc" id="a_m_q_t_ttypes_8hpp_xhtml"><div class="ttname"><a href="_m_q_t_ttypes_8hpp.xhtml">MQTTtypes.hpp</a></div></div>
<div class="ttc" id="acard_8hpp_xhtml"><div class="ttname"><a href="card_8hpp.xhtml">card.hpp</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_alive_query_xhtml_a3527dd22c8ead3ebe0cba6b02f477e90"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_alive_query.xhtml#a3527dd22c8ead3ebe0cba6b02f477e90">fabomatic::ServerMQTT::AliveQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00037">MQTTtypes.cpp:37</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_in_use_query_xhtml_a2a57c516394c61cfc5afe68450061f01"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#a2a57c516394c61cfc5afe68450061f01">fabomatic::ServerMQTT::InUseQuery::uid</a></div><div class="ttdeci">const card::uid_t uid</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00088">MQTTtypes.hpp:88</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_in_use_query_xhtml_acdbbda2b17d14cf9035333a2d107a340"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#acdbbda2b17d14cf9035333a2d107a340">fabomatic::ServerMQTT::InUseQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00072">MQTTtypes.cpp:72</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_in_use_query_xhtml_adbbea3cfe94c3b33051b0874024866be"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_in_use_query.xhtml#adbbea3cfe94c3b33051b0874024866be">fabomatic::ServerMQTT::InUseQuery::duration_s</a></div><div class="ttdeci">const std::chrono::seconds duration_s</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00089">MQTTtypes.hpp:89</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_machine_query_xhtml_a4d55c0db788aa536aa3ee9a7cc37a5e7"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_query.xhtml#a4d55c0db788aa536aa3ee9a7cc37a5e7">fabomatic::ServerMQTT::MachineQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00029">MQTTtypes.cpp:29</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_machine_response_xhtml_afbbd0aad7920361b3f89b4f0be34581b"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_machine_response.xhtml#afbbd0aad7920361b3f89b4f0be34581b">fabomatic::ServerMQTT::MachineResponse::fromJson</a></div><div class="ttdeci">static auto fromJson(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt; MachineResponse &gt;</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00117">MQTTtypes.cpp:117</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query_xhtml_a59171de615b71f363534560049d1da13"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query.xhtml#a59171de615b71f363534560049d1da13">fabomatic::ServerMQTT::RegisterMaintenanceQuery::uid</a></div><div class="ttdeci">const card::uid_t uid</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00106">MQTTtypes.hpp:106</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query_xhtml_aa585b84098a163fe22c46533e81e9e27"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_register_maintenance_query.xhtml#aa585b84098a163fe22c46533e81e9e27">fabomatic::ServerMQTT::RegisterMaintenanceQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00082">MQTTtypes.cpp:82</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_response_xhtml_a4fdd19ea83639a455fba841a43be1409"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_response.xhtml#a4fdd19ea83639a455fba841a43be1409">fabomatic::ServerMQTT::Response::request_ok</a></div><div class="ttdeci">const bool request_ok</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00119">MQTTtypes.hpp:119</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_simple_response_xhtml_abf469170d8ada231a20da23864caa722"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_simple_response.xhtml#abf469170d8ada231a20da23864caa722">fabomatic::ServerMQTT::SimpleResponse::fromJson</a></div><div class="ttdeci">static auto fromJson(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt; SimpleResponse &gt;</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00146">MQTTtypes.cpp:146</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_start_use_query_xhtml_a12f596a89d00ca026f26fc51fa20f428"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_start_use_query.xhtml#a12f596a89d00ca026f26fc51fa20f428">fabomatic::ServerMQTT::StartUseQuery::uid</a></div><div class="ttdeci">const card::uid_t uid</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00057">MQTTtypes.hpp:57</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_start_use_query_xhtml_abef135f36ca9b398ed54627c5d928568"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_start_use_query.xhtml#abef135f36ca9b398ed54627c5d928568">fabomatic::ServerMQTT::StartUseQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00053">MQTTtypes.cpp:53</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query_xhtml_a55716ec72bb9477983513a35c8ec404e"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a55716ec72bb9477983513a35c8ec404e">fabomatic::ServerMQTT::StopUseQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00062">MQTTtypes.cpp:62</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query_xhtml_a76bfb591acccc333b1636dc431854f23"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a76bfb591acccc333b1636dc431854f23">fabomatic::ServerMQTT::StopUseQuery::uid</a></div><div class="ttdeci">const card::uid_t uid</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00070">MQTTtypes.hpp:70</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query_xhtml_a8a6fd6be04bf9a2cfca116926508516b"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_stop_use_query.xhtml#a8a6fd6be04bf9a2cfca116926508516b">fabomatic::ServerMQTT::StopUseQuery::duration_s</a></div><div class="ttdeci">const std::chrono::seconds duration_s</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00071">MQTTtypes.hpp:71</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_query_xhtml_a428e38ba676c83886902594b5271ca0a"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_query.xhtml#a428e38ba676c83886902594b5271ca0a">fabomatic::ServerMQTT::UserQuery::uid</a></div><div class="ttdeci">const card::uid_t uid</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00026">MQTTtypes.hpp:26</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_query_xhtml_aa6e13afa68b41305361dc1bca3669e2e"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_query.xhtml#aa6e13afa68b41305361dc1bca3669e2e">fabomatic::ServerMQTT::UserQuery::payload</a></div><div class="ttdeci">auto payload() const -&gt; const std::string override</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00020">MQTTtypes.cpp:20</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_a02af95da05866ab09a247859a5b93c8e"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a02af95da05866ab09a247859a5b93c8e">fabomatic::ServerMQTT::UserResponse::toString</a></div><div class="ttdeci">auto toString() const -&gt; const std::string</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00106">MQTTtypes.cpp:106</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_a1b0892910c94b2fc7cc55d73ba5ab905"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a1b0892910c94b2fc7cc55d73ba5ab905">fabomatic::ServerMQTT::UserResponse::holder_name</a></div><div class="ttdeci">std::string holder_name</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00137">MQTTtypes.hpp:137</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_a7182cd6e6db0a44ea9f13041de81b240"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a7182cd6e6db0a44ea9f13041de81b240">fabomatic::ServerMQTT::UserResponse::getResult</a></div><div class="ttdeci">auto getResult() const -&gt; UserResult</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00091">MQTTtypes.cpp:91</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_a90b12a6e5b4c97fd8a80e9d1a1529854"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a90b12a6e5b4c97fd8a80e9d1a1529854">fabomatic::ServerMQTT::UserResponse::fromJson</a></div><div class="ttdeci">static auto fromJson(JsonDocument &amp;doc) -&gt; std::unique_ptr&lt; UserResponse &gt;</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00096">MQTTtypes.cpp:96</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_a92f3710dd8d00d4acffc21e6c7a98dec"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#a92f3710dd8d00d4acffc21e6c7a98dec">fabomatic::ServerMQTT::UserResponse::user_level</a></div><div class="ttdeci">FabUser::UserLevel user_level</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00138">MQTTtypes.hpp:138</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_server_m_q_t_t_1_1_user_response_xhtml_af86ce395e8c8f08df94f6e222bb37e47"><div class="ttname"><a href="classfabomatic_1_1_server_m_q_t_t_1_1_user_response.xhtml#af86ce395e8c8f08df94f6e222bb37e47">fabomatic::ServerMQTT::UserResponse::result</a></div><div class="ttdeci">uint8_t result</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00136">MQTTtypes.hpp:136</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1_server_m_q_t_t_xhtml"><div class="ttname"><a href="namespacefabomatic_1_1_server_m_q_t_t.xhtml">fabomatic::ServerMQTT</a></div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8cpp_source.xhtml#l00018">MQTTtypes.cpp:19</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1_server_m_q_t_t_xhtml_a84cb68ff1e79f3f6d5e3cd37a3289d9d"><div class="ttname"><a href="namespacefabomatic_1_1_server_m_q_t_t.xhtml#a84cb68ff1e79f3f6d5e3cd37a3289d9d">fabomatic::ServerMQTT::UserResult</a></div><div class="ttdeci">UserResult</div><div class="ttdef"><b>Definition</b> <a href="_m_q_t_ttypes_8hpp_source.xhtml#l00125">MQTTtypes.hpp:126</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1card_xhtml_aef091ec171625c69f9d4eab20ebaefec"><div class="ttname"><a href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">fabomatic::card::uid_str</a></div><div class="ttdeci">auto uid_str(const card::uid_t uid) -&gt; const std::string</div><div class="ttdoc">Returns a string representation of the UID.</div><div class="ttdef"><b>Definition</b> <a href="card_8hpp_source.xhtml#l00020">card.hpp:20</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1machine_xhtml_ae8241f637717805c02c092b26b3e5091"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1machine.xhtml#ae8241f637717805c02c092b26b3e5091">fabomatic::conf::machine::DEFAULT_GRACE_PERIOD</a></div><div class="ttdeci">static constexpr auto DEFAULT_GRACE_PERIOD</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00103">conf.hpp:103</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a07750a641e5cfe3207bbdf72813af628"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">fabomatic::esp32::getFreeHeap</a></div><div class="ttdeci">auto getFreeHeap() -&gt; uint32_t</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00088">Espressif.cpp:88</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ac8d867c42c073a3e44e6292db72e1f94"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">fabomatic::esp32::esp_serial</a></div><div class="ttdeci">auto esp_serial() -&gt; const std::string_view</div><div class="ttdoc">Returns the ESP32 serial number as a string.</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00067">Espressif.cpp:67</a></div></div>
<div class="ttc" id="astructfabomatic_1_1_fab_user_xhtml_a75deeb54124600e0387550735c7a0ca0"><div class="ttname"><a href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0">fabomatic::FabUser::UserLevel</a></div><div class="ttdeci">UserLevel</div><div class="ttdef"><b>Definition</b> <a href="_fab_user_8hpp_source.xhtml#l00016">FabUser.hpp:17</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jun 30 2024 20:15:48 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
