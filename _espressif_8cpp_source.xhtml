<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: Espressif.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function() { init_codefold(0); });
/* @license-end */
</script>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">Espressif.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="_espressif_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &quot;esp_heap_caps.h&quot;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &quot;esp_task_wdt.h&quot;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &quot;esp_mac.h&quot;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#include &quot;<a class="code" href="_espressif_8hpp.xhtml">Espressif.hpp</a>&quot;</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="preprocessor">#include &quot;<a class="code" href="_logging_8hpp.xhtml">Logging.hpp</a>&quot;</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="foldopen" id="foldopen00013" data-start="{" data-end="}">
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml">   13</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefabomatic_1_1esp32.xhtml">fabomatic::esp32</a></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="foldopen" id="foldopen00015" data-start="{" data-end="}">
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#a5f5bb4a72418870dbcddd266b5bb0fcd">   15</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a5f5bb4a72418870dbcddd266b5bb0fcd">showHeapStats</a>()</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  {</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>    heap_caps_print_heap_info(MALLOC_CAP_8BIT);</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    <span class="comment">// Get heap summary</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>    multi_heap_info_t heap_info;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>    heap_caps_get_info(&amp;heap_info, MALLOC_CAP_8BIT);</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="comment">// Log heap statistics</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Total Free Heap Size: %zu bytes&quot;</span>, heap_info.total_free_bytes);</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Total Allocated Size: %zu bytes&quot;</span>, heap_info.total_allocated_bytes);</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Largest Free Block: %zu bytes&quot;</span>, heap_info.largest_free_block);</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Min Free Heap Size Ever: %zu bytes&quot;</span>, heap_info.minimum_free_bytes);</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Free Blocks: %zu&quot;</span>, heap_info.free_blocks);</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    ESP_LOGI(<span class="stringliteral">&quot;Heap Stats&quot;</span>, <span class="stringliteral">&quot;Allocated Blocks: %zu&quot;</span>, heap_info.allocated_blocks);</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  }</div>
</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="foldopen" id="foldopen00032" data-start="{" data-end="}">
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#a8bec49abfae47da0cadccb6e486f69bb">   32</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a8bec49abfae47da0cadccb6e486f69bb">setupWatchdog</a>(std::chrono::milliseconds msecs) -&gt; <span class="keywordtype">bool</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  {</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">removeWatchdog</a>();</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="preprocessor">#if ESP_IDF_VERSION_MAJOR &lt; 5</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>    <span class="keyword">auto</span> secs = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(std::chrono::duration_cast&lt;std::chrono::seconds&gt;(msecs).count());</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    <span class="keyword">auto</span> retVal = esp_task_wdt_init(secs, <span class="keyword">true</span>);</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    ESP_LOGI(<a class="code hl_variable" href="_logging_8hpp.xhtml#a4ef5b5f197804a60836ab1e8907d8301">TAG</a>, <span class="stringliteral">&quot;taskEspWatchdog - initialized %u seconds&quot;</span>, secs);</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    <span class="keyword">auto</span> ui_msecs = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(msecs.count());</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    esp_task_wdt_config_t conf{.timeout_ms = ui_msecs, .idle_core_mask = 1, .trigger_panic = <span class="keyword">true</span>};</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    <span class="keyword">auto</span> retVal = esp_task_wdt_init(&amp;conf);</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    ESP_LOGI(<a class="code hl_variable" href="_logging_8hpp.xhtml#a4ef5b5f197804a60836ab1e8907d8301">TAG</a>, <span class="stringliteral">&quot;taskEspWatchdog - initialized %lu milliseconds&quot;</span>, ui_msecs);</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>    <span class="keywordflow">if</span> (retVal != ESP_OK)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    }</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    retVal = esp_task_wdt_add(NULL); <span class="comment">// add current thread to WDT watch</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    <span class="keywordflow">return</span> (retVal == ESP_OK);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  }</div>
</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#ac7eca0f98345aa2c296103d6dc9fff01">   56</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ac7eca0f98345aa2c296103d6dc9fff01">signalWatchdog</a>() -&gt; <span class="keywordtype">bool</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  {</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    <span class="keywordflow">return</span> esp_task_wdt_reset() == ESP_OK;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  }</div>
</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="foldopen" id="foldopen00061" data-start="{" data-end="}">
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">   61</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">removeWatchdog</a>() -&gt; <span class="keywordtype">void</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    esp_task_wdt_deinit();</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  }</div>
</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">   67</a></span>  [[nodiscard]] <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">esp_serial</a>() -&gt; <span class="keyword">const</span> std::string_view</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="keyword">static</span> std::array&lt;char, 13&gt; result; <span class="comment">// +1 for null termination</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    <span class="keywordflow">if</span> (result[0] == <span class="charliteral">&#39;\0&#39;</span>) <span class="comment">// Compute only once</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>      std::stringstream serial{};</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>      std::array&lt;uint8_t, 8&gt; mac{0};</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>      esp_efuse_mac_get_default(mac.data());</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>      <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> val : mac)</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>      {</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>        serial &lt;&lt; std::setfill(<span class="charliteral">&#39;0&#39;</span>) &lt;&lt; std::setw(2) &lt;&lt; std::hex &lt;&lt; +val;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>      }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>      <span class="keyword">auto</span> res = serial.str().substr(0U, 6 * 2);</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>      std::copy(res.cbegin(), res.cend(), result.begin());</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>      result[result.size() - 1] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    }</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    <span class="keywordflow">return</span> {result.data()};</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  }</div>
</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">   88</a></span>  <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">getFreeHeap</a>() -&gt; uint32_t</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    <span class="keywordflow">return</span> esp_get_free_heap_size();</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  }</div>
</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="foldopen" id="foldopen00093" data-start="{" data-end="}">
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="namespacefabomatic_1_1esp32.xhtml#a6afa9ef478bc8a9ca73049f33b8fb8af">   93</a></span>  [[noreturn]] <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a6afa9ef478bc8a9ca73049f33b8fb8af">restart</a>() -&gt; <span class="keywordtype">void</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  {</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    esp_restart();</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  }</div>
</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>}</div>
</div>
<div class="ttc" id="a_espressif_8hpp_xhtml"><div class="ttname"><a href="_espressif_8hpp.xhtml">Espressif.hpp</a></div></div>
<div class="ttc" id="a_logging_8hpp_xhtml"><div class="ttname"><a href="_logging_8hpp.xhtml">Logging.hpp</a></div></div>
<div class="ttc" id="a_logging_8hpp_xhtml_a4ef5b5f197804a60836ab1e8907d8301"><div class="ttname"><a href="_logging_8hpp.xhtml#a4ef5b5f197804a60836ab1e8907d8301">TAG</a></div><div class="ttdeci">static const char *const TAG</div><div class="ttdef"><b>Definition</b> <a href="_logging_8hpp_source.xhtml#l00006">Logging.hpp:6</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml">fabomatic::esp32</a></div><div class="ttdoc">Contains all espressif32 features not masked by Arduino IDE.</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00013">Espressif.cpp:14</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a07750a641e5cfe3207bbdf72813af628"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">fabomatic::esp32::getFreeHeap</a></div><div class="ttdeci">auto getFreeHeap() -&gt; uint32_t</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00088">Espressif.cpp:88</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a5f5bb4a72418870dbcddd266b5bb0fcd"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a5f5bb4a72418870dbcddd266b5bb0fcd">fabomatic::esp32::showHeapStats</a></div><div class="ttdeci">void showHeapStats()</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00015">Espressif.cpp:15</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a6afa9ef478bc8a9ca73049f33b8fb8af"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a6afa9ef478bc8a9ca73049f33b8fb8af">fabomatic::esp32::restart</a></div><div class="ttdeci">auto restart() -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00093">Espressif.cpp:93</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a8bec49abfae47da0cadccb6e486f69bb"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a8bec49abfae47da0cadccb6e486f69bb">fabomatic::esp32::setupWatchdog</a></div><div class="ttdeci">auto setupWatchdog(std::chrono::milliseconds msecs) -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00032">Espressif.cpp:32</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ac7eca0f98345aa2c296103d6dc9fff01"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ac7eca0f98345aa2c296103d6dc9fff01">fabomatic::esp32::signalWatchdog</a></div><div class="ttdeci">auto signalWatchdog() -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00056">Espressif.cpp:56</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ac8d867c42c073a3e44e6292db72e1f94"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">fabomatic::esp32::esp_serial</a></div><div class="ttdeci">auto esp_serial() -&gt; const std::string_view</div><div class="ttdoc">Returns the ESP32 serial number as a string.</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00067">Espressif.cpp:67</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ae78a1408710128cb446f2cde991017dd"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">fabomatic::esp32::removeWatchdog</a></div><div class="ttdeci">auto removeWatchdog() -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00061">Espressif.cpp:61</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 2 2024 19:19:45 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
