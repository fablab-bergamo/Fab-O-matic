#ifndef _SECRETS_H_
#define _SECRETS_H_

#include <cstdint>
#include <array>
#include <string_view>
#include "Machine.h"
#include "conf.h"
#include "FabUser.h"

using namespace std::string_view_literals;

namespace secrets
{
  namespace cards
  {
    using WhiteListEntry = std::tuple<card::uid_t, FabUser::UserLevel, std::string_view>;
    using WhiteList = std::array<WhiteListEntry, conf::whitelist::LEN>;

    static constexpr WhiteList whitelist /* List of RFID tags whitelisted, regardless of connection */
        {
            std::make_tuple(0xF6F07894, FabUser::UserLevel::FABLAB_ADMIN, "ADMIN1"),
            std::make_tuple(0x835c43e5, FabUser::UserLevel::FABLAB_ADMIN, "TEST1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDD, FabUser::UserLevel::FABLAB_USER, "USER1")};
  }

  namespace machine
  {
    // Machine connected to the ESP32
    static constexpr std::string_view machine_name = "LASER1"sv;
    static constexpr Machine::MachineType machine_type = Machine::MachineType::LASER;
    static constexpr Machine::MachineID machine_id {45678};

  }
  namespace wifi
  {
    static constexpr std::string_view ssid = "EXAMPLE_SSID"sv;                /* Change with WIFI SSID name */
    static constexpr std::string_view password = "EXAMPLE_PASSWORD!"sv;       /* Change with WIFI SSID password */
  }
}
#endif