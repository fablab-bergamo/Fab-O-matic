#ifndef SECRETS_H_
#define SECRETS_H_

#include <cstdint>
#include <array>
#include <string_view>
#include "Machine.h"
#include "conf.h"
#include "FabUser.h"

namespace secrets
{
  namespace cards
  {
    using WhiteListEntry = std::tuple<card::uid_t, FabUser::UserLevel, std::string_view>;
    using WhiteList = std::array<WhiteListEntry, conf::whitelist::LEN>;

    static constexpr WhiteList whitelist /* List of RFID tags whitelisted, regardless of connection */
        {
            std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FABLAB_ADMIN, "ABCDEFG"),
            std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FABLAB_ADMIN, "PIPPO"),
            std::make_tuple(0xAABBCCD3, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCD4, FabUser::UserLevel::FABLAB_USER, "USER2"),
            std::make_tuple(0xAABBCCD5, FabUser::UserLevel::FABLAB_USER, "USER3"),
            std::make_tuple(0xAABBCCD6, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCD7, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCD8, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCD9, FabUser::UserLevel::FABLAB_USER, "USER1"),
            std::make_tuple(0xAABBCCDA, FabUser::UserLevel::FABLAB_USER, "USER1")};
  }

  namespace machine
  {
    // Machine connected to the ESP32
    static constexpr std::string_view machine_name = "LASER1";
    static constexpr Machine::MachineType machine_type = Machine::MachineType::LASER;
    static constexpr Machine::MachineID machine_id{45678}; /* ID of the machine. Will be used to compose MQTT topic*/

  }
  namespace wifi
  {
    static constexpr std::string_view ssid = "SSID";                /* Change with WIFI SSID name */
    static constexpr std::string_view password = "PASSWORD";        /* Change with WIFI SSID password */
  }
  namespace mqtt
  {
    static constexpr std::string_view client = "ESP32";          /* Name of with MQTT client */
    static constexpr std::string_view user = "user";             /* Change with MQTT user */
    static constexpr std::string_view password = "password";     /* Change with MQTT password */
    static constexpr std::string_view server = "127.0.0.1";      /* IP of MQTT broker*/
    static constexpr std::string_view topic = "/machine";        /* Initial part of the topic, machine ID will be added */
    static constexpr std::string_view response_topic = "/reply"; /* Server reply (sub-topic of the full machine topic) */
  }
} // namespace secrets
#endif // SECRETS_H_