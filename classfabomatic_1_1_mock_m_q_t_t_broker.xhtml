<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: fabomatic::MockMQTTBroker Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacefabomatic.xhtml">fabomatic</a></li><li class="navelem"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml">MockMQTTBroker</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classfabomatic_1_1_mock_m_q_t_t_broker-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fabomatic::MockMQTTBroker Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>This class implements an MQTT broker with predefined responses to <a class="el" href="classfabomatic_1_1_fab_backend.xhtml" title="This class is used to exchange messages with the MQTT broker and the backend.">FabBackend</a> requests.  
 <a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for fabomatic::MockMQTTBroker:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker__inherit__graph.svg" width="194" height="430"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Collaboration diagram for fabomatic::MockMQTTBroker:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a925db02025c2d657eebd415af3def156" id="r_a925db02025c2d657eebd415af3def156"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a925db02025c2d657eebd415af3def156">MockMQTTBroker</a> ()=default</td></tr>
<tr class="separator:a925db02025c2d657eebd415af3def156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78a57e64b156c6d6d93104fec142740d" id="r_a78a57e64b156c6d6d93104fec142740d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a> () const -&gt; bool</td></tr>
<tr class="memdesc:a78a57e64b156c6d6d93104fec142740d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the MQTT broker is running.  <br /></td></tr>
<tr class="separator:a78a57e64b156c6d6d93104fec142740d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6c05df03ca2f41d6a9b48d17ce84ab1" id="r_ac6c05df03ca2f41d6a9b48d17ce84ab1"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">start</a> () -&gt; void</td></tr>
<tr class="memdesc:ac6c05df03ca2f41d6a9b48d17ce84ab1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the MQTT broker.  <br /></td></tr>
<tr class="separator:ac6c05df03ca2f41d6a9b48d17ce84ab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bdfd3cf53bce5d2923f4efeff0621a7" id="r_a1bdfd3cf53bce5d2923f4efeff0621a7"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1bdfd3cf53bce5d2923f4efeff0621a7">onEvent</a> (sMQTTEvent *event) -&gt; bool override</td></tr>
<tr class="memdesc:a1bdfd3cf53bce5d2923f4efeff0621a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Handles MQTT events.  <br /></td></tr>
<tr class="separator:a1bdfd3cf53bce5d2923f4efeff0621a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb5eadd85f359d48e3871bfede5ee19d" id="r_aeb5eadd85f359d48e3871bfede5ee19d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a> (const std::string &amp;<a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>) const -&gt; const std::string</td></tr>
<tr class="memdesc:aeb5eadd85f359d48e3871bfede5ee19d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides fake server replies for testing purposes.  <br /></td></tr>
<tr class="separator:aeb5eadd85f359d48e3871bfede5ee19d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ca30ff9daccacbdecdc598f1749951e" id="r_a6ca30ff9daccacbdecdc598f1749951e"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a6ca30ff9daccacbdecdc598f1749951e">configureReplies</a> (std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt; <a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a>) -&gt; void</td></tr>
<tr class="memdesc:a6ca30ff9daccacbdecdc598f1749951e"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the reply generation function. May be called from a different thread  <br /></td></tr>
<tr class="separator:a6ca30ff9daccacbdecdc598f1749951e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a119e59001d5ce25708aa2198623505c6" id="r_a119e59001d5ce25708aa2198623505c6"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">processQueries</a> () -&gt; size_t</td></tr>
<tr class="memdesc:a119e59001d5ce25708aa2198623505c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Processes pending MQTT queries.  <br /></td></tr>
<tr class="separator:a119e59001d5ce25708aa2198623505c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cd18cc3fb887b17e4668bbf99a531e5" id="r_a4cd18cc3fb887b17e4668bbf99a531e5"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">mainLoop</a> () -&gt; void</td></tr>
<tr class="memdesc:a4cd18cc3fb887b17e4668bbf99a531e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main loop for the MQTT broker.  <br /></td></tr>
<tr class="separator:a4cd18cc3fb887b17e4668bbf99a531e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:abe648b262ec5cc3699883425dbf3eaa2" id="r_abe648b262ec5cc3699883425dbf3eaa2"><td class="memItemLeft" align="right" valign="top">std::mutex&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">mutex</a></td></tr>
<tr class="separator:abe648b262ec5cc3699883425dbf3eaa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd83148966b7a81bf0961c0e61bfb504" id="r_acd83148966b7a81bf0961c0e61bfb504"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a> {&quot;&quot;}</td></tr>
<tr class="separator:acd83148966b7a81bf0961c0e61bfb504"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4401fae9098ba10caf84afc6b11b14ae" id="r_a4401fae9098ba10caf84afc6b11b14ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">payload</a> {&quot;&quot;}</td></tr>
<tr class="separator:a4401fae9098ba10caf84afc6b11b14ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a015654d87af05fcf75df5654e8b3dd9e" id="r_a015654d87af05fcf75df5654e8b3dd9e"><td class="memItemLeft" align="right" valign="top">std::queue&lt; <a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a> {}</td></tr>
<tr class="separator:a015654d87af05fcf75df5654e8b3dd9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af85cd98d1c8f18ab1b74be039a9e03d2" id="r_af85cd98d1c8f18ab1b74be039a9e03d2"><td class="memItemLeft" align="right" valign="top">std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a></td></tr>
<tr class="separator:af85cd98d1c8f18ab1b74be039a9e03d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee749f4bebf96f67e62da34998ab900" id="r_aaee749f4bebf96f67e62da34998ab900"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a> {false}</td></tr>
<tr class="separator:aaee749f4bebf96f67e62da34998ab900"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class implements an MQTT broker with predefined responses to <a class="el" href="classfabomatic_1_1_fab_backend.xhtml" title="This class is used to exchange messages with the MQTT broker and the backend.">FabBackend</a> requests. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00015">15</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a925db02025c2d657eebd415af3def156" name="a925db02025c2d657eebd415af3def156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a925db02025c2d657eebd415af3def156">&#9670;&#160;</a></span>MockMQTTBroker()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">fabomatic::MockMQTTBroker::MockMQTTBroker </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6ca30ff9daccacbdecdc598f1749951e" name="a6ca30ff9daccacbdecdc598f1749951e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ca30ff9daccacbdecdc598f1749951e">&#9670;&#160;</a></span>configureReplies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::configureReplies </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set the reply generation function. May be called from a different thread </p>
<p>Configures custom replies for MQTT queries.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callback</td><td></td></tr>
    <tr><td class="paramname">callback</td><td>A function that takes a topic and query as input and returns the corresponding response. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00199">199</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  200</span>  {</div>
<div class="line"><span class="lineno">  201</span>    std::lock_guard&lt;std::mutex&gt; lock(<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">mutex</a>);</div>
<div class="line"><span class="lineno">  202</span>    this-&gt;<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a> = <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a>;</div>
<div class="line"><span class="lineno">  203</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_abe648b262ec5cc3699883425dbf3eaa2"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">fabomatic::MockMQTTBroker::mutex</a></div><div class="ttdeci">std::mutex mutex</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00034">MockMQTTBroker.hpp:34</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_af85cd98d1c8f18ab1b74be039a9e03d2"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">fabomatic::MockMQTTBroker::callback</a></div><div class="ttdeci">std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt; callback</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00045">MockMQTTBroker.hpp:45</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aeb5eadd85f359d48e3871bfede5ee19d" name="aeb5eadd85f359d48e3871bfede5ee19d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb5eadd85f359d48e3871bfede5ee19d">&#9670;&#160;</a></span>defaultReplies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::defaultReplies </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>query</em></td><td>)</td>
          <td> const -&gt; const std::string</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Provides fake server replies for testing purposes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">query</td><td>The query string to determine the appropriate response. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The JSON payload response as a string. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  121</span>  {</div>
<div class="line"><span class="lineno">  122</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;checkmachine&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  123</span>    {</div>
<div class="line"><span class="lineno">  124</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:true,\&quot;allowed\&quot;:true,\&quot;maintenance\&quot;:false,\&quot;logoff\&quot;:30,\&quot;name\&quot;:\&quot;ENDER_1\&quot;,\&quot;type\&quot;:1,\&quot;description\&quot;:\&quot;\&quot;}&quot;</span>;</div>
<div class="line"><span class="lineno">  125</span>    }</div>
<div class="line"><span class="lineno">  126</span> </div>
<div class="line"><span class="lineno">  127</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;maintenance&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  128</span>    {</div>
<div class="line"><span class="lineno">  129</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><span class="lineno">  130</span>    }</div>
<div class="line"><span class="lineno">  131</span> </div>
<div class="line"><span class="lineno">  132</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;startuse&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  133</span>    {</div>
<div class="line"><span class="lineno">  134</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><span class="lineno">  135</span>    }</div>
<div class="line"><span class="lineno">  136</span> </div>
<div class="line"><span class="lineno">  137</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;inuse&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  138</span>    {</div>
<div class="line"><span class="lineno">  139</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><span class="lineno">  140</span>    }</div>
<div class="line"><span class="lineno">  141</span> </div>
<div class="line"><span class="lineno">  142</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;stopuse&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  143</span>    {</div>
<div class="line"><span class="lineno">  144</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>;</div>
<div class="line"><span class="lineno">  145</span>    }</div>
<div class="line"><span class="lineno">  146</span> </div>
<div class="line"><span class="lineno">  147</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;checkuser&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  148</span>    {</div>
<div class="line"><span class="lineno">  149</span>      JsonDocument doc;</div>
<div class="line"><span class="lineno">  150</span>      <span class="keywordflow">if</span> (deserializeJson(doc, query) == DeserializationError::Ok &amp;&amp; doc.containsKey(<span class="stringliteral">&quot;uid&quot;</span>))</div>
<div class="line"><span class="lineno">  151</span>      {</div>
<div class="line"><span class="lineno">  152</span>        <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">uid_str</a> = doc[<span class="stringliteral">&quot;uid&quot;</span>].as&lt;std::string&gt;();</div>
<div class="line"><span class="lineno">  153</span>        <span class="comment">// Check if the uid is present in the secrets::cards::whitelist</span></div>
<div class="line"><span class="lineno">  154</span>        <span class="keyword">const</span> <span class="keyword">auto</span> elem = std::find_if(<a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.begin(), <a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.end(),</div>
<div class="line"><span class="lineno">  155</span>                                       [&amp;uid_str](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;elem)</div>
<div class="line"><span class="lineno">  156</span>                                       {</div>
<div class="line"><span class="lineno">  157</span>                                         <span class="keyword">const</span> <span class="keyword">auto</span> &amp;[id, level, name] = elem;</div>
<div class="line"><span class="lineno">  158</span>                                         <span class="keywordflow">return</span> <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">card::uid_str</a>(<span class="keywordtype">id</span>) == <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">uid_str</a>;</div>
<div class="line"><span class="lineno">  159</span>                                       });</div>
<div class="line"><span class="lineno">  160</span>        <span class="keywordflow">if</span> (elem != <a class="code hl_variable" href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">secrets::cards::whitelist</a>.end())</div>
<div class="line"><span class="lineno">  161</span>        {</div>
<div class="line"><span class="lineno">  162</span>          std::stringstream ss;</div>
<div class="line"><span class="lineno">  163</span>          <span class="keyword">const</span> <span class="keyword">auto</span> &amp;[id, level, name] = *elem;</div>
<div class="line"><span class="lineno">  164</span>          ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:&quot;</span> &lt;&lt; (level != <a class="code hl_enumvalue" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">FabUser::UserLevel::Unknown</a> ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>)</div>
<div class="line"><span class="lineno">  165</span>             &lt;&lt; <span class="stringliteral">&quot;,\&quot;level\&quot;:&quot;</span> &lt;&lt; +<span class="keyword">static_cast&lt;</span>uint8_t<span class="keyword">&gt;</span>(level)</div>
<div class="line"><span class="lineno">  166</span>             &lt;&lt; <span class="stringliteral">&quot;,\&quot;name\&quot;:\&quot;&quot;</span> &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;\&quot;}&quot;</span>;</div>
<div class="line"><span class="lineno">  167</span>          <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><span class="lineno">  168</span>        }</div>
<div class="line"><span class="lineno">  169</span> </div>
<div class="line"><span class="lineno">  170</span>        <span class="comment">// Still return a valid user</span></div>
<div class="line"><span class="lineno">  171</span>        std::stringstream ss;</div>
<div class="line"><span class="lineno">  172</span>        ss &lt;&lt; <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true,\&quot;is_valid\&quot;:true,\&quot;level\&quot;:&quot;</span> &lt;&lt; +2</div>
<div class="line"><span class="lineno">  173</span>           &lt;&lt; <span class="stringliteral">&quot;,\&quot;name\&quot;:\&quot;User&quot;</span> &lt;&lt; <a class="code hl_function" href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">uid_str</a> &lt;&lt; <span class="stringliteral">&quot;\&quot;}&quot;</span>;</div>
<div class="line"><span class="lineno">  174</span>        <span class="keywordflow">return</span> ss.str();</div>
<div class="line"><span class="lineno">  175</span>      }</div>
<div class="line"><span class="lineno">  176</span> </div>
<div class="line"><span class="lineno">  177</span>      ESP_LOGE(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;Failed to parse checkuser query&quot;</span>);</div>
<div class="line"><span class="lineno">  178</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;{\&quot;request_ok\&quot;:false}&quot;</span>;</div>
<div class="line"><span class="lineno">  179</span>    }</div>
<div class="line"><span class="lineno">  180</span> </div>
<div class="line"><span class="lineno">  181</span>    <span class="keywordflow">if</span> (query.find(<span class="stringliteral">&quot;alive&quot;</span>) != std::string::npos)</div>
<div class="line"><span class="lineno">  182</span>    {</div>
<div class="line"><span class="lineno">  183</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; <span class="comment">// No reply to alive message</span></div>
<div class="line"><span class="lineno">  184</span>    }</div>
<div class="line"><span class="lineno">  185</span> </div>
<div class="line"><span class="lineno">  186</span>    <span class="keywordflow">if</span> (query.find(<a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">conf::mqtt::mqtt_switch_topic</a>) != std::string::npos) <span class="comment">// Shelly doesn&#39;t reply</span></div>
<div class="line"><span class="lineno">  187</span>    {</div>
<div class="line"><span class="lineno">  188</span>      <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><span class="lineno">  189</span>    }</div>
<div class="line"><span class="lineno">  190</span> </div>
<div class="line"><span class="lineno">  191</span>    <span class="keywordflow">return</span> std::string{<span class="stringliteral">&quot;{\&quot;request_ok\&quot;:true}&quot;</span>};</div>
<div class="line"><span class="lineno">  192</span>  }</div>
<div class="ttc" id="a_mock_m_q_t_t_broker_8cpp_xhtml_a1cd7583262c7df24a997b8ddbcc8397b"><div class="ttname"><a href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a></div><div class="ttdeci">static const char *const TAG2</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">MockMQTTBroker.cpp:9</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1card_xhtml_aef091ec171625c69f9d4eab20ebaefec"><div class="ttname"><a href="namespacefabomatic_1_1card.xhtml#aef091ec171625c69f9d4eab20ebaefec">fabomatic::card::uid_str</a></div><div class="ttdeci">auto uid_str(const card::uid_t uid) -&gt; const std::string</div><div class="ttdoc">Returns a string representation of the UID.</div><div class="ttdef"><b>Definition</b> <a href="card_8hpp_source.xhtml#l00022">card.hpp:22</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1mqtt_xhtml_a27d3131c4e18f30225c9499cadb75ff4"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">fabomatic::conf::mqtt::mqtt_switch_topic</a></div><div class="ttdeci">static constexpr std::string_view mqtt_switch_topic</div><div class="ttdoc">In case Shelly is used, name of the topic on MQTT Broker.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00155">conf.hpp:155</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1secrets_1_1cards_xhtml_a83b3f579950d846c48fb7654ccef9e17"><div class="ttname"><a href="namespacefabomatic_1_1secrets_1_1cards.xhtml#a83b3f579950d846c48fb7654ccef9e17">fabomatic::secrets::cards::whitelist</a></div><div class="ttdeci">static constexpr WhiteList whitelist</div><div class="ttdoc">Static list of whitelisted RFID cards.</div><div class="ttdef"><b>Definition</b> <a href="secrets_8hpp_source.xhtml#l00023">secrets.hpp:23</a></div></div>
<div class="ttc" id="astructfabomatic_1_1_fab_user_xhtml_a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e"><div class="ttname"><a href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">fabomatic::FabUser::UserLevel::Unknown</a></div><div class="ttdeci">@ Unknown</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="conf_8hpp_source.xhtml#l00155">fabomatic::conf::mqtt::mqtt_switch_topic</a>, <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">TAG2</a>, <a class="el" href="card_8hpp_source.xhtml#l00022">fabomatic::card::uid_str()</a>, <a class="el" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">fabomatic::FabUser::Unknown</a>, and <a class="el" href="secrets_8hpp_source.xhtml#l00023">fabomatic::secrets::cards::whitelist</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_aeb5eadd85f359d48e3871bfede5ee19d_cgraph.svg" width="404" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a78a57e64b156c6d6d93104fec142740d" name="a78a57e64b156c6d6d93104fec142740d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78a57e64b156c6d6d93104fec142740d">&#9670;&#160;</a></span>isRunning()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::isRunning </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt; bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks if the MQTT broker is running. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the broker is running, false otherwise. </dd></dl>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">109</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  110</span>  {</div>
<div class="line"><span class="lineno">  111</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a>;</div>
<div class="line"><span class="lineno">  112</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_aaee749f4bebf96f67e62da34998ab900"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">fabomatic::MockMQTTBroker::is_running</a></div><div class="ttdeci">bool is_running</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00048">MockMQTTBroker.hpp:48</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00048">is_running</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">mainLoop()</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">fabomatic::tests::test_start_broker()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a78a57e64b156c6d6d93104fec142740d_icgraph.svg" width="100%" height="361"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a4cd18cc3fb887b17e4668bbf99a531e5" name="a4cd18cc3fb887b17e4668bbf99a531e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cd18cc3fb887b17e4668bbf99a531e5">&#9670;&#160;</a></span>mainLoop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::MockMQTTBroker::mainLoop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Main loop for the MQTT broker. </p>
<p>This function checks if the broker is running. If not, it starts the broker. If the broker is running, it updates the broker state and processes pending queries. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">239</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  240</span>  {</div>
<div class="line"><span class="lineno">  241</span>    <span class="comment">// Check if the server is online</span></div>
<div class="line"><span class="lineno">  242</span>    <span class="keywordflow">if</span> (!<a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a>())</div>
<div class="line"><span class="lineno">  243</span>    {</div>
<div class="line"><span class="lineno">  244</span>      <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">start</a>();</div>
<div class="line"><span class="lineno">  245</span>    }</div>
<div class="line"><span class="lineno">  246</span>    <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  247</span>    {</div>
<div class="line"><span class="lineno">  248</span>      update();</div>
<div class="line"><span class="lineno">  249</span>      <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">processQueries</a>();</div>
<div class="line"><span class="lineno">  250</span>    }</div>
<div class="line"><span class="lineno">  251</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a119e59001d5ce25708aa2198623505c6"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">fabomatic::MockMQTTBroker::processQueries</a></div><div class="ttdeci">auto processQueries() -&gt; size_t</div><div class="ttdoc">Processes pending MQTT queries.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00213">MockMQTTBroker.cpp:213</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a78a57e64b156c6d6d93104fec142740d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">fabomatic::MockMQTTBroker::isRunning</a></div><div class="ttdeci">auto isRunning() const -&gt; bool</div><div class="ttdoc">Checks if the MQTT broker is running.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">MockMQTTBroker.cpp:109</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_ac6c05df03ca2f41d6a9b48d17ce84ab1"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">fabomatic::MockMQTTBroker::start</a></div><div class="ttdeci">auto start() -&gt; void</div><div class="ttdoc">Starts the MQTT broker.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00020">MockMQTTBroker.cpp:20</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">isRunning()</a>, <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00213">processQueries()</a>, and <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00020">start()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">fabomatic::tests::threadMQTTServer()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a4cd18cc3fb887b17e4668bbf99a531e5_cgraph.svg" width="442" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a4cd18cc3fb887b17e4668bbf99a531e5_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a1bdfd3cf53bce5d2923f4efeff0621a7" name="a1bdfd3cf53bce5d2923f4efeff0621a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bdfd3cf53bce5d2923f4efeff0621a7">&#9670;&#160;</a></span>onEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::onEvent </td>
          <td>(</td>
          <td class="paramtype">sMQTTEvent *&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td> -&gt; bool</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Handles MQTT events. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td>Pointer to the sMQTTEvent object containing event details. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if the event was handled successfully, false otherwise.</dd></dl>
<p>This function handles various types of MQTT events such as new client connections, message publications, client removals, connection losses, subscriptions, and unsubscriptions. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   47</span>  {</div>
<div class="line"><span class="lineno">   48</span>    <span class="keywordflow">switch</span> (event-&gt;Type())</div>
<div class="line"><span class="lineno">   49</span>    {</div>
<div class="line"><span class="lineno">   50</span>    <span class="keywordflow">case</span> NewClient_sMQTTEventType:</div>
<div class="line"><span class="lineno">   51</span>    {</div>
<div class="line"><span class="lineno">   52</span>      <span class="comment">// Handle new client connection event</span></div>
<div class="line"><span class="lineno">   53</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTNewClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><span class="lineno">   54</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: client connected, id:%s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str());</div>
<div class="line"><span class="lineno">   55</span>    }</div>
<div class="line"><span class="lineno">   56</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   57</span>    <span class="keywordflow">case</span> Public_sMQTTEventType:</div>
<div class="line"><span class="lineno">   58</span>    {</div>
<div class="line"><span class="lineno">   59</span>      <span class="comment">// Handle publish event</span></div>
<div class="line"><span class="lineno">   60</span>      std::lock_guard&lt;std::mutex&gt; lock(<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">mutex</a>);</div>
<div class="line"><span class="lineno">   61</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTPublicClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><span class="lineno">   62</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a> = e-&gt;Topic();</div>
<div class="line"><span class="lineno">   63</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">payload</a> = e-&gt;Payload();</div>
<div class="line"><span class="lineno">   64</span> </div>
<div class="line"><span class="lineno">   65</span>      ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: Received  %s -&gt; %s&quot;</span>, <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>.c_str(), <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">payload</a>.c_str());</div>
<div class="line"><span class="lineno">   66</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a>.push({<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>, <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">payload</a>, <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a> + <span class="stringliteral">&quot;/reply&quot;</span>});</div>
<div class="line"><span class="lineno">   67</span>    }</div>
<div class="line"><span class="lineno">   68</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   69</span>    <span class="keywordflow">case</span> RemoveClient_sMQTTEventType:</div>
<div class="line"><span class="lineno">   70</span>    {</div>
<div class="line"><span class="lineno">   71</span>      <span class="comment">// Handle client removal event</span></div>
<div class="line"><span class="lineno">   72</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTRemoveClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><span class="lineno">   73</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: removed client id: %s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str());</div>
<div class="line"><span class="lineno">   74</span>    }</div>
<div class="line"><span class="lineno">   75</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   76</span>    <span class="keywordflow">case</span> LostConnect_sMQTTEventType:</div>
<div class="line"><span class="lineno">   77</span>    {</div>
<div class="line"><span class="lineno">   78</span>      <span class="comment">// Handle lost connection event</span></div>
<div class="line"><span class="lineno">   79</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a> = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">   80</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: lost connection&quot;</span>);</div>
<div class="line"><span class="lineno">   81</span>    }</div>
<div class="line"><span class="lineno">   82</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   83</span>    <span class="keywordflow">case</span> Subscribe_sMQTTEventType:</div>
<div class="line"><span class="lineno">   84</span>    {</div>
<div class="line"><span class="lineno">   85</span>      <span class="comment">// Handle subscription event</span></div>
<div class="line"><span class="lineno">   86</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTSubUnSubClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><span class="lineno">   87</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: client %s subscribed to %s&quot;</span>, e-&gt;Client()-&gt;getClientId().c_str(), e-&gt;Topic().c_str());</div>
<div class="line"><span class="lineno">   88</span>    }</div>
<div class="line"><span class="lineno">   89</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   90</span>    <span class="keywordflow">case</span> UnSubscribe_sMQTTEventType:</div>
<div class="line"><span class="lineno">   91</span>    {</div>
<div class="line"><span class="lineno">   92</span>      <span class="comment">// Handle unsubscription event</span></div>
<div class="line"><span class="lineno">   93</span>      <span class="keyword">auto</span> *e = <span class="keyword">static_cast&lt;</span>sMQTTSubUnSubClientEvent *<span class="keyword">&gt;</span>(event);</div>
<div class="line"><span class="lineno">   94</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: got unsubscribe from %s&quot;</span>, e-&gt;Topic().c_str());</div>
<div class="line"><span class="lineno">   95</span>    }</div>
<div class="line"><span class="lineno">   96</span>    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">   97</span>    <span class="keywordflow">default</span>:</div>
<div class="line"><span class="lineno">   98</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: unhandled event %d&quot;</span>, event-&gt;Type());</div>
<div class="line"><span class="lineno">   99</span>      <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  100</span>    }</div>
<div class="line"><span class="lineno">  101</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  102</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a015654d87af05fcf75df5654e8b3dd9e"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">fabomatic::MockMQTTBroker::queries</a></div><div class="ttdeci">std::queue&lt; query &gt; queries</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00043">MockMQTTBroker.hpp:43</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a4401fae9098ba10caf84afc6b11b14ae"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">fabomatic::MockMQTTBroker::payload</a></div><div class="ttdeci">std::string payload</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00036">MockMQTTBroker.hpp:36</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_acd83148966b7a81bf0961c0e61bfb504"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">fabomatic::MockMQTTBroker::topic</a></div><div class="ttdeci">std::string topic</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00035">MockMQTTBroker.hpp:35</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">TAG2</a>.</p>

</div>
</div>
<a id="a119e59001d5ce25708aa2198623505c6" name="a119e59001d5ce25708aa2198623505c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a119e59001d5ce25708aa2198623505c6">&#9670;&#160;</a></span>processQueries()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::processQueries </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Processes pending MQTT queries. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of remaining queries.</dd></dl>
<p>This function processes the queries in the queue by invoking the configured callback function and publishes the response to the corresponding reply topic. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00213">213</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  214</span>  {</div>
<div class="line"><span class="lineno">  215</span>    std::lock_guard&lt;std::mutex&gt; lock(<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">mutex</a>);</div>
<div class="line"><span class="lineno">  216</span> </div>
<div class="line"><span class="lineno">  217</span>    <span class="keywordflow">if</span> (!<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a>.empty())</div>
<div class="line"><span class="lineno">  218</span>    {</div>
<div class="line"><span class="lineno">  219</span>      std::string response{<span class="stringliteral">&quot;&quot;</span>};</div>
<div class="line"><span class="lineno">  220</span>      <span class="keyword">const</span> <span class="keyword">auto</span> [<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>, query, reply_topic] = <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a>.front();</div>
<div class="line"><span class="lineno">  221</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a>.pop();</div>
<div class="line"><span class="lineno">  222</span>      response = <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a>(<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>, query);</div>
<div class="line"><span class="lineno">  223</span> </div>
<div class="line"><span class="lineno">  224</span>      <span class="keywordflow">if</span> (!response.empty())</div>
<div class="line"><span class="lineno">  225</span>      {</div>
<div class="line"><span class="lineno">  226</span>        ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: Sending %s -&gt; %s&quot;</span>, reply_topic.c_str(), response.c_str());</div>
<div class="line"><span class="lineno">  227</span>        publish(reply_topic, response);</div>
<div class="line"><span class="lineno">  228</span>      }</div>
<div class="line"><span class="lineno">  229</span>    }</div>
<div class="line"><span class="lineno">  230</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a>.size();</div>
<div class="line"><span class="lineno">  231</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">TAG2</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">mainLoop()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a119e59001d5ce25708aa2198623505c6_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ac6c05df03ca2f41d6a9b48d17ce84ab1" name="ac6c05df03ca2f41d6a9b48d17ce84ab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6c05df03ca2f41d6a9b48d17ce84ab1">&#9670;&#160;</a></span>start()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt; void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Starts the MQTT broker. </p>
<p>This function checks if the Wi-Fi is connected and initializes the MQTT broker. If the Wi-Fi is not connected, it logs the status and returns. If the broker is not running, it initializes the broker with the configured port number. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   21</span>  {</div>
<div class="line"><span class="lineno">   22</span>    <span class="comment">// Wait for the Wi-Fi to connect</span></div>
<div class="line"><span class="lineno">   23</span>    <span class="keywordflow">while</span> (WiFi.status() != WL_CONNECTED)</div>
<div class="line"><span class="lineno">   24</span>    {</div>
<div class="line"><span class="lineno">   25</span>      ESP_LOGD(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: WiFi status changed to %d&quot;</span>, WiFi.status());</div>
<div class="line"><span class="lineno">   26</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a> = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">   27</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">   28</span>    }</div>
<div class="line"><span class="lineno">   29</span>    <span class="comment">// Initialize the broker if it&#39;s not running</span></div>
<div class="line"><span class="lineno">   30</span>    <span class="keywordflow">if</span> (!<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a>)</div>
<div class="line"><span class="lineno">   31</span>    {</div>
<div class="line"><span class="lineno">   32</span>      <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a> = init(<a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#ac26a2c6d2866b19ee035b735bdfaff54">conf::mqtt::PORT_NUMBER</a>, <span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">   33</span>      ESP_LOGI(<a class="code hl_variable" href="_mock_m_q_t_t_broker_8cpp.xhtml#a1cd7583262c7df24a997b8ddbcc8397b">TAG2</a>, <span class="stringliteral">&quot;MQTT BROKER: started with result %d&quot;</span>, <a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a>);</div>
<div class="line"><span class="lineno">   34</span>    }</div>
<div class="line"><span class="lineno">   35</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1mqtt_xhtml_ac26a2c6d2866b19ee035b735bdfaff54"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#ac26a2c6d2866b19ee035b735bdfaff54">fabomatic::conf::mqtt::PORT_NUMBER</a></div><div class="ttdeci">static constexpr auto PORT_NUMBER</div><div class="ttdoc">MQTT port for broker.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00149">conf.hpp:149</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="conf_8hpp_source.xhtml#l00149">fabomatic::conf::mqtt::PORT_NUMBER</a>, and <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00009">TAG2</a>.</p>

<p class="reference">Referenced by <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">mainLoop()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_ac6c05df03ca2f41d6a9b48d17ce84ab1_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af85cd98d1c8f18ab1b74be039a9e03d2" name="af85cd98d1c8f18ab1b74be039a9e03d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af85cd98d1c8f18ab1b74be039a9e03d2">&#9670;&#160;</a></span>callback</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;const std::string(const std::string &amp;, const std::string &amp;)&gt; fabomatic::MockMQTTBroker::callback</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= [<span class="keyword">this</span>](<span class="keyword">const</span> std::string &amp;<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>, <span class="keyword">const</span> std::string &amp;query)</div>
<div class="line">    { <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a>(query); }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_aeb5eadd85f359d48e3871bfede5ee19d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">fabomatic::MockMQTTBroker::defaultReplies</a></div><div class="ttdeci">auto defaultReplies(const std::string &amp;query) const -&gt; const std::string</div><div class="ttdoc">Provides fake server replies for testing purposes.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00120">MockMQTTBroker.cpp:120</a></div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   46</span>    { <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a>(query); };</div>
</div><!-- fragment -->
</div>
</div>
<a id="aaee749f4bebf96f67e62da34998ab900" name="aaee749f4bebf96f67e62da34998ab900"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaee749f4bebf96f67e62da34998ab900">&#9670;&#160;</a></span>is_running</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool fabomatic::MockMQTTBroker::is_running {false}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00048">48</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   48</span>{<span class="keyword">false</span>};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">isRunning()</a>.</p>

</div>
</div>
<a id="abe648b262ec5cc3699883425dbf3eaa2" name="abe648b262ec5cc3699883425dbf3eaa2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe648b262ec5cc3699883425dbf3eaa2">&#9670;&#160;</a></span>mutex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::mutex fabomatic::MockMQTTBroker::mutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>

</div>
</div>
<a id="a4401fae9098ba10caf84afc6b11b14ae" name="a4401fae9098ba10caf84afc6b11b14ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4401fae9098ba10caf84afc6b11b14ae">&#9670;&#160;</a></span>payload</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string fabomatic::MockMQTTBroker::payload {&quot;&quot;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   36</span>{<span class="stringliteral">&quot;&quot;</span>};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a015654d87af05fcf75df5654e8b3dd9e" name="a015654d87af05fcf75df5654e8b3dd9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a015654d87af05fcf75df5654e8b3dd9e">&#9670;&#160;</a></span>queries</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::queue&lt;<a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>&gt; fabomatic::MockMQTTBroker::queries {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00043">43</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   43</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="acd83148966b7a81bf0961c0e61bfb504" name="acd83148966b7a81bf0961c0e61bfb504"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd83148966b7a81bf0961c0e61bfb504">&#9670;&#160;</a></span>topic</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string fabomatic::MockMQTTBroker::topic {&quot;&quot;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   35</span>{<span class="stringliteral">&quot;&quot;</span>};</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a></li>
<li><a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml">MockMQTTBroker.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 2 2024 19:19:46 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
