<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: fabomatic::MockMQTTBroker Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacefabomatic.xhtml">fabomatic</a></li><li class="navelem"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml">MockMQTTBroker</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classfabomatic_1_1_mock_m_q_t_t_broker-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">fabomatic::MockMQTTBroker Class Reference<span class="mlabels"><span class="mlabel">final</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>This class implements an MQTT broker with predefined responses to <a class="el" href="classfabomatic_1_1_fab_backend.xhtml" title="This class is used to exchange messages with the MQTT broker and the backend.">FabBackend</a> requests.  
 <a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for fabomatic::MockMQTTBroker:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker__inherit__graph.svg" width="194" height="430"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Collaboration diagram for fabomatic::MockMQTTBroker:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker__coll__graph.svg" width="591" height="552"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a925db02025c2d657eebd415af3def156" id="r_a925db02025c2d657eebd415af3def156"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a925db02025c2d657eebd415af3def156">MockMQTTBroker</a> ()=default</td></tr>
<tr class="separator:a925db02025c2d657eebd415af3def156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78a57e64b156c6d6d93104fec142740d" id="r_a78a57e64b156c6d6d93104fec142740d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a> () const -&gt; bool</td></tr>
<tr class="separator:a78a57e64b156c6d6d93104fec142740d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6c05df03ca2f41d6a9b48d17ce84ab1" id="r_ac6c05df03ca2f41d6a9b48d17ce84ab1"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#ac6c05df03ca2f41d6a9b48d17ce84ab1">start</a> () -&gt; void</td></tr>
<tr class="separator:ac6c05df03ca2f41d6a9b48d17ce84ab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bdfd3cf53bce5d2923f4efeff0621a7" id="r_a1bdfd3cf53bce5d2923f4efeff0621a7"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1bdfd3cf53bce5d2923f4efeff0621a7">onEvent</a> (sMQTTEvent *event) -&gt; bool override</td></tr>
<tr class="separator:a1bdfd3cf53bce5d2923f4efeff0621a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb5eadd85f359d48e3871bfede5ee19d" id="r_aeb5eadd85f359d48e3871bfede5ee19d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a> (const std::string &amp;<a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>) const -&gt; const std::string</td></tr>
<tr class="separator:aeb5eadd85f359d48e3871bfede5ee19d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ca30ff9daccacbdecdc598f1749951e" id="r_a6ca30ff9daccacbdecdc598f1749951e"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a6ca30ff9daccacbdecdc598f1749951e">configureReplies</a> (std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt; <a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a>) -&gt; void</td></tr>
<tr class="memdesc:a6ca30ff9daccacbdecdc598f1749951e"><td class="mdescLeft">&#160;</td><td class="mdescRight">set the reply generation function. May be called from a different thread  <br /></td></tr>
<tr class="separator:a6ca30ff9daccacbdecdc598f1749951e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a119e59001d5ce25708aa2198623505c6" id="r_a119e59001d5ce25708aa2198623505c6"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a119e59001d5ce25708aa2198623505c6">processQueries</a> () -&gt; size_t</td></tr>
<tr class="separator:a119e59001d5ce25708aa2198623505c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f95b4450ad044afe005accb69ab3ac9" id="r_a1f95b4450ad044afe005accb69ab3ac9"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a1f95b4450ad044afe005accb69ab3ac9">mainLoop</a> () -&gt; void</td></tr>
<tr class="separator:a1f95b4450ad044afe005accb69ab3ac9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-attribs" name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:abe648b262ec5cc3699883425dbf3eaa2" id="r_abe648b262ec5cc3699883425dbf3eaa2"><td class="memItemLeft" align="right" valign="top">std::mutex&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#abe648b262ec5cc3699883425dbf3eaa2">mutex</a></td></tr>
<tr class="separator:abe648b262ec5cc3699883425dbf3eaa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd83148966b7a81bf0961c0e61bfb504" id="r_acd83148966b7a81bf0961c0e61bfb504"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a> {&quot;&quot;}</td></tr>
<tr class="separator:acd83148966b7a81bf0961c0e61bfb504"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4401fae9098ba10caf84afc6b11b14ae" id="r_a4401fae9098ba10caf84afc6b11b14ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4401fae9098ba10caf84afc6b11b14ae">payload</a> {&quot;&quot;}</td></tr>
<tr class="separator:a4401fae9098ba10caf84afc6b11b14ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a015654d87af05fcf75df5654e8b3dd9e" id="r_a015654d87af05fcf75df5654e8b3dd9e"><td class="memItemLeft" align="right" valign="top">std::queue&lt; <a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a015654d87af05fcf75df5654e8b3dd9e">queries</a> {}</td></tr>
<tr class="separator:a015654d87af05fcf75df5654e8b3dd9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af85cd98d1c8f18ab1b74be039a9e03d2" id="r_af85cd98d1c8f18ab1b74be039a9e03d2"><td class="memItemLeft" align="right" valign="top">std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#af85cd98d1c8f18ab1b74be039a9e03d2">callback</a></td></tr>
<tr class="separator:af85cd98d1c8f18ab1b74be039a9e03d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaee749f4bebf96f67e62da34998ab900" id="r_aaee749f4bebf96f67e62da34998ab900"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aaee749f4bebf96f67e62da34998ab900">is_running</a> {false}</td></tr>
<tr class="separator:aaee749f4bebf96f67e62da34998ab900"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class implements an MQTT broker with predefined responses to <a class="el" href="classfabomatic_1_1_fab_backend.xhtml" title="This class is used to exchange messages with the MQTT broker and the backend.">FabBackend</a> requests. </p>

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00015">15</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a925db02025c2d657eebd415af3def156" name="a925db02025c2d657eebd415af3def156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a925db02025c2d657eebd415af3def156">&#9670;&#160;</a></span>MockMQTTBroker()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">fabomatic::MockMQTTBroker::MockMQTTBroker </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6ca30ff9daccacbdecdc598f1749951e" name="a6ca30ff9daccacbdecdc598f1749951e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ca30ff9daccacbdecdc598f1749951e">&#9670;&#160;</a></span>configureReplies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::configureReplies </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; const std::string(const std::string &amp;, const std::string &amp;)&gt;&#160;</td>
          <td class="paramname"><em>callback</em></td><td>)</td>
          <td> -&gt;  void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set the reply generation function. May be called from a different thread </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">callback</td><td></td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aeb5eadd85f359d48e3871bfede5ee19d" name="aeb5eadd85f359d48e3871bfede5ee19d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb5eadd85f359d48e3871bfede5ee19d">&#9670;&#160;</a></span>defaultReplies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::defaultReplies </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>query</em></td><td>)</td>
          <td> const -&gt;  const std::string</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a78a57e64b156c6d6d93104fec142740d" name="a78a57e64b156c6d6d93104fec142740d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78a57e64b156c6d6d93104fec142740d">&#9670;&#160;</a></span>isRunning()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::isRunning </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const -&gt;  bool</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">fabomatic::tests::test_start_broker()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a78a57e64b156c6d6d93104fec142740d_icgraph.svg" width="494" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a1f95b4450ad044afe005accb69ab3ac9" name="a1f95b4450ad044afe005accb69ab3ac9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f95b4450ad044afe005accb69ab3ac9">&#9670;&#160;</a></span>mainLoop()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::mainLoop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt;  void</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">fabomatic::tests::threadMQTTServer()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classfabomatic_1_1_mock_m_q_t_t_broker_a1f95b4450ad044afe005accb69ab3ac9_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a1bdfd3cf53bce5d2923f4efeff0621a7" name="a1bdfd3cf53bce5d2923f4efeff0621a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bdfd3cf53bce5d2923f4efeff0621a7">&#9670;&#160;</a></span>onEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::onEvent </td>
          <td>(</td>
          <td class="paramtype">sMQTTEvent *&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td> -&gt;  bool</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a119e59001d5ce25708aa2198623505c6" name="a119e59001d5ce25708aa2198623505c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a119e59001d5ce25708aa2198623505c6">&#9670;&#160;</a></span>processQueries()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::processQueries </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt;  size_t</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6c05df03ca2f41d6a9b48d17ce84ab1" name="ac6c05df03ca2f41d6a9b48d17ce84ab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6c05df03ca2f41d6a9b48d17ce84ab1">&#9670;&#160;</a></span>start()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::MockMQTTBroker::start </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> -&gt;  void</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="af85cd98d1c8f18ab1b74be039a9e03d2" name="af85cd98d1c8f18ab1b74be039a9e03d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af85cd98d1c8f18ab1b74be039a9e03d2">&#9670;&#160;</a></span>callback</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;const std::string(const std::string &amp;, const std::string &amp;)&gt; fabomatic::MockMQTTBroker::callback</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= [<span class="keyword">this</span>](<span class="keyword">const</span> std::string &amp;<a class="code hl_variable" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">topic</a>, <span class="keyword">const</span> std::string &amp;query)</div>
<div class="line">    { <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a>(query); }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_acd83148966b7a81bf0961c0e61bfb504"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#acd83148966b7a81bf0961c0e61bfb504">fabomatic::MockMQTTBroker::topic</a></div><div class="ttdeci">std::string topic</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00035">MockMQTTBroker.hpp:35</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_aeb5eadd85f359d48e3871bfede5ee19d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">fabomatic::MockMQTTBroker::defaultReplies</a></div><div class="ttdeci">auto defaultReplies(const std::string &amp;query) const -&gt; const std::string</div></div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00045">45</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   46</span>    { <span class="keywordflow">return</span> <a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#aeb5eadd85f359d48e3871bfede5ee19d">defaultReplies</a>(query); };</div>
</div><!-- fragment -->
</div>
</div>
<a id="aaee749f4bebf96f67e62da34998ab900" name="aaee749f4bebf96f67e62da34998ab900"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaee749f4bebf96f67e62da34998ab900">&#9670;&#160;</a></span>is_running</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool fabomatic::MockMQTTBroker::is_running {false}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00048">48</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   48</span>{<span class="keyword">false</span>};</div>
</div><!-- fragment -->
</div>
</div>
<a id="abe648b262ec5cc3699883425dbf3eaa2" name="abe648b262ec5cc3699883425dbf3eaa2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe648b262ec5cc3699883425dbf3eaa2">&#9670;&#160;</a></span>mutex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::mutex fabomatic::MockMQTTBroker::mutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00034">34</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>

</div>
</div>
<a id="a4401fae9098ba10caf84afc6b11b14ae" name="a4401fae9098ba10caf84afc6b11b14ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4401fae9098ba10caf84afc6b11b14ae">&#9670;&#160;</a></span>payload</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string fabomatic::MockMQTTBroker::payload {&quot;&quot;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00036">36</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   36</span>{<span class="stringliteral">&quot;&quot;</span>};</div>
</div><!-- fragment -->
</div>
</div>
<a id="a015654d87af05fcf75df5654e8b3dd9e" name="a015654d87af05fcf75df5654e8b3dd9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a015654d87af05fcf75df5654e8b3dd9e">&#9670;&#160;</a></span>queries</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::queue&lt;<a class="el" href="structfabomatic_1_1_mock_m_q_t_t_broker_1_1query.xhtml">query</a>&gt; fabomatic::MockMQTTBroker::queries {}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00043">43</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   43</span>{};</div>
</div><!-- fragment -->
</div>
</div>
<a id="acd83148966b7a81bf0961c0e61bfb504" name="acd83148966b7a81bf0961c0e61bfb504"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd83148966b7a81bf0961c0e61bfb504">&#9670;&#160;</a></span>topic</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string fabomatic::MockMQTTBroker::topic {&quot;&quot;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml#l00035">35</a> of file <a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   35</span>{<span class="stringliteral">&quot;&quot;</span>};</div>
</div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="_mock_m_q_t_t_broker_8hpp_source.xhtml">MockMQTTBroker.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Aug 12 2024 08:05:20 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
