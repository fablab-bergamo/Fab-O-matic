<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Fab-O-Matic: fabomatic::tests Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="fablab.jpg"/></td>
  <td id="projectalign">
   <div id="projectname">Fab-O-Matic<span id="projectnumber">&#160;0.9</span>
   </div>
   <div id="projectbrief">RFID-based ESP32 project to control equipment in a FabLab environment</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.8 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacefabomatic.xhtml">fabomatic</a></li><li class="navelem"><a class="el" href="namespacefabomatic_1_1tests.xhtml">tests</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle"><div class="title">fabomatic::tests Namespace Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="typedef-members" name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ae908327d6ba514c61989d251b1feec67" id="r_ae908327d6ba514c61989d251b1feec67"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae908327d6ba514c61989d251b1feec67">Task</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">fabomatic::Tasks::Task</a></td></tr>
<tr class="separator:ae908327d6ba514c61989d251b1feec67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeeb234a5c7a18c21d4e378d9daa15233" id="r_aeeb234a5c7a18c21d4e378d9daa15233"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">Scheduler</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml">fabomatic::Tasks::Scheduler</a></td></tr>
<tr class="separator:aeeb234a5c7a18c21d4e378d9daa15233"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0af84220af96359f7802e901c747d6c2" id="r_a0af84220af96359f7802e901c747d6c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a0af84220af96359f7802e901c747d6c2">tearDown</a> (void)</td></tr>
<tr class="separator:a0af84220af96359f7802e901c747d6c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a716136126264ddcfe5e1b850f5bab61e" id="r_a716136126264ddcfe5e1b850f5bab61e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a716136126264ddcfe5e1b850f5bab61e">setUp</a> (void)</td></tr>
<tr class="separator:a716136126264ddcfe5e1b850f5bab61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5690a5ef67d3ca76c79c4eeeb8fb9b90" id="r_a5690a5ef67d3ca76c79c4eeeb8fb9b90"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a5690a5ef67d3ca76c79c4eeeb8fb9b90">test_steady_clock</a> (void)</td></tr>
<tr class="separator:a5690a5ef67d3ca76c79c4eeeb8fb9b90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2600320f41c9fa343c66058ecb12b5ee" id="r_a2600320f41c9fa343c66058ecb12b5ee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0">BoardLogic::Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a> (<a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">RFIDWrapper</a>&lt; <a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a> &gt; &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ab11df5855a7b6969c5b44b095bce756f">rfid</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml">BoardLogic</a> &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ae67aa957d270478a0793908703b77446">logic</a>, std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt; uid, std::optional&lt; std::chrono::milliseconds &gt; duration_tap)</td></tr>
<tr class="memdesc:a2600320f41c9fa343c66058ecb12b5ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simulates RFID card tap.  <br /></td></tr>
<tr class="separator:a2600320f41c9fa343c66058ecb12b5ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a7645a865dc822746f972ea6f43224d" id="r_a6a7645a865dc822746f972ea6f43224d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a> (<a class="el" href="classfabomatic_1_1_board_logic.xhtml">BoardLogic</a> &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ae67aa957d270478a0793908703b77446">logic</a>, <a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">RFIDWrapper</a>&lt; <a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a> &gt; &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ab11df5855a7b6969c5b44b095bce756f">rfid</a>)</td></tr>
<tr class="memdesc:a6a7645a865dc822746f972ea6f43224d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets machine to initial state, clearing flags.  <br /></td></tr>
<tr class="separator:a6a7645a865dc822746f972ea6f43224d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a574e0054ef8ba573fc2efd53600b0ec4" id="r_a574e0054ef8ba573fc2efd53600b0ec4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a574e0054ef8ba573fc2efd53600b0ec4">test_machine_defaults</a> ()</td></tr>
<tr class="separator:a574e0054ef8ba573fc2efd53600b0ec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec03a7ee459718d314b930fdd75d3cee" id="r_aec03a7ee459718d314b930fdd75d3cee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aec03a7ee459718d314b930fdd75d3cee">test_simple_methods</a> ()</td></tr>
<tr class="separator:aec03a7ee459718d314b930fdd75d3cee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab0f4e1439b281ffef8be51db9a81f9d" id="r_aab0f4e1439b281ffef8be51db9a81f9d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aab0f4e1439b281ffef8be51db9a81f9d">test_whitelist_no_network</a> ()</td></tr>
<tr class="separator:aab0f4e1439b281ffef8be51db9a81f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f3dff17fd964aba76c35c514957a0a5" id="r_a6f3dff17fd964aba76c35c514957a0a5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a6f3dff17fd964aba76c35c514957a0a5">test_one_user_at_a_time</a> ()</td></tr>
<tr class="separator:a6f3dff17fd964aba76c35c514957a0a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa92fef9250d918ee02c79dbf2de2546" id="r_afa92fef9250d918ee02c79dbf2de2546"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#afa92fef9250d918ee02c79dbf2de2546">test_user_autologoff</a> ()</td></tr>
<tr class="separator:afa92fef9250d918ee02c79dbf2de2546"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a34631c2dc01cbdbbce146895c94e12" id="r_a9a34631c2dc01cbdbbce146895c94e12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a9a34631c2dc01cbdbbce146895c94e12">test_machine_maintenance</a> ()</td></tr>
<tr class="separator:a9a34631c2dc01cbdbbce146895c94e12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a558e2287db01a4622581246a19dac397" id="r_a558e2287db01a4622581246a19dac397"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a558e2287db01a4622581246a19dac397">test_machine_allowed</a> ()</td></tr>
<tr class="separator:a558e2287db01a4622581246a19dac397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8fa7ace86309b5f699540d8898660c7" id="r_af8fa7ace86309b5f699540d8898660c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af8fa7ace86309b5f699540d8898660c7">test_messages_buffered</a> ()</td></tr>
<tr class="separator:af8fa7ace86309b5f699540d8898660c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af046ac0a4d53b62e8f3bf0cec2d07440" id="r_af046ac0a4d53b62e8f3bf0cec2d07440"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af046ac0a4d53b62e8f3bf0cec2d07440">threadMQTTServer</a> (void *arg)</td></tr>
<tr class="separator:af046ac0a4d53b62e8f3bf0cec2d07440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a675dfc88957b4e6871f32187a0da29b2" id="r_a675dfc88957b4e6871f32187a0da29b2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a675dfc88957b4e6871f32187a0da29b2">test_create_buffered_messages</a> ()</td></tr>
<tr class="separator:a675dfc88957b4e6871f32187a0da29b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c3d2a5cfa25e610ac054894d766f73" id="r_a95c3d2a5cfa25e610ac054894d766f73"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a95c3d2a5cfa25e610ac054894d766f73">test_check_transmission</a> ()</td></tr>
<tr class="separator:a95c3d2a5cfa25e610ac054894d766f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba7f55ee91c2d2a647fca6c8cc106c97" id="r_aba7f55ee91c2d2a647fca6c8cc106c97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aba7f55ee91c2d2a647fca6c8cc106c97">test_start_broker</a> ()</td></tr>
<tr class="separator:aba7f55ee91c2d2a647fca6c8cc106c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af71fb65d41b9fc211910208ea71a4c91" id="r_af71fb65d41b9fc211910208ea71a4c91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af71fb65d41b9fc211910208ea71a4c91">test_stop_broker</a> ()</td></tr>
<tr class="separator:af71fb65d41b9fc211910208ea71a4c91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a438b9060c27d36e89506199205b342cb" id="r_a438b9060c27d36e89506199205b342cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a438b9060c27d36e89506199205b342cb">test_fabserver_calls</a> ()</td></tr>
<tr class="separator:a438b9060c27d36e89506199205b342cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88a4242d48bfa4a0337df522d303c367" id="r_a88a4242d48bfa4a0337df522d303c367"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a88a4242d48bfa4a0337df522d303c367">test_taskConnect</a> ()</td></tr>
<tr class="memdesc:a88a4242d48bfa4a0337df522d303c367"><td class="mdescLeft">&#160;</td><td class="mdescRight">Opens WiFi and server connection and updates board state accordingly.  <br /></td></tr>
<tr class="separator:a88a4242d48bfa4a0337df522d303c367"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a294b4767ecf1e1d11cc31dafb2541d23" id="r_a294b4767ecf1e1d11cc31dafb2541d23"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a294b4767ecf1e1d11cc31dafb2541d23">test_taskCheckRfid</a> ()</td></tr>
<tr class="memdesc:a294b4767ecf1e1d11cc31dafb2541d23"><td class="mdescLeft">&#160;</td><td class="mdescRight">periodic check for new RFID card  <br /></td></tr>
<tr class="separator:a294b4767ecf1e1d11cc31dafb2541d23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cd22311b16fc7c256a30ba4c2f6f387" id="r_a7cd22311b16fc7c256a30ba4c2f6f387"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a7cd22311b16fc7c256a30ba4c2f6f387">test_taskVarious</a> ()</td></tr>
<tr class="memdesc:a7cd22311b16fc7c256a30ba4c2f6f387"><td class="mdescLeft">&#160;</td><td class="mdescRight">blink led  <br /></td></tr>
<tr class="separator:a7cd22311b16fc7c256a30ba4c2f6f387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a046c348aaf1a15bf80358065553e748b" id="r_a046c348aaf1a15bf80358065553e748b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a046c348aaf1a15bf80358065553e748b">test_taskEspWatchdog</a> ()</td></tr>
<tr class="memdesc:a046c348aaf1a15bf80358065553e748b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Keep the ESP32 HW watchdog alive. If code gets stuck this will cause an automatic reset.  <br /></td></tr>
<tr class="separator:a046c348aaf1a15bf80358065553e748b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af592b66b287714a90a895709829622b3" id="r_af592b66b287714a90a895709829622b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af592b66b287714a90a895709829622b3">test_taskRfidWatchdog</a> ()</td></tr>
<tr class="memdesc:af592b66b287714a90a895709829622b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">checks the RFID chip status and re-init it if necessary.  <br /></td></tr>
<tr class="separator:af592b66b287714a90a895709829622b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0c2cd74b089905fbdebeca807403606" id="r_ae0c2cd74b089905fbdebeca807403606"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae0c2cd74b089905fbdebeca807403606">test_taskMQTTAlive</a> ()</td></tr>
<tr class="memdesc:ae0c2cd74b089905fbdebeca807403606"><td class="mdescLeft">&#160;</td><td class="mdescRight">sends the MQTT alive message  <br /></td></tr>
<tr class="separator:ae0c2cd74b089905fbdebeca807403606"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf323d841fd7207901e373cdc073d4af" id="r_adf323d841fd7207901e373cdc073d4af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#adf323d841fd7207901e373cdc073d4af">test_normal_use</a> ()</td></tr>
<tr class="separator:adf323d841fd7207901e373cdc073d4af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6af06470faa8c9455927dad653cba48a" id="r_a6af06470faa8c9455927dad653cba48a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a6af06470faa8c9455927dad653cba48a">test_defaults</a> (void)</td></tr>
<tr class="separator:a6af06470faa8c9455927dad653cba48a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bbb6cee5561bf8ac1c4a9117d9d01b8" id="r_a0bbb6cee5561bf8ac1c4a9117d9d01b8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a0bbb6cee5561bf8ac1c4a9117d9d01b8">test_changes</a> (void)</td></tr>
<tr class="separator:a0bbb6cee5561bf8ac1c4a9117d9d01b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb3e51f6d2841cd2869df4c0629f694d" id="r_aeb3e51f6d2841cd2869df4c0629f694d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aeb3e51f6d2841cd2869df4c0629f694d">test_rfid_cache</a> ()</td></tr>
<tr class="separator:aeb3e51f6d2841cd2869df4c0629f694d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77b8df849708615c63f34444d640d001" id="r_a77b8df849708615c63f34444d640d001"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a77b8df849708615c63f34444d640d001">test_magic_number</a> ()</td></tr>
<tr class="separator:a77b8df849708615c63f34444d640d001"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70d156a8423b7e9d4db345cff5eb528f" id="r_a70d156a8423b7e9d4db345cff5eb528f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a70d156a8423b7e9d4db345cff5eb528f">test_deserialization</a> (<a class="el" href="classfabomatic_1_1_buffer.xhtml">Buffer</a> &amp;buff)</td></tr>
<tr class="separator:a70d156a8423b7e9d4db345cff5eb528f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fbc6366f69847719d0f0cb626572493" id="r_a4fbc6366f69847719d0f0cb626572493"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a4fbc6366f69847719d0f0cb626572493">test_buffered_msg</a> ()</td></tr>
<tr class="separator:a4fbc6366f69847719d0f0cb626572493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4bd9063425820acc6c488119d90d22a" id="r_ae4bd9063425820acc6c488119d90d22a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae4bd9063425820acc6c488119d90d22a">delete_tasks</a> (void)</td></tr>
<tr class="separator:ae4bd9063425820acc6c488119d90d22a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bbef7cf45ab43901130143647b0f495" id="r_a9bbef7cf45ab43901130143647b0f495"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a9bbef7cf45ab43901130143647b0f495">create_tasks</a> (<a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">Scheduler</a> &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a4b0bffffbaa955b708c5812416ba2b6d">scheduler</a>, std::chrono::milliseconds period)</td></tr>
<tr class="separator:a9bbef7cf45ab43901130143647b0f495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a437b3023f617a6c0c675e6484f85ba50" id="r_a437b3023f617a6c0c675e6484f85ba50"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a437b3023f617a6c0c675e6484f85ba50">run_for_duration</a> (std::function&lt; void()&gt; callback, std::chrono::milliseconds duration)</td></tr>
<tr class="separator:a437b3023f617a6c0c675e6484f85ba50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bfe59139821e4fd59963629dc052483" id="r_a4bfe59139821e4fd59963629dc052483"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a4bfe59139821e4fd59963629dc052483">test_execute_runs_all_tasks</a> (void)</td></tr>
<tr class="separator:a4bfe59139821e4fd59963629dc052483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1005faec6496778a7981b3695005b4e" id="r_ac1005faec6496778a7981b3695005b4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ac1005faec6496778a7981b3695005b4e">test_stop_start_tasks</a> (void)</td></tr>
<tr class="separator:ac1005faec6496778a7981b3695005b4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8fcb20d2ec63b73e90dff80564bca07" id="r_af8fcb20d2ec63b73e90dff80564bca07"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af8fcb20d2ec63b73e90dff80564bca07">test_esp32</a> ()</td></tr>
<tr class="separator:af8fcb20d2ec63b73e90dff80564bca07"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="var-members" name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:af9a30e2db3fbfa479b6512cfd428aab1" id="r_af9a30e2db3fbfa479b6512cfd428aab1"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="namespacefabomatic.xhtml#a626fe6fe3dcf9b459c45e9f769f7b8e7">WhiteList</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af9a30e2db3fbfa479b6512cfd428aab1">test_whitelist</a></td></tr>
<tr class="separator:af9a30e2db3fbfa479b6512cfd428aab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab11df5855a7b6969c5b44b095bce756f" id="r_ab11df5855a7b6969c5b44b095bce756f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">fabomatic::RFIDWrapper</a>&lt; <a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">fabomatic::MockMrfc522</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ab11df5855a7b6969c5b44b095bce756f">rfid</a></td></tr>
<tr class="separator:ab11df5855a7b6969c5b44b095bce756f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2f9f558fe3c311acc82ca6b7552c373" id="r_aa2f9f558fe3c311acc82ca6b7552c373"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_l_c_d_wrapper.xhtml">fabomatic::LCDWrapper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aa2f9f558fe3c311acc82ca6b7552c373">lcd</a> {fabomatic::pins.lcd}</td></tr>
<tr class="separator:aa2f9f558fe3c311acc82ca6b7552c373"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae67aa957d270478a0793908703b77446" id="r_ae67aa957d270478a0793908703b77446"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_board_logic.xhtml">fabomatic::BoardLogic</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae67aa957d270478a0793908703b77446">logic</a></td></tr>
<tr class="separator:ae67aa957d270478a0793908703b77446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0feac8d80c54d5fe02cfac6bfcb43a7e" id="r_a0feac8d80c54d5fe02cfac6bfcb43a7e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml">fabomatic::MockMQTTBroker</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a0feac8d80c54d5fe02cfac6bfcb43a7e">broker</a></td></tr>
<tr class="separator:a0feac8d80c54d5fe02cfac6bfcb43a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6404b5d30ab37f8b12de788296e2b92c" id="r_a6404b5d30ab37f8b12de788296e2b92c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml">fabomatic::Tasks::Scheduler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a></td></tr>
<tr class="separator:a6404b5d30ab37f8b12de788296e2b92c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acaf37fbb67ed375298e6a277500632ae" id="r_acaf37fbb67ed375298e6a277500632ae"><td class="memItemLeft" align="right" valign="top">std::atomic&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#acaf37fbb67ed375298e6a277500632ae">exit_request</a> {false}</td></tr>
<tr class="separator:acaf37fbb67ed375298e6a277500632ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a009fc290d438fc7821dddc336aae2f3b" id="r_a009fc290d438fc7821dddc336aae2f3b"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a009fc290d438fc7821dddc336aae2f3b">t1</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskConnect&quot;, 15s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a88a4242d48bfa4a0337df522d303c367">test_taskConnect</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:a009fc290d438fc7821dddc336aae2f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a739cb1ea71dc21bde3450d76b4eb2749" id="r_a739cb1ea71dc21bde3450d76b4eb2749"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a739cb1ea71dc21bde3450d76b4eb2749">t2</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskCheckRfid&quot;, 50ms, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a294b4767ecf1e1d11cc31dafb2541d23">test_taskCheckRfid</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:a739cb1ea71dc21bde3450d76b4eb2749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa8f9a92ebaa17b28d4c53e1f9608daf" id="r_aaa8f9a92ebaa17b28d4c53e1f9608daf"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aaa8f9a92ebaa17b28d4c53e1f9608daf">t3</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskVarious&quot;, 1s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a7cd22311b16fc7c256a30ba4c2f6f387">test_taskVarious</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:aaa8f9a92ebaa17b28d4c53e1f9608daf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8a8ce64acab16055eb3a994dfbe6d33" id="r_af8a8ce64acab16055eb3a994dfbe6d33"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af8a8ce64acab16055eb3a994dfbe6d33">t4</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskEspWatchdog&quot;, 5s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a046c348aaf1a15bf80358065553e748b">test_taskEspWatchdog</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:af8a8ce64acab16055eb3a994dfbe6d33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a7b41334e2a6684e389f6204da0305a" id="r_a2a7b41334e2a6684e389f6204da0305a"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a2a7b41334e2a6684e389f6204da0305a">t5</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskRfidWatchdog&quot;, 30s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#af592b66b287714a90a895709829622b3">test_taskRfidWatchdog</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:a2a7b41334e2a6684e389f6204da0305a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a8176cc8103382324e4d067a4d0613d" id="r_a9a8176cc8103382324e4d067a4d0613d"><td class="memItemLeft" align="right" valign="top">auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a9a8176cc8103382324e4d067a4d0613d">t6</a> = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskMQTTAlive&quot;, 30s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ae0c2cd74b089905fbdebeca807403606">test_taskMQTTAlive</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td></tr>
<tr class="separator:a9a8176cc8103382324e4d067a4d0613d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a159f700a4f413190a0fd5eaa878b2cdd" id="r_a159f700a4f413190a0fd5eaa878b2cdd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classfabomatic_1_1_saved_config.xhtml">SavedConfig</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a></td></tr>
<tr class="separator:a159f700a4f413190a0fd5eaa878b2cdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08af7cf7959700ad4a46d76a4f31dbb7" id="r_a08af7cf7959700ad4a46d76a4f31dbb7"><td class="memItemLeft" align="right" valign="top">constexpr int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a08af7cf7959700ad4a46d76a4f31dbb7">NB_TASKS</a> = 100</td></tr>
<tr class="separator:a08af7cf7959700ad4a46d76a4f31dbb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6753fd10922d922982e420e92f9b7f" id="r_a5c6753fd10922d922982e420e92f9b7f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a5c6753fd10922d922982e420e92f9b7f">tasks_status</a> [<a class="el" href="namespacefabomatic_1_1tests.xhtml#a08af7cf7959700ad4a46d76a4f31dbb7">NB_TASKS</a>] {false}</td></tr>
<tr class="separator:a5c6753fd10922d922982e420e92f9b7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0120073d4ac1eb75d3f13dd4c3e9341" id="r_ad0120073d4ac1eb75d3f13dd4c3e9341"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae908327d6ba514c61989d251b1feec67">Task</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ad0120073d4ac1eb75d3f13dd4c3e9341">tasks</a> [<a class="el" href="namespacefabomatic_1_1tests.xhtml#a08af7cf7959700ad4a46d76a4f31dbb7">NB_TASKS</a>] {nullptr}</td></tr>
<tr class="separator:ad0120073d4ac1eb75d3f13dd4c3e9341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae44a848faed425990c1a0e33a85c587c" id="r_ae44a848faed425990c1a0e33a85c587c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae44a848faed425990c1a0e33a85c587c">task_counter</a> {0}</td></tr>
<tr class="separator:ae44a848faed425990c1a0e33a85c587c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b0bffffbaa955b708c5812416ba2b6d" id="r_a4b0bffffbaa955b708c5812416ba2b6d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">Scheduler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#a4b0bffffbaa955b708c5812416ba2b6d">scheduler</a></td></tr>
<tr class="separator:a4b0bffffbaa955b708c5812416ba2b6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af731a8053ea2031b72a146436546214c" id="r_af731a8053ea2031b72a146436546214c"><td class="memItemLeft" align="right" valign="top">const auto&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacefabomatic_1_1tests.xhtml#af731a8053ea2031b72a146436546214c">execute</a></td></tr>
<tr class="separator:af731a8053ea2031b72a146436546214c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="aeeb234a5c7a18c21d4e378d9daa15233" name="aeeb234a5c7a18c21d4e378d9daa15233"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeeb234a5c7a18c21d4e378d9daa15233">&#9670;&#160;</a></span>Scheduler</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml">fabomatic::Tasks::Scheduler</a> <a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">fabomatic::tests::Scheduler</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__chrono_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="test__chrono_8cpp_source.xhtml">test_chrono.cpp</a>.</p>

</div>
</div>
<a id="ae908327d6ba514c61989d251b1feec67" name="ae908327d6ba514c61989d251b1feec67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae908327d6ba514c61989d251b1feec67">&#9670;&#160;</a></span>Task</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">fabomatic::Tasks::Task</a> <a class="el" href="namespacefabomatic_1_1tests.xhtml#ae908327d6ba514c61989d251b1feec67">fabomatic::tests::Task</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__chrono_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="test__chrono_8cpp_source.xhtml">test_chrono.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a9bbef7cf45ab43901130143647b0f495" name="a9bbef7cf45ab43901130143647b0f495"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bbef7cf45ab43901130143647b0f495">&#9670;&#160;</a></span>create_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::create_tasks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">Scheduler</a> &amp;&#160;</td>
          <td class="paramname"><em>scheduler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::chrono::milliseconds&#160;</td>
          <td class="paramname"><em>period</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   46</span>  {</div>
<div class="line"><span class="lineno">   47</span>    <span class="comment">// Clean-up</span></div>
<div class="line"><span class="lineno">   48</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#ae44a848faed425990c1a0e33a85c587c">task_counter</a> = 0;</div>
<div class="line"><span class="lineno">   49</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;t : <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a5c6753fd10922d922982e420e92f9b7f">tasks_status</a>)</div>
<div class="line"><span class="lineno">   50</span>    {</div>
<div class="line"><span class="lineno">   51</span>      t = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">   52</span>    }</div>
<div class="line"><span class="lineno">   53</span>    delete_tasks();</div>
<div class="line"><span class="lineno">   54</span> </div>
<div class="line"><span class="lineno">   55</span>    <span class="comment">// Creation</span></div>
<div class="line"><span class="lineno">   56</span>    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; NB_TASKS; ++i)</div>
<div class="line"><span class="lineno">   57</span>    {</div>
<div class="line"><span class="lineno">   58</span>      <span class="keyword">auto</span> callback = [i]()</div>
<div class="line"><span class="lineno">   59</span>      {</div>
<div class="line"><span class="lineno">   60</span>        tasks_status[i] = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">   61</span>        task_counter++;</div>
<div class="line"><span class="lineno">   62</span>      };</div>
<div class="line"><span class="lineno">   63</span>      tasks[i] = <span class="keyword">new</span> Task(<span class="stringliteral">&quot;T&quot;</span> + std::to_string(i), period, callback, scheduler, <span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">   64</span>      <span class="keyword">auto</span> task = *tasks[i];</div>
<div class="line"><span class="lineno">   65</span>      TEST_ASSERT_MESSAGE(task.isActive(), <span class="stringliteral">&quot;Task is not active&quot;</span>);</div>
<div class="line"><span class="lineno">   66</span>      TEST_ASSERT_EQUAL_MESSAGE(period.count(), task.getPeriod().count(), <span class="stringliteral">&quot;Task period is not 150ms&quot;</span>);</div>
<div class="line"><span class="lineno">   67</span>    }</div>
<div class="line"><span class="lineno">   68</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a5c6753fd10922d922982e420e92f9b7f"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a5c6753fd10922d922982e420e92f9b7f">fabomatic::tests::tasks_status</a></div><div class="ttdeci">bool tasks_status[NB_TASKS]</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00021">test_tasks.cpp:21</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_ae44a848faed425990c1a0e33a85c587c"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#ae44a848faed425990c1a0e33a85c587c">fabomatic::tests::task_counter</a></div><div class="ttdeci">size_t task_counter</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00023">test_tasks.cpp:23</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__tasks_8cpp_source.xhtml#l00028">delete_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00020">NB_TASKS</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00024">scheduler</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00023">task_counter</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00022">tasks</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00021">tasks_status</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a9bbef7cf45ab43901130143647b0f495_cgraph.svg" width="602" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a9bbef7cf45ab43901130143647b0f495_icgraph.svg" width="480" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae4bd9063425820acc6c488119d90d22a" name="ae4bd9063425820acc6c488119d90d22a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4bd9063425820acc6c488119d90d22a">&#9670;&#160;</a></span>delete_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::delete_tasks </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   29</span>  {</div>
<div class="line"><span class="lineno">   30</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> t : <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#ad0120073d4ac1eb75d3f13dd4c3e9341">tasks</a>)</div>
<div class="line"><span class="lineno">   31</span>    {</div>
<div class="line"><span class="lineno">   32</span>      <span class="keywordflow">if</span> (t != <span class="keyword">nullptr</span>)</div>
<div class="line"><span class="lineno">   33</span>      {</div>
<div class="line"><span class="lineno">   34</span>        scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#ae1280eccd0bc57ff7fbc92ab54b54769">removeTask</a>(t); <span class="comment">// Because Task adds itself on creation</span></div>
<div class="line"><span class="lineno">   35</span>        <span class="keyword">delete</span> t;</div>
<div class="line"><span class="lineno">   36</span>      }</div>
<div class="line"><span class="lineno">   37</span>    }</div>
<div class="line"><span class="lineno">   38</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_tasks_1_1_scheduler_xhtml_ae1280eccd0bc57ff7fbc92ab54b54769"><div class="ttname"><a href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#ae1280eccd0bc57ff7fbc92ab54b54769">fabomatic::Tasks::Scheduler::removeTask</a></div><div class="ttdeci">auto removeTask(const Task *task) -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8cpp_source.xhtml#l00024">Tasks.cpp:24</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_ad0120073d4ac1eb75d3f13dd4c3e9341"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#ad0120073d4ac1eb75d3f13dd4c3e9341">fabomatic::tests::tasks</a></div><div class="ttdeci">Task * tasks[NB_TASKS]</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00022">test_tasks.cpp:22</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tasks_8cpp_source.xhtml#l00024">fabomatic::Tasks::Scheduler::removeTask()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00024">scheduler</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00022">tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_ae4bd9063425820acc6c488119d90d22a_cgraph.svg" width="398" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_ae4bd9063425820acc6c488119d90d22a_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a6a7645a865dc822746f972ea6f43224d" name="a6a7645a865dc822746f972ea6f43224d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a7645a865dc822746f972ea6f43224d">&#9670;&#160;</a></span>machine_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::machine_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfabomatic_1_1_board_logic.xhtml">BoardLogic</a> &amp;&#160;</td>
          <td class="paramname"><em>logic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">RFIDWrapper</a>&lt; <a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>rfid</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets machine to initial state, clearing flags. </p>

<p class="definition">Definition at line <a class="el" href="test__common_8cpp_source.xhtml#l00051">51</a> of file <a class="el" href="test__common_8cpp_source.xhtml">test_common.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   52</span>  {</div>
<div class="line"><span class="lineno">   53</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>();</div>
<div class="line"><span class="lineno">   54</span>    machine.setAllowed(<span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">   55</span>    machine.setMaintenanceNeeded(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">   56</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a98a15cc323f97adc394c29e897afc12d">logout</a>();</div>
<div class="line"><span class="lineno">   57</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">   58</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>() == <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">BoardLogic::Status::MachineFree</a>, <span class="stringliteral">&quot;machine_init: Status not MachineFree&quot;</span>);</div>
<div class="line"><span class="lineno">   59</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;machine_init: machine not free&quot;</span>);</div>
<div class="line"><span class="lineno">   60</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a164e40105242d0b7c56c6b4f21155101"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">fabomatic::BoardLogic::getMachine</a></div><div class="ttdeci">auto getMachine() const -&gt; const Machine &amp;</div><div class="ttdoc">Gets the current machine.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00601">BoardLogic.cpp:601</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a17520059a761d7b76513724f8f56dc9c"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">fabomatic::BoardLogic::getStatus</a></div><div class="ttdeci">auto getStatus() const -&gt; Status</div><div class="ttdoc">Gets the current board status.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00440">BoardLogic.cpp:440</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">fabomatic::BoardLogic::Status::MachineFree</a></div><div class="ttdeci">@ MachineFree</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a8332053c1e3343652632bde1a81a9ff4"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">fabomatic::BoardLogic::getMachineForTesting</a></div><div class="ttdeci">auto getMachineForTesting() -&gt; Machine &amp;</div><div class="ttdoc">returns a modificable machine for testing only</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00587">BoardLogic.cpp:587</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a98a15cc323f97adc394c29e897afc12d"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a98a15cc323f97adc394c29e897afc12d">fabomatic::BoardLogic::logout</a></div><div class="ttdeci">auto logout() -&gt; void</div><div class="ttdoc">Removes the current machine user and changes the status to LoggedOut.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00112">BoardLogic.cpp:112</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a2600320f41c9fa343c66058ecb12b5ee"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">fabomatic::tests::simulate_rfid_card</a></div><div class="ttdeci">BoardLogic::Status simulate_rfid_card(RFIDWrapper&lt; MockMrfc522 &gt; &amp;rfid, BoardLogic &amp;logic, std::optional&lt; card::uid_t &gt; uid, std::optional&lt; std::chrono::milliseconds &gt; duration_tap)</div><div class="ttdoc">Simulates RFID card tap.</div><div class="ttdef"><b>Definition</b> <a href="test__common_8cpp_source.xhtml#l00020">test_common.cpp:20</a></div></div>
<div class="ttc" id="atest__logic_8cpp_xhtml_a07dd6eb8e9dc2dc50bf69ef6032c5055"><div class="ttname"><a href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a></div><div class="ttdeci">fabomatic::BoardLogic logic</div><div class="ttdef"><b>Definition</b> <a href="test__logic_8cpp_source.xhtml#l00029">test_logic.cpp:29</a></div></div>
<div class="ttc" id="atest__logic_8cpp_xhtml_af6931c3ecf1cb64d3ff6cb0eab2e590c"><div class="ttname"><a href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a></div><div class="ttdeci">fabomatic::RFIDWrapper&lt; fabomatic::MockMrfc522 &gt; rfid</div><div class="ttdef"><b>Definition</b> <a href="test__logic_8cpp_source.xhtml#l00027">test_logic.cpp:27</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00587">fabomatic::BoardLogic::getMachineForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00112">fabomatic::BoardLogic::logout()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">fabomatic::BoardLogic::MachineFree</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00290">test_machine_allowed()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00260">test_machine_maintenance()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00163">test_one_user_at_a_time()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00209">test_user_autologoff()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00117">test_whitelist_no_network()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6a7645a865dc822746f972ea6f43224d_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6a7645a865dc822746f972ea6f43224d_icgraph.svg" width="511" height="314"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a437b3023f617a6c0c675e6484f85ba50" name="a437b3023f617a6c0c675e6484f85ba50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a437b3023f617a6c0c675e6484f85ba50">&#9670;&#160;</a></span>run_for_duration()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::run_for_duration </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void()&gt;&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::chrono::milliseconds&#160;</td>
          <td class="paramname"><em>duration</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   71</span>  {</div>
<div class="line"><span class="lineno">   72</span>    <span class="keyword">auto</span> start = <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>();</div>
<div class="line"><span class="lineno">   73</span>    <span class="keywordflow">while</span> (<a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>() - start &lt; duration)</div>
<div class="line"><span class="lineno">   74</span>    {</div>
<div class="line"><span class="lineno">   75</span>      callback();</div>
<div class="line"><span class="lineno">   76</span>    }</div>
<div class="line"><span class="lineno">   77</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1_tasks_xhtml_adc67d1313c6695d813feb935eafdaf60"><div class="ttname"><a href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a></div><div class="ttdeci">auto arduinoNow() -&gt; const time_point</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8hpp_source.xhtml#l00017">Tasks.hpp:17</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tasks_8hpp_source.xhtml#l00017">fabomatic::Tasks::arduinoNow()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a437b3023f617a6c0c675e6484f85ba50_cgraph.svg" width="392" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a437b3023f617a6c0c675e6484f85ba50_icgraph.svg" width="462" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a716136126264ddcfe5e1b850f5bab61e" name="a716136126264ddcfe5e1b850f5bab61e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a716136126264ddcfe5e1b850f5bab61e">&#9670;&#160;</a></span>setUp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::setUp </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__chrono_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="test__chrono_8cpp_source.xhtml">test_chrono.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   26</span>  {</div>
<div class="line"><span class="lineno">   27</span>    <span class="comment">// set stuff up here</span></div>
<div class="line"><span class="lineno">   28</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a2600320f41c9fa343c66058ecb12b5ee" name="a2600320f41c9fa343c66058ecb12b5ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2600320f41c9fa343c66058ecb12b5ee">&#9670;&#160;</a></span>simulate_rfid_card()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0">BoardLogic::Status</a> fabomatic::tests::simulate_rfid_card </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">RFIDWrapper</a>&lt; <a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>rfid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classfabomatic_1_1_board_logic.xhtml">BoardLogic</a> &amp;&#160;</td>
          <td class="paramname"><em>logic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::optional&lt; <a class="el" href="namespacefabomatic_1_1card.xhtml#aa36a4f716561b5c72d144ad55bc3e53b">card::uid_t</a> &gt;&#160;</td>
          <td class="paramname"><em>uid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::optional&lt; std::chrono::milliseconds &gt;&#160;</td>
          <td class="paramname"><em>duration_tap</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simulates RFID card tap. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rfid</td><td>RFID wrapper for simulation </td></tr>
    <tr><td class="paramname">logic</td><td><a class="el" href="namespacefabomatic_1_1_board.xhtml">Board</a> logic, the checkRfid() method will be called repeatedly </td></tr>
    <tr><td class="paramname">uid</td><td>card UID to tap </td></tr>
    <tr><td class="paramname">duration_tap</td><td>duration of the tap. pass milliseconds::max() to keep the card in the field </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rfid</td><td>RFID wrapper </td></tr>
    <tr><td class="paramname">logic</td><td><a class="el" href="namespacefabomatic_1_1_board.xhtml">Board</a> logic </td></tr>
    <tr><td class="paramname">uid</td><td>UID of the card to simulate or std::nullopt for no card </td></tr>
    <tr><td class="paramname">duration_tap</td><td>Duration of the tap </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="test__common_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="test__common_8cpp_source.xhtml">test_common.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   22</span>  {</div>
<div class="line"><span class="lineno">   23</span>    <span class="keyword">constexpr</span> <span class="keyword">auto</span> DEFAULT_CYCLES = 3;</div>
<div class="line"><span class="lineno">   24</span>    <a class="code hl_class" href="classfabomatic_1_1_mock_mrfc522.xhtml">MockMrfc522</a> &amp;driver = <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.getDriver();</div>
<div class="line"><span class="lineno">   25</span>    driver.<a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#a4c9904c7fe8ef1d9ab3a0b32a60c0c17">resetUid</a>();</div>
<div class="line"><span class="lineno">   26</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; DEFAULT_CYCLES; i++)</div>
<div class="line"><span class="lineno">   27</span>    {</div>
<div class="line"><span class="lineno">   28</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a25bdc3a49d850aa49f92faf951b68efb">checkRfid</a>();</div>
<div class="line"><span class="lineno">   29</span>    }</div>
<div class="line"><span class="lineno">   30</span>    <span class="keywordflow">if</span> (uid.has_value())</div>
<div class="line"><span class="lineno">   31</span>    {</div>
<div class="line"><span class="lineno">   32</span>      driver.<a class="code hl_function" href="classfabomatic_1_1_mock_mrfc522.xhtml#aa5243105821375118132fe7a3e5d7ea3">setUid</a>(uid.value(), duration_tap);</div>
<div class="line"><span class="lineno">   33</span>      TEST_ASSERT_TRUE_MESSAGE(uid == <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.getUid(), <span class="stringliteral">&quot;Card UID not equal&quot;</span>);</div>
<div class="line"><span class="lineno">   34</span>      <span class="keyword">auto</span> start = <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>();</div>
<div class="line"><span class="lineno">   35</span> </div>
<div class="line"><span class="lineno">   36</span>      <span class="keywordflow">do</span></div>
<div class="line"><span class="lineno">   37</span>      {</div>
<div class="line"><span class="lineno">   38</span>        <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a25bdc3a49d850aa49f92faf951b68efb">checkRfid</a>();</div>
<div class="line"><span class="lineno">   39</span>        delay(50);</div>
<div class="line"><span class="lineno">   40</span>      } <span class="keywordflow">while</span> (duration_tap.has_value() &amp;&amp; <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>() - start &lt; duration_tap);</div>
<div class="line"><span class="lineno">   41</span> </div>
<div class="line"><span class="lineno">   42</span>    }</div>
<div class="line"><span class="lineno">   43</span>    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (duration_tap)</div>
<div class="line"><span class="lineno">   44</span>    {</div>
<div class="line"><span class="lineno">   45</span>      <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#a5c20f560f5934822d39ba116a16f3ab6">delay</a>(duration_tap.value().count());</div>
<div class="line"><span class="lineno">   46</span>    }</div>
<div class="line"><span class="lineno">   47</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>();</div>
<div class="line"><span class="lineno">   48</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a25bdc3a49d850aa49f92faf951b68efb"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a25bdc3a49d850aa49f92faf951b68efb">fabomatic::BoardLogic::checkRfid</a></div><div class="ttdeci">auto checkRfid() -&gt; void</div><div class="ttdoc">Checks if a new card is present.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00549">BoardLogic.cpp:549</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml">fabomatic::MockMrfc522</a></div><div class="ttdoc">This class implements a Mrfc522 with settable tag ID in order to allow simulation.</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8hpp_source.xhtml#l00019">MockMrfc522.hpp:20</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml_a4c9904c7fe8ef1d9ab3a0b32a60c0c17"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml#a4c9904c7fe8ef1d9ab3a0b32a60c0c17">fabomatic::MockMrfc522::resetUid</a></div><div class="ttdeci">auto resetUid() -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8cpp_source.xhtml#l00057">MockMrfc522.cpp:57</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_mrfc522_xhtml_aa5243105821375118132fe7a3e5d7ea3"><div class="ttname"><a href="classfabomatic_1_1_mock_mrfc522.xhtml#aa5243105821375118132fe7a3e5d7ea3">fabomatic::MockMrfc522::setUid</a></div><div class="ttdeci">auto setUid(const std::optional&lt; card::uid_t &gt; &amp;uid, const std::optional&lt; std::chrono::milliseconds &gt; &amp;max_delay) -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_mock_mrfc522_8cpp_source.xhtml#l00044">MockMrfc522.cpp:44</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1_tasks_xhtml_a5c20f560f5934822d39ba116a16f3ab6"><div class="ttname"><a href="namespacefabomatic_1_1_tasks.xhtml#a5c20f560f5934822d39ba116a16f3ab6">fabomatic::Tasks::delay</a></div><div class="ttdeci">auto delay(const milliseconds duration) -&gt; void</div><div class="ttdoc">Wait for a delay, allowing OTA updates.</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8cpp_source.xhtml#l00265">Tasks.cpp:265</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tasks_8hpp_source.xhtml#l00017">fabomatic::Tasks::arduinoNow()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00549">fabomatic::BoardLogic::checkRfid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00057">fabomatic::MockMrfc522::resetUid()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="_mock_mrfc522_8cpp_source.xhtml#l00044">fabomatic::MockMrfc522::setUid()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00290">test_machine_allowed()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00260">test_machine_maintenance()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00312">test_messages_buffered()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00163">test_one_user_at_a_time()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00209">test_user_autologoff()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00117">test_whitelist_no_network()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a2600320f41c9fa343c66058ecb12b5ee_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a2600320f41c9fa343c66058ecb12b5ee_icgraph.svg" width="100%" height="578"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a0af84220af96359f7802e901c747d6c2" name="a0af84220af96359f7802e901c747d6c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0af84220af96359f7802e901c747d6c2">&#9670;&#160;</a></span>tearDown()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::tearDown </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__chrono_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="test__chrono_8cpp_source.xhtml">test_chrono.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   22</span>  {</div>
<div class="line"><span class="lineno">   23</span>  }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a4fbc6366f69847719d0f0cb626572493" name="a4fbc6366f69847719d0f0cb626572493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fbc6366f69847719d0f0cb626572493">&#9670;&#160;</a></span>test_buffered_msg()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_buffered_msg </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00201">201</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  202</span>  {</div>
<div class="line"><span class="lineno">  203</span>    <span class="keyword">constexpr</span> <span class="keyword">auto</span> NUM_MESSAGES = std::min(30, Buffer::MAX_MESSAGES - 3);</div>
<div class="line"><span class="lineno">  204</span> </div>
<div class="line"><span class="lineno">  205</span>    <a class="code hl_class" href="classfabomatic_1_1_buffer.xhtml">Buffer</a> buff;</div>
<div class="line"><span class="lineno">  206</span>    <a class="code hl_struct" href="structfabomatic_1_1_buffered_msg.xhtml">BufferedMsg</a> msg1{<span class="stringliteral">&quot;msg1&quot;</span>, <span class="stringliteral">&quot;topic1&quot;</span>, <span class="keyword">false</span>};</div>
<div class="line"><span class="lineno">  207</span>    <a class="code hl_struct" href="structfabomatic_1_1_buffered_msg.xhtml">BufferedMsg</a> msg2{<span class="stringliteral">&quot;msg2&quot;</span>, <span class="stringliteral">&quot;topic1&quot;</span>, <span class="keyword">false</span>};</div>
<div class="line"><span class="lineno">  208</span>    BufferedMsg msg3{<span class="stringliteral">&quot;msg3&quot;</span>, <span class="stringliteral">&quot;topic2&quot;</span>, <span class="keyword">false</span>};</div>
<div class="line"><span class="lineno">  209</span>    std::vector messages{msg3, msg2, msg1};</div>
<div class="line"><span class="lineno">  210</span> </div>
<div class="line"><span class="lineno">  211</span>    TEST_ASSERT_TRUE(msg1.mqtt_message == <span class="stringliteral">&quot;msg1&quot;</span>);</div>
<div class="line"><span class="lineno">  212</span>    TEST_ASSERT_TRUE(msg1.mqtt_topic == <span class="stringliteral">&quot;topic1&quot;</span>);</div>
<div class="line"><span class="lineno">  213</span>    TEST_ASSERT_TRUE(msg2.mqtt_message == <span class="stringliteral">&quot;msg2&quot;</span>);</div>
<div class="line"><span class="lineno">  214</span>    TEST_ASSERT_TRUE(msg2.mqtt_topic == <span class="stringliteral">&quot;topic1&quot;</span>);</div>
<div class="line"><span class="lineno">  215</span>    TEST_ASSERT_TRUE(msg3.mqtt_message == <span class="stringliteral">&quot;msg3&quot;</span>);</div>
<div class="line"><span class="lineno">  216</span>    TEST_ASSERT_TRUE(msg3.mqtt_topic == <span class="stringliteral">&quot;topic2&quot;</span>);</div>
<div class="line"><span class="lineno">  217</span> </div>
<div class="line"><span class="lineno">  218</span>    <span class="comment">// Create some more messages</span></div>
<div class="line"><span class="lineno">  219</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> msg_num = 0; msg_num &lt; NUM_MESSAGES; msg_num++)</div>
<div class="line"><span class="lineno">  220</span>    {</div>
<div class="line"><span class="lineno">  221</span>      std::string message{<span class="stringliteral">&quot;{action=\&quot;test\&quot;, value=\&quot;&quot;</span>};</div>
<div class="line"><span class="lineno">  222</span>      message.append(std::to_string(msg_num));</div>
<div class="line"><span class="lineno">  223</span>      message.append(<span class="stringliteral">&quot;\&quot;, test: true}&quot;</span>);</div>
<div class="line"><span class="lineno">  224</span>      std::string topic{<span class="stringliteral">&quot;machine/TESTTOPIC/&quot;</span>};</div>
<div class="line"><span class="lineno">  225</span> </div>
<div class="line"><span class="lineno">  226</span>      topic.append(std::to_string(msg_num));</div>
<div class="line"><span class="lineno">  227</span>      messages.push_back({message, topic, <span class="keyword">true</span>});</div>
<div class="line"><span class="lineno">  228</span>    }</div>
<div class="line"><span class="lineno">  229</span> </div>
<div class="line"><span class="lineno">  230</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  231</span> </div>
<div class="line"><span class="lineno">  232</span>    <span class="comment">// Nothing to test</span></div>
<div class="line"><span class="lineno">  233</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (!conf::debug::ENABLE_BUFFERING)</div>
<div class="line"><span class="lineno">  234</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">  235</span> </div>
<div class="line"><span class="lineno">  236</span>    <span class="comment">// Test insertion, messages must be queued newest first (msg3-msg2-msg1)</span></div>
<div class="line"><span class="lineno">  237</span>    <span class="keyword">auto</span> msg_count = 0;</div>
<div class="line"><span class="lineno">  238</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;msg : messages)</div>
<div class="line"><span class="lineno">  239</span>    {</div>
<div class="line"><span class="lineno">  240</span>      TEST_ASSERT_EQUAL_MESSAGE(msg_count, buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;Push_back: Buffer count is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  241</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;bmsg = BufferedMsg{msg.mqtt_message, msg.mqtt_topic, msg.wait_for_answer};</div>
<div class="line"><span class="lineno">  242</span>      buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a06b997e6e4f83f208250b739f9e2a2db">push_front</a>(bmsg);</div>
<div class="line"><span class="lineno">  243</span>      msg_count++;</div>
<div class="line"><span class="lineno">  244</span>    }</div>
<div class="line"><span class="lineno">  245</span> </div>
<div class="line"><span class="lineno">  246</span>    TEST_ASSERT_EQUAL_MESSAGE(messages.size(), buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;Buffer contains all expected messages&quot;</span>);</div>
<div class="line"><span class="lineno">  247</span> </div>
<div class="line"><span class="lineno">  248</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  249</span>    buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a0925c3a370f243ae3455108189e1afc6">setChanged</a>(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  250</span> </div>
<div class="line"><span class="lineno">  251</span>    <span class="comment">// Test retrieval oldest first (msg1-msg2-msg3-...)</span></div>
<div class="line"><span class="lineno">  252</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> elem = messages.rbegin(); elem != messages.rend(); ++elem)</div>
<div class="line"><span class="lineno">  253</span>    {</div>
<div class="line"><span class="lineno">  254</span>      <span class="keyword">auto</span> &amp;msg = buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a6301e1ea47622d36474ee031a17b9bb4">getMessage</a>();</div>
<div class="line"><span class="lineno">  255</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(elem-&gt;mqtt_message.c_str(), msg.mqtt_message.c_str(), <span class="stringliteral">&quot;(1) Retrieval oldest first message is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  256</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(elem-&gt;mqtt_topic.c_str(), msg.mqtt_topic.c_str(), <span class="stringliteral">&quot;(1) Retrieval oldest first topic is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  257</span>      TEST_ASSERT_EQUAL_MESSAGE(elem-&gt;wait_for_answer, msg.wait_for_answer, <span class="stringliteral">&quot;(1) Retrieval oldest first wait_for_answer is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  258</span>    }</div>
<div class="line"><span class="lineno">  259</span> </div>
<div class="line"><span class="lineno">  260</span>    TEST_ASSERT_EQUAL_MESSAGE(0, buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;Buffer is now empty&quot;</span>);</div>
<div class="line"><span class="lineno">  261</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  262</span>    buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a0925c3a370f243ae3455108189e1afc6">setChanged</a>(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  263</span> </div>
<div class="line"><span class="lineno">  264</span>    <span class="comment">// Test insertion in reverse order</span></div>
<div class="line"><span class="lineno">  265</span>    msg_count = 0;</div>
<div class="line"><span class="lineno">  266</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;msg : messages)</div>
<div class="line"><span class="lineno">  267</span>    {</div>
<div class="line"><span class="lineno">  268</span>      TEST_ASSERT_EQUAL_MESSAGE(msg_count, buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;(1) Push_front: Buffer count is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  269</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;bmsg = BufferedMsg{msg.mqtt_message, msg.mqtt_topic, msg.wait_for_answer};</div>
<div class="line"><span class="lineno">  270</span>      buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#aad578ef8cbecdafb8c5ade345df415a3">push_back</a>(bmsg);</div>
<div class="line"><span class="lineno">  271</span>      msg_count++;</div>
<div class="line"><span class="lineno">  272</span>    }</div>
<div class="line"><span class="lineno">  273</span> </div>
<div class="line"><span class="lineno">  274</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  275</span>    buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a0925c3a370f243ae3455108189e1afc6">setChanged</a>(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  276</span> </div>
<div class="line"><span class="lineno">  277</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> elem = messages.begin(); elem != messages.end(); ++elem)</div>
<div class="line"><span class="lineno">  278</span>    {</div>
<div class="line"><span class="lineno">  279</span>      <span class="keyword">auto</span> &amp;msg = buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a6301e1ea47622d36474ee031a17b9bb4">getMessage</a>();</div>
<div class="line"><span class="lineno">  280</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(elem-&gt;mqtt_message.c_str(), msg.mqtt_message.c_str(), <span class="stringliteral">&quot;(2) Retrieval oldest first message is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  281</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(elem-&gt;mqtt_topic.c_str(), msg.mqtt_topic.c_str(), <span class="stringliteral">&quot;(2) Retrieval oldest first topic is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  282</span>      TEST_ASSERT_EQUAL_MESSAGE(elem-&gt;wait_for_answer, msg.wait_for_answer, <span class="stringliteral">&quot;(2) Retrieval oldest first wait_for_answer is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  283</span>    }</div>
<div class="line"><span class="lineno">  284</span> </div>
<div class="line"><span class="lineno">  285</span>    TEST_ASSERT_EQUAL_MESSAGE(0, buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;(2) Buffer is now empty&quot;</span>);</div>
<div class="line"><span class="lineno">  286</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  287</span>    buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a0925c3a370f243ae3455108189e1afc6">setChanged</a>(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  288</span> </div>
<div class="line"><span class="lineno">  289</span>    <span class="comment">// Test empty buffer</span></div>
<div class="line"><span class="lineno">  290</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a70d156a8423b7e9d4db345cff5eb528f">test_deserialization</a>(buff), <span class="stringliteral">&quot;JSON works for empty buffer&quot;</span>);</div>
<div class="line"><span class="lineno">  291</span>    TEST_ASSERT_FALSE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has no pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  292</span> </div>
<div class="line"><span class="lineno">  293</span>    <span class="comment">// Insert more messages</span></div>
<div class="line"><span class="lineno">  294</span>    msg_count = 0;</div>
<div class="line"><span class="lineno">  295</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;msg : messages)</div>
<div class="line"><span class="lineno">  296</span>    {</div>
<div class="line"><span class="lineno">  297</span>      TEST_ASSERT_EQUAL_MESSAGE(msg_count, buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), <span class="stringliteral">&quot;(2) Push_front: Buffer count is correct&quot;</span>);</div>
<div class="line"><span class="lineno">  298</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;bmsg = BufferedMsg{msg.mqtt_message, msg.mqtt_topic, msg.wait_for_answer};</div>
<div class="line"><span class="lineno">  299</span>      buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#aad578ef8cbecdafb8c5ade345df415a3">push_back</a>(bmsg);</div>
<div class="line"><span class="lineno">  300</span>      msg_count++;</div>
<div class="line"><span class="lineno">  301</span>    }</div>
<div class="line"><span class="lineno">  302</span> </div>
<div class="line"><span class="lineno">  303</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a70d156a8423b7e9d4db345cff5eb528f">test_deserialization</a>(buff), <span class="stringliteral">&quot;JSON works for full buffer&quot;</span>);</div>
<div class="line"><span class="lineno">  304</span>    TEST_ASSERT_TRUE_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">hasChanged</a>(), <span class="stringliteral">&quot;Buffer has pending changes&quot;</span>);</div>
<div class="line"><span class="lineno">  305</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml">fabomatic::Buffer</a></div><div class="ttdoc">Class containing the buffered messages for future replay.</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8hpp_source.xhtml#l00028">BufferedMsg.hpp:29</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_a06b997e6e4f83f208250b739f9e2a2db"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#a06b997e6e4f83f208250b739f9e2a2db">fabomatic::Buffer::push_front</a></div><div class="ttdeci">auto push_front(const BufferedMsg &amp;message) -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8cpp_source.xhtml#l00029">BufferedMsg.cpp:29</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_a0925c3a370f243ae3455108189e1afc6"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#a0925c3a370f243ae3455108189e1afc6">fabomatic::Buffer::setChanged</a></div><div class="ttdeci">auto setChanged(bool new_value) -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8hpp_source.xhtml#l00042">BufferedMsg.hpp:42</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_a6301e1ea47622d36474ee031a17b9bb4"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#a6301e1ea47622d36474ee031a17b9bb4">fabomatic::Buffer::getMessage</a></div><div class="ttdeci">auto getMessage() -&gt; const BufferedMsg</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8cpp_source.xhtml#l00048">BufferedMsg.cpp:48</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_a9ff239a0ddbaed54bcf0a72f2517d7a0"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">fabomatic::Buffer::count</a></div><div class="ttdeci">auto count() const -&gt; size_t</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8cpp_source.xhtml#l00063">BufferedMsg.cpp:63</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_aad578ef8cbecdafb8c5ade345df415a3"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#aad578ef8cbecdafb8c5ade345df415a3">fabomatic::Buffer::push_back</a></div><div class="ttdeci">auto push_back(const BufferedMsg &amp;message) -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8cpp_source.xhtml#l00010">BufferedMsg.cpp:10</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_ae55d0197a2b50d55d1d762569b9c56da"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#ae55d0197a2b50d55d1d762569b9c56da">fabomatic::Buffer::hasChanged</a></div><div class="ttdeci">auto hasChanged() const -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8hpp_source.xhtml#l00041">BufferedMsg.hpp:41</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a70d156a8423b7e9d4db345cff5eb528f"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a70d156a8423b7e9d4db345cff5eb528f">fabomatic::tests::test_deserialization</a></div><div class="ttdeci">bool test_deserialization(Buffer &amp;buff)</div><div class="ttdef"><b>Definition</b> <a href="test__savedconfig_8cpp_source.xhtml#l00173">test_savedconfig.cpp:173</a></div></div>
<div class="ttc" id="astructfabomatic_1_1_buffered_msg_xhtml"><div class="ttname"><a href="structfabomatic_1_1_buffered_msg.xhtml">fabomatic::BufferedMsg</a></div><div class="ttdoc">Message that can be saved in Flash for future replay.</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8hpp_source.xhtml#l00016">BufferedMsg.hpp:17</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00063">fabomatic::Buffer::count()</a>, <a class="el" href="conf_8hpp_source.xhtml#l00094">fabomatic::conf::debug::ENABLE_BUFFERING</a>, <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00048">fabomatic::Buffer::getMessage()</a>, <a class="el" href="_buffered_msg_8hpp_source.xhtml#l00041">fabomatic::Buffer::hasChanged()</a>, <a class="el" href="_buffered_msg_8hpp_source.xhtml#l00045">fabomatic::Buffer::MAX_MESSAGES</a>, <a class="el" href="_buffered_msg_8hpp_source.xhtml#l00018">fabomatic::BufferedMsg::mqtt_message</a>, <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00010">fabomatic::Buffer::push_back()</a>, <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00029">fabomatic::Buffer::push_front()</a>, <a class="el" href="_buffered_msg_8hpp_source.xhtml#l00042">fabomatic::Buffer::setChanged()</a>, and <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00173">test_deserialization()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00318">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a4fbc6366f69847719d0f0cb626572493_cgraph.svg" width="100%" height="596"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a4fbc6366f69847719d0f0cb626572493_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a0bbb6cee5561bf8ac1c4a9117d9d01b8" name="a0bbb6cee5561bf8ac1c4a9117d9d01b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bbb6cee5561bf8ac1c4a9117d9d01b8">&#9670;&#160;</a></span>test_changes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_changes </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00048">48</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   49</span>  {</div>
<div class="line"><span class="lineno">   50</span>    <span class="keyword">auto</span> result1 = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">   51</span>    TEST_ASSERT_TRUE_MESSAGE(result1.has_value(), <span class="stringliteral">&quot;Loaded config is empty&quot;</span>);</div>
<div class="line"><span class="lineno">   52</span>    <span class="keyword">auto</span> result2 = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">   53</span>    TEST_ASSERT_TRUE_MESSAGE(result2.has_value(), <span class="stringliteral">&quot;Loaded config is empty&quot;</span>);</div>
<div class="line"><span class="lineno">   54</span> </div>
<div class="line"><span class="lineno">   55</span>    <span class="keyword">auto</span> &amp;<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a> = result1.value();</div>
<div class="line"><span class="lineno">   56</span>    <span class="keyword">auto</span> &amp;loaded = result2.value();</div>
<div class="line"><span class="lineno">   57</span> </div>
<div class="line"><span class="lineno">   58</span>    loaded.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#abccca47e85f3214c2ce780230bfe7f49">ssid</a> = <span class="stringliteral">&quot;a&quot;</span>;</div>
<div class="line"><span class="lineno">   59</span>    loaded.password = <span class="stringliteral">&quot;b&quot;</span>;</div>
<div class="line"><span class="lineno">   60</span>    loaded.mqtt_server = <span class="stringliteral">&quot;c&quot;</span>;</div>
<div class="line"><span class="lineno">   61</span>    loaded.mqtt_user = <span class="stringliteral">&quot;d&quot;</span>;</div>
<div class="line"><span class="lineno">   62</span>    loaded.mqtt_password = <span class="stringliteral">&quot;e&quot;</span>;</div>
<div class="line"><span class="lineno">   63</span>    loaded.mqtt_switch_topic = <span class="stringliteral">&quot;f&quot;</span>;</div>
<div class="line"><span class="lineno">   64</span>    loaded.machine_id = <span class="stringliteral">&quot;9&quot;</span>;</div>
<div class="line"><span class="lineno">   65</span> </div>
<div class="line"><span class="lineno">   66</span>    <span class="comment">// Save changes</span></div>
<div class="line"><span class="lineno">   67</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.SaveToEEPROM(), <span class="stringliteral">&quot;Loaded config save failed&quot;</span>);</div>
<div class="line"><span class="lineno">   68</span>    result2 = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">   69</span>    TEST_ASSERT_TRUE_MESSAGE(result2.has_value(), <span class="stringliteral">&quot;Loaded config is empty&quot;</span>);</div>
<div class="line"><span class="lineno">   70</span>    <span class="keyword">auto</span> &amp;saved = result2.value();</div>
<div class="line"><span class="lineno">   71</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.ssid == saved.ssid, <span class="stringliteral">&quot;Loaded config ssid mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   72</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.password == saved.password, <span class="stringliteral">&quot;Loaded config password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   73</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.mqtt_server == saved.mqtt_server, <span class="stringliteral">&quot;Loaded config mqtt_server mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   74</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.mqtt_user == saved.mqtt_user, <span class="stringliteral">&quot;Loaded config mqtt_user mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   75</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.mqtt_password == saved.mqtt_password, <span class="stringliteral">&quot;Loaded config mqtt_password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   76</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.mqtt_switch_topic == saved.mqtt_switch_topic, <span class="stringliteral">&quot;Loaded config mqtt_switch_topic mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   77</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.machine_id == saved.machine_id, <span class="stringliteral">&quot;Loaded config machine_id mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   78</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.disablePortal == saved.disablePortal, <span class="stringliteral">&quot;Loaded config disablePortal mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   79</span>    TEST_ASSERT_TRUE_MESSAGE(SavedConfig::MAGIC_NUMBER == saved.magic_number, <span class="stringliteral">&quot;Loaded config magic number mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   80</span> </div>
<div class="line"><span class="lineno">   81</span>    <span class="comment">// Check that changes have been saved</span></div>
<div class="line"><span class="lineno">   82</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#abccca47e85f3214c2ce780230bfe7f49">ssid</a> != saved.ssid, <span class="stringliteral">&quot;Loaded config ssid mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   83</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#a8f7b5fba524d14a66ed1eaeda08a7e0d">password</a> != saved.password, <span class="stringliteral">&quot;Loaded config password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   84</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#a8de320beb3e706c35582c049d3681c42">mqtt_server</a> != saved.mqtt_server, <span class="stringliteral">&quot;Loaded config mqtt_server mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   85</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#a8cc620b09cef7aceaf7ec87e72dfcdc0">mqtt_user</a> != saved.mqtt_user, <span class="stringliteral">&quot;Loaded config mqtt_user mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   86</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#a68004c1190623a027b2a1f41607cd33f">mqtt_password</a> != saved.mqtt_password, <span class="stringliteral">&quot;Loaded config mqtt_password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   87</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#a1c147278506b9cd2856798a7988d78ff">mqtt_switch_topic</a> != saved.mqtt_switch_topic, <span class="stringliteral">&quot;Loaded config mqtt_switch_topic mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   88</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_variable" href="classfabomatic_1_1_saved_config.xhtml#aa2312c6cebb6b73f66e9f8238cb1b17f">machine_id</a> != saved.machine_id, <span class="stringliteral">&quot;Loaded config machine_id mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   89</span> </div>
<div class="line"><span class="lineno">   90</span>    <span class="comment">// Restore original</span></div>
<div class="line"><span class="lineno">   91</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">original</a>.<a class="code hl_function" href="classfabomatic_1_1_saved_config.xhtml#a312c74363068192ae80df24140f82874">SaveToEEPROM</a>(), <span class="stringliteral">&quot;Loaded config save failed&quot;</span>);</div>
<div class="line"><span class="lineno">   92</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a1c147278506b9cd2856798a7988d78ff"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a1c147278506b9cd2856798a7988d78ff">fabomatic::SavedConfig::mqtt_switch_topic</a></div><div class="ttdeci">std::string mqtt_switch_topic</div><div class="ttdoc">MQTT topic for mqtt switch (if available)</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00062">SavedConfig.hpp:62</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a312c74363068192ae80df24140f82874"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a312c74363068192ae80df24140f82874">fabomatic::SavedConfig::SaveToEEPROM</a></div><div class="ttdeci">auto SaveToEEPROM() const -&gt; bool</div><div class="ttdoc">Saves the configuration to EEPROM.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8cpp_source.xhtml#l00172">SavedConfig.cpp:172</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a68004c1190623a027b2a1f41607cd33f"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a68004c1190623a027b2a1f41607cd33f">fabomatic::SavedConfig::mqtt_password</a></div><div class="ttdeci">std::string mqtt_password</div><div class="ttdoc">MQTT password.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00059">SavedConfig.hpp:59</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a8cc620b09cef7aceaf7ec87e72dfcdc0"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a8cc620b09cef7aceaf7ec87e72dfcdc0">fabomatic::SavedConfig::mqtt_user</a></div><div class="ttdeci">std::string mqtt_user</div><div class="ttdoc">MQTT username.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00056">SavedConfig.hpp:56</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a8de320beb3e706c35582c049d3681c42"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a8de320beb3e706c35582c049d3681c42">fabomatic::SavedConfig::mqtt_server</a></div><div class="ttdeci">std::string mqtt_server</div><div class="ttdoc">MQTT server.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00053">SavedConfig.hpp:53</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_a8f7b5fba524d14a66ed1eaeda08a7e0d"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#a8f7b5fba524d14a66ed1eaeda08a7e0d">fabomatic::SavedConfig::password</a></div><div class="ttdeci">std::string password</div><div class="ttdoc">WiFi password.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00050">SavedConfig.hpp:50</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_aa2312c6cebb6b73f66e9f8238cb1b17f"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#aa2312c6cebb6b73f66e9f8238cb1b17f">fabomatic::SavedConfig::machine_id</a></div><div class="ttdeci">std::string machine_id</div><div class="ttdoc">Machine ID connected to the board.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00066">SavedConfig.hpp:66</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml_abccca47e85f3214c2ce780230bfe7f49"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml#abccca47e85f3214c2ce780230bfe7f49">fabomatic::SavedConfig::ssid</a></div><div class="ttdeci">std::string ssid</div><div class="ttdoc">WiFi SSID.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00047">SavedConfig.hpp:47</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a159f700a4f413190a0fd5eaa878b2cdd"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a159f700a4f413190a0fd5eaa878b2cdd">fabomatic::tests::original</a></div><div class="ttdeci">SavedConfig original</div><div class="ttdef"><b>Definition</b> <a href="test__savedconfig_8cpp_source.xhtml#l00020">test_savedconfig.cpp:20</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00066">fabomatic::SavedConfig::machine_id</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00038">fabomatic::SavedConfig::MAGIC_NUMBER</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00059">fabomatic::SavedConfig::mqtt_password</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00053">fabomatic::SavedConfig::mqtt_server</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00062">fabomatic::SavedConfig::mqtt_switch_topic</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00056">fabomatic::SavedConfig::mqtt_user</a>, <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00020">original</a>, <a class="el" href="_saved_config_8hpp_source.xhtml#l00050">fabomatic::SavedConfig::password</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00172">fabomatic::SavedConfig::SaveToEEPROM()</a>, and <a class="el" href="_saved_config_8hpp_source.xhtml#l00047">fabomatic::SavedConfig::ssid</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00318">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a0bbb6cee5561bf8ac1c4a9117d9d01b8_cgraph.svg" width="100%" height="412"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a0bbb6cee5561bf8ac1c4a9117d9d01b8_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a95c3d2a5cfa25e610ac054894d766f73" name="a95c3d2a5cfa25e610ac054894d766f73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c3d2a5cfa25e610ac054894d766f73">&#9670;&#160;</a></span>test_check_transmission()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_check_transmission </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   80</span>  {</div>
<div class="line"><span class="lineno">   81</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">   82</span> </div>
<div class="line"><span class="lineno">   83</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac80b4835d858bea27da461b18df5f570">hasBufferedMsg</a>(), <span class="stringliteral">&quot;(1) There are pending messages&quot;</span>);</div>
<div class="line"><span class="lineno">   84</span> </div>
<div class="line"><span class="lineno">   85</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">connect</a>(), <span class="stringliteral">&quot;Server connect works&quot;</span>);</div>
<div class="line"><span class="lineno">   86</span> </div>
<div class="line"><span class="lineno">   87</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac80b4835d858bea27da461b18df5f570">hasBufferedMsg</a>(), <span class="stringliteral">&quot;(2) There are pending messages&quot;</span>);</div>
<div class="line"><span class="lineno">   88</span> </div>
<div class="line"><span class="lineno">   89</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#abb44b529c858ddc1006592e9bac8a815">alive</a>(), <span class="stringliteral">&quot;Alive request works&quot;</span>);</div>
<div class="line"><span class="lineno">   90</span> </div>
<div class="line"><span class="lineno">   91</span>    <span class="comment">// Since old messages must be sent first, the buffer shall be empty now</span></div>
<div class="line"><span class="lineno">   92</span>    TEST_ASSERT_FALSE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac80b4835d858bea27da461b18df5f570">hasBufferedMsg</a>(), <span class="stringliteral">&quot;There are no more pending messages&quot;</span>);</div>
<div class="line"><span class="lineno">   93</span> </div>
<div class="line"><span class="lineno">   94</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a044a94e7220ee295bfab801b6ca32e32">saveBuffer</a>(), <span class="stringliteral">&quot;Saving pending messages works&quot;</span>);</div>
<div class="line"><span class="lineno">   95</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_ac2feade03b2a74a1998dcec282a8eacb"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">fabomatic::BoardLogic::getServer</a></div><div class="ttdeci">auto getServer() -&gt; FabBackend &amp;</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00634">BoardLogic.cpp:634</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a044a94e7220ee295bfab801b6ca32e32"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a044a94e7220ee295bfab801b6ca32e32">fabomatic::FabBackend::saveBuffer</a></div><div class="ttdeci">auto saveBuffer() -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00633">FabBackend.cpp:633</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a1a45f556aadcbc428d14b7c7577ed43d"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">fabomatic::FabBackend::connect</a></div><div class="ttdeci">auto connect() -&gt; bool</div><div class="ttdoc">Establishes a connection to the WiFi network and the MQTT server.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00291">FabBackend.cpp:291</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_abb44b529c858ddc1006592e9bac8a815"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#abb44b529c858ddc1006592e9bac8a815">fabomatic::FabBackend::alive</a></div><div class="ttdeci">auto alive() -&gt; bool</div><div class="ttdoc">Sends a ping to the server.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00573">FabBackend.cpp:573</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_ac80b4835d858bea27da461b18df5f570"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#ac80b4835d858bea27da461b18df5f570">fabomatic::FabBackend::hasBufferedMsg</a></div><div class="ttdeci">auto hasBufferedMsg() const -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00588">FabBackend.cpp:588</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fab_backend_8cpp_source.xhtml#l00573">fabomatic::FabBackend::alive()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00291">fabomatic::FabBackend::connect()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00588">fabomatic::FabBackend::hasBufferedMsg()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, and <a class="el" href="_fab_backend_8cpp_source.xhtml#l00633">fabomatic::FabBackend::saveBuffer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a95c3d2a5cfa25e610ac054894d766f73_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a95c3d2a5cfa25e610ac054894d766f73_icgraph.svg" width="256" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a675dfc88957b4e6871f32187a0da29b2" name="a675dfc88957b4e6871f32187a0da29b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a675dfc88957b4e6871f32187a0da29b2">&#9670;&#160;</a></span>test_create_buffered_messages()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_create_buffered_messages </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   51</span>  {</div>
<div class="line"><span class="lineno">   52</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">   53</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;[uid, level, name] : secrets::cards::whitelist)</div>
<div class="line"><span class="lineno">   54</span>    {</div>
<div class="line"><span class="lineno">   55</span>      <span class="keyword">auto</span> result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a96279ac5e1540441111f7ecb04ba7ce6">startUse</a>(uid);</div>
<div class="line"><span class="lineno">   56</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(1) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   57</span> </div>
<div class="line"><span class="lineno">   58</span>      result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac3065c3c86669065f8ecdd62dfe02772">inUse</a>(uid, 1s);</div>
<div class="line"><span class="lineno">   59</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(2) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   60</span> </div>
<div class="line"><span class="lineno">   61</span>      result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ad74678b61ebbdfe50857e91dad3eb866">finishUse</a>(uid, 2s);</div>
<div class="line"><span class="lineno">   62</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(3) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   63</span> </div>
<div class="line"><span class="lineno">   64</span>      result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a96279ac5e1540441111f7ecb04ba7ce6">startUse</a>(uid);</div>
<div class="line"><span class="lineno">   65</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(4) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   66</span> </div>
<div class="line"><span class="lineno">   67</span>      result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ad74678b61ebbdfe50857e91dad3eb866">finishUse</a>(uid, 3s);</div>
<div class="line"><span class="lineno">   68</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(5) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   69</span> </div>
<div class="line"><span class="lineno">   70</span>      result = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1d2a3a95b98c66db4c9d4fc9c1d401ef">registerMaintenance</a>(uid);</div>
<div class="line"><span class="lineno">   71</span>      TEST_ASSERT_FALSE_MESSAGE(result-&gt;request_ok, <span class="stringliteral">&quot;(6) Request should have failed&quot;</span>);</div>
<div class="line"><span class="lineno">   72</span>    }</div>
<div class="line"><span class="lineno">   73</span>    <span class="comment">// Should have generated 5 * 10 = 50 messages, truncated to 40.</span></div>
<div class="line"><span class="lineno">   74</span> </div>
<div class="line"><span class="lineno">   75</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac80b4835d858bea27da461b18df5f570">hasBufferedMsg</a>(), <span class="stringliteral">&quot;There are pending messages&quot;</span>);</div>
<div class="line"><span class="lineno">   76</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a044a94e7220ee295bfab801b6ca32e32">saveBuffer</a>(), <span class="stringliteral">&quot;Saving pending messages works&quot;</span>);</div>
<div class="line"><span class="lineno">   77</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a1d2a3a95b98c66db4c9d4fc9c1d401ef"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a1d2a3a95b98c66db4c9d4fc9c1d401ef">fabomatic::FabBackend::registerMaintenance</a></div><div class="ttdeci">auto registerMaintenance(const card::uid_t maintainer) -&gt; std::unique_ptr&lt; MQTTInterface::SimpleResponse &gt;</div><div class="ttdoc">Registers a maintenance action.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00563">FabBackend.cpp:563</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a96279ac5e1540441111f7ecb04ba7ce6"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a96279ac5e1540441111f7ecb04ba7ce6">fabomatic::FabBackend::startUse</a></div><div class="ttdeci">auto startUse(const card::uid_t uid) -&gt; std::unique_ptr&lt; MQTTInterface::SimpleResponse &gt;</div><div class="ttdoc">Registers the start of machine usage.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00528">FabBackend.cpp:528</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_ac3065c3c86669065f8ecdd62dfe02772"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#ac3065c3c86669065f8ecdd62dfe02772">fabomatic::FabBackend::inUse</a></div><div class="ttdeci">auto inUse(const card::uid_t uid, std::chrono::seconds duration) -&gt; std::unique_ptr&lt; MQTTInterface::SimpleResponse &gt;</div><div class="ttdoc">Informs the backend that the machine is in use.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00552">FabBackend.cpp:552</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_ad74678b61ebbdfe50857e91dad3eb866"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#ad74678b61ebbdfe50857e91dad3eb866">fabomatic::FabBackend::finishUse</a></div><div class="ttdeci">auto finishUse(const card::uid_t uid, std::chrono::seconds duration) -&gt; std::unique_ptr&lt; MQTTInterface::SimpleResponse &gt;</div><div class="ttdoc">Registers the end of machine usage.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00540">FabBackend.cpp:540</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fab_backend_8cpp_source.xhtml#l00540">fabomatic::FabBackend::finishUse()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00588">fabomatic::FabBackend::hasBufferedMsg()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00552">fabomatic::FabBackend::inUse()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00563">fabomatic::FabBackend::registerMaintenance()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00633">fabomatic::FabBackend::saveBuffer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00528">fabomatic::FabBackend::startUse()</a>, and <a class="el" href="secrets_8hpp_source.xhtml#l00023">fabomatic::secrets::cards::whitelist</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a675dfc88957b4e6871f32187a0da29b2_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a675dfc88957b4e6871f32187a0da29b2_icgraph.svg" width="296" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a6af06470faa8c9455927dad653cba48a" name="a6af06470faa8c9455927dad653cba48a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6af06470faa8c9455927dad653cba48a">&#9670;&#160;</a></span>test_defaults()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_defaults </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   23</span>  {</div>
<div class="line"><span class="lineno">   24</span>    <a class="code hl_class" href="classfabomatic_1_1_saved_config.xhtml">SavedConfig</a> config;</div>
<div class="line"><span class="lineno">   25</span>    <span class="keyword">auto</span> defaults = SavedConfig::DefaultConfig();</div>
<div class="line"><span class="lineno">   26</span>    TEST_ASSERT_TRUE_MESSAGE(SavedConfig::MAGIC_NUMBER == defaults.magic_number, <span class="stringliteral">&quot;Default config magic number mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   27</span> </div>
<div class="line"><span class="lineno">   28</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.SaveToEEPROM(), <span class="stringliteral">&quot;Default config save failed&quot;</span>);</div>
<div class="line"><span class="lineno">   29</span> </div>
<div class="line"><span class="lineno">   30</span>    <span class="keyword">auto</span> result = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">   31</span>    TEST_ASSERT_TRUE_MESSAGE(result.has_value(), <span class="stringliteral">&quot;Loaded config is empty&quot;</span>);</div>
<div class="line"><span class="lineno">   32</span>    <span class="keyword">auto</span> loaded = result.value();</div>
<div class="line"><span class="lineno">   33</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.ssid == loaded.ssid, <span class="stringliteral">&quot;Loaded config ssid mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   34</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.password == loaded.password, <span class="stringliteral">&quot;Loaded config password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   35</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.mqtt_server == loaded.mqtt_server, <span class="stringliteral">&quot;Loaded config mqtt_server mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   36</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.mqtt_user == loaded.mqtt_user, <span class="stringliteral">&quot;Loaded config mqtt_user mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   37</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.mqtt_password == loaded.mqtt_password, <span class="stringliteral">&quot;Loaded config mqtt_password mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   38</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.mqtt_switch_topic == loaded.mqtt_switch_topic, <span class="stringliteral">&quot;Loaded config mqtt_switch_topic mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   39</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.machine_id == loaded.machine_id, <span class="stringliteral">&quot;Loaded config machine_id mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   40</span>    TEST_ASSERT_TRUE_MESSAGE(SavedConfig::MAGIC_NUMBER == loaded.magic_number, <span class="stringliteral">&quot;Loaded config magic number mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   41</span> </div>
<div class="line"><span class="lineno">   42</span>    <span class="comment">// Test set and get methods</span></div>
<div class="line"><span class="lineno">   43</span>    <span class="keyword">auto</span> <span class="keywordtype">id</span> = <a class="code hl_struct" href="struct_machine_i_d.xhtml">MachineID</a>(123);</div>
<div class="line"><span class="lineno">   44</span>    loaded.setMachineID(<span class="keywordtype">id</span>);</div>
<div class="line"><span class="lineno">   45</span>    TEST_ASSERT_TRUE_MESSAGE(<span class="keywordtype">id</span> == loaded.getMachineID(), <span class="stringliteral">&quot;Loaded config machine_id mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">   46</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_saved_config_xhtml"><div class="ttname"><a href="classfabomatic_1_1_saved_config.xhtml">fabomatic::SavedConfig</a></div><div class="ttdoc">Facility to load or save data from Flash.</div><div class="ttdef"><b>Definition</b> <a href="_saved_config_8hpp_source.xhtml#l00020">SavedConfig.hpp:21</a></div></div>
<div class="ttc" id="astruct_machine_i_d_xhtml"><div class="ttname"><a href="struct_machine_i_d.xhtml">MachineID</a></div><div class="ttdoc">The unique machine identifier for the backend.</div><div class="ttdef"><b>Definition</b> <a href="_machine_i_d_8hpp_source.xhtml#l00019">MachineID.hpp:20</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_saved_config_8cpp_source.xhtml#l00028">fabomatic::SavedConfig::DefaultConfig()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, and <a class="el" href="_saved_config_8hpp_source.xhtml#l00038">fabomatic::SavedConfig::MAGIC_NUMBER</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00318">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6af06470faa8c9455927dad653cba48a_cgraph.svg" width="563" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6af06470faa8c9455927dad653cba48a_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a70d156a8423b7e9d4db345cff5eb528f" name="a70d156a8423b7e9d4db345cff5eb528f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70d156a8423b7e9d4db345cff5eb528f">&#9670;&#160;</a></span>test_deserialization()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fabomatic::tests::test_deserialization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classfabomatic_1_1_buffer.xhtml">Buffer</a> &amp;&#160;</td>
          <td class="paramname"><em>buff</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  174</span>  {</div>
<div class="line"><span class="lineno">  175</span>    JsonDocument json_doc;</div>
<div class="line"><span class="lineno">  176</span>    buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a72f029c82552ccea45eaf611f345c079">toJson</a>(json_doc, <span class="stringliteral">&quot;message_buffer&quot;</span>);</div>
<div class="line"><span class="lineno">  177</span>    std::string json_text;</div>
<div class="line"><span class="lineno">  178</span>    <span class="keyword">auto</span> chars = serializeJson(json_doc, json_text);</div>
<div class="line"><span class="lineno">  179</span>    TEST_ASSERT_GREATER_THAN_MESSAGE(0, chars, <span class="stringliteral">&quot;Non empty JSON text&quot;</span>);</div>
<div class="line"><span class="lineno">  180</span> </div>
<div class="line"><span class="lineno">  181</span>    ESP_LOGD(<a class="code hl_variable" href="_logging_8hpp.xhtml#a4ef5b5f197804a60836ab1e8907d8301">TAG</a>, <span class="stringliteral">&quot;test_deserialization: json_text:%s&quot;</span>, json_text.c_str());</div>
<div class="line"><span class="lineno">  182</span> </div>
<div class="line"><span class="lineno">  183</span>    <span class="keyword">auto</span> result = Buffer::fromJsonElement(json_doc[<span class="stringliteral">&quot;message_buffer&quot;</span>]);</div>
<div class="line"><span class="lineno">  184</span>    TEST_ASSERT_TRUE_MESSAGE(result.has_value(), <span class="stringliteral">&quot;Deserialization succeeds&quot;</span>);</div>
<div class="line"><span class="lineno">  185</span> </div>
<div class="line"><span class="lineno">  186</span>    <span class="keyword">auto</span> &amp;new_buff = result.value();</div>
<div class="line"><span class="lineno">  187</span> </div>
<div class="line"><span class="lineno">  188</span>    TEST_ASSERT_EQUAL_MESSAGE(buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a9ff239a0ddbaed54bcf0a72f2517d7a0">count</a>(), new_buff.count(), <span class="stringliteral">&quot;Messages are lost in json&quot;</span>);</div>
<div class="line"><span class="lineno">  189</span> </div>
<div class="line"><span class="lineno">  190</span>    <span class="keywordflow">while</span> (new_buff.count() &gt; 0)</div>
<div class="line"><span class="lineno">  191</span>    {</div>
<div class="line"><span class="lineno">  192</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;msg_new = new_buff.getMessage();</div>
<div class="line"><span class="lineno">  193</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;msg_old = buff.<a class="code hl_function" href="classfabomatic_1_1_buffer.xhtml#a6301e1ea47622d36474ee031a17b9bb4">getMessage</a>();</div>
<div class="line"><span class="lineno">  194</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(msg_new.mqtt_message.c_str(), msg_old.mqtt_message.c_str(), <span class="stringliteral">&quot;Messages are in different order or damaged&quot;</span>);</div>
<div class="line"><span class="lineno">  195</span>      TEST_ASSERT_EQUAL_STRING_MESSAGE(msg_new.mqtt_topic.c_str(), msg_old.mqtt_topic.c_str(), <span class="stringliteral">&quot;Topics are in different order or damaged&quot;</span>);</div>
<div class="line"><span class="lineno">  196</span>      TEST_ASSERT_EQUAL_MESSAGE(msg_new.wait_for_answer, msg_old.wait_for_answer, <span class="stringliteral">&quot;Wait flags are in different order or damaged&quot;</span>);</div>
<div class="line"><span class="lineno">  197</span>    }</div>
<div class="line"><span class="lineno">  198</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  199</span>  }</div>
<div class="ttc" id="a_logging_8hpp_xhtml_a4ef5b5f197804a60836ab1e8907d8301"><div class="ttname"><a href="_logging_8hpp.xhtml#a4ef5b5f197804a60836ab1e8907d8301">TAG</a></div><div class="ttdeci">static const char *const TAG</div><div class="ttdef"><b>Definition</b> <a href="_logging_8hpp_source.xhtml#l00009">Logging.hpp:9</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_buffer_xhtml_a72f029c82552ccea45eaf611f345c079"><div class="ttname"><a href="classfabomatic_1_1_buffer.xhtml#a72f029c82552ccea45eaf611f345c079">fabomatic::Buffer::toJson</a></div><div class="ttdeci">auto toJson(JsonDocument &amp;doc, const std::string &amp;element_name) const -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_buffered_msg_8cpp_source.xhtml#l00068">BufferedMsg.cpp:68</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00063">fabomatic::Buffer::count()</a>, <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00083">fabomatic::Buffer::fromJsonElement()</a>, <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00048">fabomatic::Buffer::getMessage()</a>, <a class="el" href="_logging_8hpp_source.xhtml#l00009">TAG</a>, and <a class="el" href="_buffered_msg_8cpp_source.xhtml#l00068">fabomatic::Buffer::toJson()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00201">test_buffered_msg()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a70d156a8423b7e9d4db345cff5eb528f_cgraph.svg" width="498" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a70d156a8423b7e9d4db345cff5eb528f_icgraph.svg" width="443" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af8fcb20d2ec63b73e90dff80564bca07" name="af8fcb20d2ec63b73e90dff80564bca07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8fcb20d2ec63b73e90dff80564bca07">&#9670;&#160;</a></span>test_esp32()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_esp32 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  134</span>  {</div>
<div class="line"><span class="lineno">  135</span>    <span class="keyword">auto</span> result = <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">fabomatic::esp32::esp_serial</a>();</div>
<div class="line"><span class="lineno">  136</span>    TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(0, result.length(), <span class="stringliteral">&quot;ESP32 serial must be non empty&quot;</span>);</div>
<div class="line"><span class="lineno">  137</span>    <span class="keyword">auto</span> mem_free = <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">fabomatic::esp32::getFreeHeap</a>();</div>
<div class="line"><span class="lineno">  138</span>    TEST_ASSERT_GREATER_OR_EQUAL_UINT32_MESSAGE(0, mem_free, <span class="stringliteral">&quot;ESP32 mem free must be &gt; 0&quot;</span>);</div>
<div class="line"><span class="lineno">  139</span>    <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a5f5bb4a72418870dbcddd266b5bb0fcd">fabomatic::esp32::showHeapStats</a>();</div>
<div class="line"><span class="lineno">  140</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#a8bec49abfae47da0cadccb6e486f69bb">fabomatic::esp32::setupWatchdog</a>(30s), <span class="stringliteral">&quot;Watchdog setup&quot;</span>);</div>
<div class="line"><span class="lineno">  141</span>    <a class="code hl_function" href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">fabomatic::esp32::removeWatchdog</a>();</div>
<div class="line"><span class="lineno">  142</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a07750a641e5cfe3207bbdf72813af628"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a07750a641e5cfe3207bbdf72813af628">fabomatic::esp32::getFreeHeap</a></div><div class="ttdeci">auto getFreeHeap() -&gt; uint32_t</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00088">Espressif.cpp:88</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a5f5bb4a72418870dbcddd266b5bb0fcd"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a5f5bb4a72418870dbcddd266b5bb0fcd">fabomatic::esp32::showHeapStats</a></div><div class="ttdeci">void showHeapStats()</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00015">Espressif.cpp:15</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_a8bec49abfae47da0cadccb6e486f69bb"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#a8bec49abfae47da0cadccb6e486f69bb">fabomatic::esp32::setupWatchdog</a></div><div class="ttdeci">auto setupWatchdog(std::chrono::milliseconds msecs) -&gt; bool</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00032">Espressif.cpp:32</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ac8d867c42c073a3e44e6292db72e1f94"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ac8d867c42c073a3e44e6292db72e1f94">fabomatic::esp32::esp_serial</a></div><div class="ttdeci">auto esp_serial() -&gt; const std::string_view</div><div class="ttdoc">Returns the ESP32 serial number as a string.</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00067">Espressif.cpp:67</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1esp32_xhtml_ae78a1408710128cb446f2cde991017dd"><div class="ttname"><a href="namespacefabomatic_1_1esp32.xhtml#ae78a1408710128cb446f2cde991017dd">fabomatic::esp32::removeWatchdog</a></div><div class="ttdeci">auto removeWatchdog() -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_espressif_8cpp_source.xhtml#l00061">Espressif.cpp:61</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_espressif_8cpp_source.xhtml#l00067">fabomatic::esp32::esp_serial()</a>, <a class="el" href="_espressif_8cpp_source.xhtml#l00088">fabomatic::esp32::getFreeHeap()</a>, <a class="el" href="_espressif_8cpp_source.xhtml#l00061">fabomatic::esp32::removeWatchdog()</a>, <a class="el" href="_espressif_8cpp_source.xhtml#l00032">fabomatic::esp32::setupWatchdog()</a>, and <a class="el" href="_espressif_8cpp_source.xhtml#l00015">fabomatic::esp32::showHeapStats()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00145">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af8fcb20d2ec63b73e90dff80564bca07_cgraph.svg" width="632" height="268"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af8fcb20d2ec63b73e90dff80564bca07_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4bfe59139821e4fd59963629dc052483" name="a4bfe59139821e4fd59963629dc052483"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bfe59139821e4fd59963629dc052483">&#9670;&#160;</a></span>test_execute_runs_all_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_execute_runs_all_tasks </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   85</span>  {</div>
<div class="line"><span class="lineno">   86</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a9bbef7cf45ab43901130143647b0f495">create_tasks</a>(scheduler, 150ms);</div>
<div class="line"><span class="lineno">   87</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a203784237087f7f1b0b77c15bcdb85f9">taskCount</a>(), <span class="stringliteral">&quot;Scheduler does not contain all tasks&quot;</span>);</div>
<div class="line"><span class="lineno">   88</span> </div>
<div class="line"><span class="lineno">   89</span>    scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a2acce29901dbfd56a0f49beb277e3e76">updateSchedules</a>();</div>
<div class="line"><span class="lineno">   90</span> </div>
<div class="line"><span class="lineno">   91</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a437b3023f617a6c0c675e6484f85ba50">run_for_duration</a>(execute, 140ms);</div>
<div class="line"><span class="lineno">   92</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, task_counter, <span class="stringliteral">&quot;All tasks were not called once in 140 ms&quot;</span>);</div>
<div class="line"><span class="lineno">   93</span> </div>
<div class="line"><span class="lineno">   94</span>    delay(50);</div>
<div class="line"><span class="lineno">   95</span> </div>
<div class="line"><span class="lineno">   96</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#ae44a848faed425990c1a0e33a85c587c">task_counter</a> = 0;</div>
<div class="line"><span class="lineno">   97</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a437b3023f617a6c0c675e6484f85ba50">run_for_duration</a>(execute, 100ms);</div>
<div class="line"><span class="lineno">   98</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, task_counter, <span class="stringliteral">&quot;All tasks were not called once again after 150 ms&quot;</span>);</div>
<div class="line"><span class="lineno">   99</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_tasks_1_1_scheduler_xhtml_a203784237087f7f1b0b77c15bcdb85f9"><div class="ttname"><a href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a203784237087f7f1b0b77c15bcdb85f9">fabomatic::Tasks::Scheduler::taskCount</a></div><div class="ttdeci">auto taskCount() const -&gt; size_t</div><div class="ttdoc">Gets the number of tasks in the scheduler.</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8cpp_source.xhtml#l00105">Tasks.cpp:105</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_tasks_1_1_scheduler_xhtml_a2acce29901dbfd56a0f49beb277e3e76"><div class="ttname"><a href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a2acce29901dbfd56a0f49beb277e3e76">fabomatic::Tasks::Scheduler::updateSchedules</a></div><div class="ttdeci">auto updateSchedules() const -&gt; void</div><div class="ttdoc">Recompute all the next run times for all the tasks.</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8cpp_source.xhtml#l00032">Tasks.cpp:32</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a437b3023f617a6c0c675e6484f85ba50"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a437b3023f617a6c0c675e6484f85ba50">fabomatic::tests::run_for_duration</a></div><div class="ttdeci">void run_for_duration(std::function&lt; void()&gt; callback, std::chrono::milliseconds duration)</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00070">test_tasks.cpp:70</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a9bbef7cf45ab43901130143647b0f495"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a9bbef7cf45ab43901130143647b0f495">fabomatic::tests::create_tasks</a></div><div class="ttdeci">void create_tasks(Scheduler &amp;scheduler, std::chrono::milliseconds period)</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00045">test_tasks.cpp:45</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00025">execute</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00020">NB_TASKS</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00070">run_for_duration()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00024">scheduler</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00023">task_counter</a>, <a class="el" href="_tasks_8cpp_source.xhtml#l00105">fabomatic::Tasks::Scheduler::taskCount()</a>, and <a class="el" href="_tasks_8cpp_source.xhtml#l00032">fabomatic::Tasks::Scheduler::updateSchedules()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00145">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a4bfe59139821e4fd59963629dc052483_cgraph.svg" width="100%" height="477"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a4bfe59139821e4fd59963629dc052483_icgraph.svg" width="276" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a438b9060c27d36e89506199205b342cb" name="a438b9060c27d36e89506199205b342cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a438b9060c27d36e89506199205b342cb">&#9670;&#160;</a></span>test_fabserver_calls()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_fabserver_calls </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00133">133</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  134</span>  {</div>
<div class="line"><span class="lineno">  135</span>    <span class="keyword">const</span> <span class="keywordtype">int</span> NB_TESTS = 10;</div>
<div class="line"><span class="lineno">  136</span>    <span class="keyword">const</span> <span class="keywordtype">int</span> NB_MACHINES = 5;</div>
<div class="line"><span class="lineno">  137</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">  138</span>    <span class="keywordflow">for</span> (uint16_t mid = 100; mid &lt;= 100 + NB_MACHINES; mid++)</div>
<div class="line"><span class="lineno">  139</span>    {</div>
<div class="line"><span class="lineno">  140</span>      <span class="comment">// Change MachineID on the fly</span></div>
<div class="line"><span class="lineno">  141</span>      <span class="keyword">auto</span> saved_config = SavedConfig::DefaultConfig();</div>
<div class="line"><span class="lineno">  142</span> </div>
<div class="line"><span class="lineno">  143</span>      saved_config.setMachineID(mid);</div>
<div class="line"><span class="lineno">  144</span>      saved_config.mqtt_server.assign(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line"><span class="lineno">  145</span> </div>
<div class="line"><span class="lineno">  146</span>      ESP_LOGI(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;Testing machine %d&quot;</span>, mid);</div>
<div class="line"><span class="lineno">  147</span>      server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#acf5644d920896038018f990568e710c3">configure</a>(saved_config);</div>
<div class="line"><span class="lineno">  148</span> </div>
<div class="line"><span class="lineno">  149</span>      <span class="keyword">auto</span> connected = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">  150</span>      <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; 3; i++)</div>
<div class="line"><span class="lineno">  151</span>      {</div>
<div class="line"><span class="lineno">  152</span>        server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ad558116614ee45601f4665d395838727">disconnect</a>(); <span class="comment">// Force disconnect</span></div>
<div class="line"><span class="lineno">  153</span>        <span class="keywordflow">if</span> (connected |= server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">connect</a>())</div>
<div class="line"><span class="lineno">  154</span>        {</div>
<div class="line"><span class="lineno">  155</span>          <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  156</span>        }</div>
<div class="line"><span class="lineno">  157</span>      }</div>
<div class="line"><span class="lineno">  158</span> </div>
<div class="line"><span class="lineno">  159</span>      TEST_ASSERT_TRUE_MESSAGE(connected, <span class="stringliteral">&quot;Server connect failed&quot;</span>);</div>
<div class="line"><span class="lineno">  160</span>      TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">isOnline</a>(), <span class="stringliteral">&quot;Server is not online&quot;</span>);</div>
<div class="line"><span class="lineno">  161</span> </div>
<div class="line"><span class="lineno">  162</span>      <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; NB_TESTS; ++i)</div>
<div class="line"><span class="lineno">  163</span>      {</div>
<div class="line"><span class="lineno">  164</span>        server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aaf05998bb9dec17ae98283969109bb2d">loop</a>();</div>
<div class="line"><span class="lineno">  165</span>        card::uid_t uid = 123456789 + i;</div>
<div class="line"><span class="lineno">  166</span>        <span class="keyword">auto</span> response = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a0e4d6d289b03582bf6ea9e78e15dd79e">checkCard</a>(uid);</div>
<div class="line"><span class="lineno">  167</span>        TEST_ASSERT_TRUE_MESSAGE(response != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server checkCard failed&quot;</span>);</div>
<div class="line"><span class="lineno">  168</span>        ESP_LOGD(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;Server checkCard response: %s&quot;</span>, response-&gt;toString().c_str());</div>
<div class="line"><span class="lineno">  169</span>        TEST_ASSERT_TRUE_MESSAGE(response-&gt;request_ok, <span class="stringliteral">&quot;Server checkCard request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  170</span> </div>
<div class="line"><span class="lineno">  171</span>        <span class="keyword">auto</span> machine_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a215d08460a8df6f20223a07b1e756332">checkMachine</a>(); <span class="comment">// Machine ID is in the topic already</span></div>
<div class="line"><span class="lineno">  172</span>        TEST_ASSERT_TRUE_MESSAGE(machine_resp != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server checkMachine failed&quot;</span>);</div>
<div class="line"><span class="lineno">  173</span>        TEST_ASSERT_TRUE_MESSAGE(machine_resp-&gt;request_ok, <span class="stringliteral">&quot;Server checkMachine request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  174</span>        <span class="keyword">auto</span> maintenance_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1d2a3a95b98c66db4c9d4fc9c1d401ef">registerMaintenance</a>(uid);</div>
<div class="line"><span class="lineno">  175</span>        TEST_ASSERT_TRUE_MESSAGE(maintenance_resp != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server registerMaintenance failed&quot;</span>);</div>
<div class="line"><span class="lineno">  176</span>        TEST_ASSERT_TRUE_MESSAGE(maintenance_resp-&gt;request_ok, <span class="stringliteral">&quot;Server registerMaintenance request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  177</span>        <span class="keyword">auto</span> start_use_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a96279ac5e1540441111f7ecb04ba7ce6">startUse</a>(uid);</div>
<div class="line"><span class="lineno">  178</span>        TEST_ASSERT_TRUE_MESSAGE(start_use_resp != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server startUse failed&quot;</span>);</div>
<div class="line"><span class="lineno">  179</span>        TEST_ASSERT_TRUE_MESSAGE(start_use_resp-&gt;request_ok, <span class="stringliteral">&quot;Server startUse request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  180</span>        <span class="keyword">auto</span> in_use_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ac3065c3c86669065f8ecdd62dfe02772">inUse</a>(uid, 5s);</div>
<div class="line"><span class="lineno">  181</span>        TEST_ASSERT_TRUE_MESSAGE(in_use_resp != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server inUse failed&quot;</span>);</div>
<div class="line"><span class="lineno">  182</span>        TEST_ASSERT_TRUE_MESSAGE(in_use_resp-&gt;request_ok, <span class="stringliteral">&quot;Server inUse request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  183</span>        <span class="keyword">auto</span> stop_use_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ad74678b61ebbdfe50857e91dad3eb866">finishUse</a>(uid, 10s);</div>
<div class="line"><span class="lineno">  184</span>        TEST_ASSERT_TRUE_MESSAGE(stop_use_resp != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;Server stopUse failed&quot;</span>);</div>
<div class="line"><span class="lineno">  185</span>        TEST_ASSERT_TRUE_MESSAGE(stop_use_resp-&gt;request_ok, <span class="stringliteral">&quot;Server stopUse request failed&quot;</span>);</div>
<div class="line"><span class="lineno">  186</span>        <span class="keyword">auto</span> alive_resp = server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#abb44b529c858ddc1006592e9bac8a815">alive</a>();</div>
<div class="line"><span class="lineno">  187</span>        TEST_ASSERT_TRUE_MESSAGE(alive_resp, <span class="stringliteral">&quot;Server alive failed&quot;</span>);</div>
<div class="line"><span class="lineno">  188</span>      }</div>
<div class="line"><span class="lineno">  189</span>    }</div>
<div class="line"><span class="lineno">  190</span>    <span class="comment">// Test authentication in online scenario</span></div>
<div class="line"><span class="lineno">  191</span>    AuthProvider auth(secrets::cards::whitelist);</div>
<div class="line"><span class="lineno">  192</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="namespacefabomatic_1_1_board.xhtml#a57517d1e4e586f81a847e56fc92678bc">server</a>.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">connect</a>(), <span class="stringliteral">&quot;Server is online&quot;</span>);</div>
<div class="line"><span class="lineno">  193</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;[uid, level, name] : secrets::cards::whitelist)</div>
<div class="line"><span class="lineno">  194</span>    {</div>
<div class="line"><span class="lineno">  195</span>      <a class="code hl_variable" href="namespacefabomatic_1_1_board.xhtml#a57517d1e4e586f81a847e56fc92678bc">server</a>.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aaf05998bb9dec17ae98283969109bb2d">loop</a>();</div>
<div class="line"><span class="lineno">  196</span>      <span class="keyword">auto</span> response = auth.tryLogin(uid, server);</div>
<div class="line"><span class="lineno">  197</span>      TEST_ASSERT_TRUE_MESSAGE(response.has_value(), <span class="stringliteral">&quot;Server checkCard failed&quot;</span>);</div>
<div class="line"><span class="lineno">  198</span>      <span class="keywordflow">if</span> (level == FabUser::UserLevel::Unknown)</div>
<div class="line"><span class="lineno">  199</span>      {</div>
<div class="line"><span class="lineno">  200</span>        TEST_ASSERT_FALSE_MESSAGE(response.value().authenticated, <span class="stringliteral">&quot;Server returned authenticated user for invalid one&quot;</span>);</div>
<div class="line"><span class="lineno">  201</span>      }</div>
<div class="line"><span class="lineno">  202</span>      <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  203</span>      {</div>
<div class="line"><span class="lineno">  204</span>        TEST_ASSERT_TRUE_MESSAGE(response.value().authenticated, <span class="stringliteral">&quot;Server returned unauthenticated user for a valid one&quot;</span>);</div>
<div class="line"><span class="lineno">  205</span>        TEST_ASSERT_TRUE_MESSAGE(response.value().user_level == level, <span class="stringliteral">&quot;Server returned wrong user level&quot;</span>);</div>
<div class="line"><span class="lineno">  206</span>      }</div>
<div class="line"><span class="lineno">  207</span>    }</div>
<div class="line"><span class="lineno">  208</span>    <span class="comment">// Test that saving the cache works</span></div>
<div class="line"><span class="lineno">  209</span>    TEST_ASSERT_TRUE_MESSAGE(auth.saveCache(), <span class="stringliteral">&quot;AuthProvider saveCache failed&quot;</span>);</div>
<div class="line"><span class="lineno">  210</span> </div>
<div class="line"><span class="lineno">  211</span>    <span class="comment">// Test that the cache contains all the valid whitelist entries</span></div>
<div class="line"><span class="lineno">  212</span>    <span class="keyword">auto</span> cached_entries = SavedConfig::LoadFromEEPROM().value().cachedRfid;</div>
<div class="line"><span class="lineno">  213</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;[uid, level, name] : secrets::cards::whitelist)</div>
<div class="line"><span class="lineno">  214</span>    {</div>
<div class="line"><span class="lineno">  215</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cached_card = cached_entries.find_uid(uid);</div>
<div class="line"><span class="lineno">  216</span>      TEST_ASSERT_TRUE_MESSAGE(cached_card || level == FabUser::UserLevel::Unknown,</div>
<div class="line"><span class="lineno">  217</span>                               <span class="stringliteral">&quot;AuthProvider saveCache failed to save all whitelist entries&quot;</span>);</div>
<div class="line"><span class="lineno">  218</span>    }</div>
<div class="line"><span class="lineno">  219</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a0e4d6d289b03582bf6ea9e78e15dd79e"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a0e4d6d289b03582bf6ea9e78e15dd79e">fabomatic::FabBackend::checkCard</a></div><div class="ttdeci">auto checkCard(const card::uid_t uid) -&gt; std::unique_ptr&lt; MQTTInterface::UserResponse &gt;</div><div class="ttdoc">Checks if the card ID is known to the server.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00507">FabBackend.cpp:507</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a215d08460a8df6f20223a07b1e756332"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a215d08460a8df6f20223a07b1e756332">fabomatic::FabBackend::checkMachine</a></div><div class="ttdeci">auto checkMachine() -&gt; std::unique_ptr&lt; MQTTInterface::MachineResponse &gt;</div><div class="ttdoc">Checks the machine status on the server.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00517">FabBackend.cpp:517</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_aaf05998bb9dec17ae98283969109bb2d"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#aaf05998bb9dec17ae98283969109bb2d">fabomatic::FabBackend::loop</a></div><div class="ttdeci">auto loop() -&gt; bool</div><div class="ttdoc">Main loop for the MQTT client.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00184">FabBackend.cpp:184</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_acf5644d920896038018f990568e710c3"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#acf5644d920896038018f990568e710c3">fabomatic::FabBackend::configure</a></div><div class="ttdeci">auto configure(const SavedConfig &amp;config) -&gt; void</div><div class="ttdoc">Configures the FabBackend with the given configuration.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00021">FabBackend.cpp:21</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_ad558116614ee45601f4665d395838727"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#ad558116614ee45601f4665d395838727">fabomatic::FabBackend::disconnect</a></div><div class="ttdeci">auto disconnect() -&gt; void</div><div class="ttdoc">Disconnects from the MQTT server.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00386">FabBackend.cpp:386</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_aef092e0e1db0c3539d5474fad2456255"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">fabomatic::FabBackend::isOnline</a></div><div class="ttdeci">auto isOnline() const -&gt; bool</div><div class="ttdoc">Checks if the client is online.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00235">FabBackend.cpp:235</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1_board_xhtml_a57517d1e4e586f81a847e56fc92678bc"><div class="ttname"><a href="namespacefabomatic_1_1_board.xhtml#a57517d1e4e586f81a847e56fc92678bc">fabomatic::Board::server</a></div><div class="ttdeci">FabBackend server</div></div>
<div class="ttc" id="atest__mqtt_8cpp_xhtml_a61fc6209a48e9414bc6f6dff41c34f09"><div class="ttname"><a href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a></div><div class="ttdeci">static const char * TAG3</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00027">test_mqtt.cpp:27</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_fab_backend_8cpp_source.xhtml#l00573">fabomatic::FabBackend::alive()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00507">fabomatic::FabBackend::checkCard()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00517">fabomatic::FabBackend::checkMachine()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00021">fabomatic::FabBackend::configure()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00291">fabomatic::FabBackend::connect()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00028">fabomatic::SavedConfig::DefaultConfig()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00386">fabomatic::FabBackend::disconnect()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00540">fabomatic::FabBackend::finishUse()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00552">fabomatic::FabBackend::inUse()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00235">fabomatic::FabBackend::isOnline()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00184">fabomatic::FabBackend::loop()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00563">fabomatic::FabBackend::registerMaintenance()</a>, <a class="el" href="_auth_provider_8cpp_source.xhtml#l00183">fabomatic::AuthProvider::saveCache()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00528">fabomatic::FabBackend::startUse()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>, <a class="el" href="_auth_provider_8cpp_source.xhtml#l00054">fabomatic::AuthProvider::tryLogin()</a>, <a class="el" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">fabomatic::FabUser::Unknown</a>, and <a class="el" href="secrets_8hpp_source.xhtml#l00023">fabomatic::secrets::cards::whitelist</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a438b9060c27d36e89506199205b342cb_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a438b9060c27d36e89506199205b342cb_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a558e2287db01a4622581246a19dac397" name="a558e2287db01a4622581246a19dac397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a558e2287db01a4622581246a19dac397">&#9670;&#160;</a></span>test_machine_allowed()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_machine_allowed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00290">290</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  291</span>  {</div>
<div class="line"><span class="lineno">  292</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>);</div>
<div class="line"><span class="lineno">  293</span> </div>
<div class="line"><span class="lineno">  294</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>();</div>
<div class="line"><span class="lineno">  295</span>    <span class="keyword">auto</span> card_fabuser = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(3);</div>
<div class="line"><span class="lineno">  296</span>    <span class="keyword">auto</span> card_admin = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0);</div>
<div class="line"><span class="lineno">  297</span> </div>
<div class="line"><span class="lineno">  298</span>    machine.setAllowed(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  299</span>    machine.setMaintenanceNeeded(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  300</span> </div>
<div class="line"><span class="lineno">  301</span>    <span class="comment">// check if blocked for normal users</span></div>
<div class="line"><span class="lineno">  302</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_fabuser);</div>
<div class="line"><span class="lineno">  303</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">BoardLogic::Status::NotAllowed</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not NotAllowed&quot;</span>);</div>
<div class="line"><span class="lineno">  304</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  305</span> </div>
<div class="line"><span class="lineno">  306</span>    <span class="comment">// still blocked for admins</span></div>
<div class="line"><span class="lineno">  307</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_admin);</div>
<div class="line"><span class="lineno">  308</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">BoardLogic::Status::NotAllowed</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not NotAllowed for admins&quot;</span>);</div>
<div class="line"><span class="lineno">  309</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  310</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">fabomatic::BoardLogic::Status::NotAllowed</a></div><div class="ttdeci">@ NotAllowed</div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a6a7645a865dc822746f972ea6f43224d"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">fabomatic::tests::machine_init</a></div><div class="ttdeci">void machine_init(BoardLogic &amp;logic, RFIDWrapper&lt; MockMrfc522 &gt; &amp;rfid)</div><div class="ttdoc">Resets machine to initial state, clearing flags.</div><div class="ttdef"><b>Definition</b> <a href="test__common_8cpp_source.xhtml#l00051">test_common.cpp:51</a></div></div>
<div class="ttc" id="atest__logic_8cpp_xhtml_aef0e78ba3db8c253be4c46687c3c800c"><div class="ttname"><a href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a></div><div class="ttdeci">constexpr fabomatic::card::uid_t get_test_uid(size_t idx)</div><div class="ttdef"><b>Definition</b> <a href="test__logic_8cpp_source.xhtml#l00033">test_logic.cpp:33</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00587">fabomatic::BoardLogic::getMachineForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">fabomatic::BoardLogic::NotAllowed</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a558e2287db01a4622581246a19dac397_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a558e2287db01a4622581246a19dac397_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a574e0054ef8ba573fc2efd53600b0ec4" name="a574e0054ef8ba573fc2efd53600b0ec4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a574e0054ef8ba573fc2efd53600b0ec4">&#9670;&#160;</a></span>test_machine_defaults()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_machine_defaults </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00041">41</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   42</span>  {</div>
<div class="line"><span class="lineno">   43</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>();</div>
<div class="line"><span class="lineno">   44</span> </div>
<div class="line"><span class="lineno">   45</span>    TEST_ASSERT_TRUE_MESSAGE(machine.isConfigured(), <span class="stringliteral">&quot;Machine not configured&quot;</span>);</div>
<div class="line"><span class="lineno">   46</span> </div>
<div class="line"><span class="lineno">   47</span>    <span class="keyword">auto</span> config_req = machine.getConfig();</div>
<div class="line"><span class="lineno">   48</span>    TEST_ASSERT_TRUE_MESSAGE(config_req.has_value(), <span class="stringliteral">&quot;Machine config not available&quot;</span>);</div>
<div class="line"><span class="lineno">   49</span> </div>
<div class="line"><span class="lineno">   50</span>    <span class="keyword">auto</span> config = config_req.value();</div>
<div class="line"><span class="lineno">   51</span> </div>
<div class="line"><span class="lineno">   52</span>    <span class="keyword">auto</span> result = machine.getMachineId().id == <a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1default__config.xhtml#a6c7775af29f012f0623c8898f1998ea1">fabomatic::conf::default_config::machine_id</a>.<a class="code hl_variable" href="struct_machine_i_d.xhtml#a4be27146270f5fccce68f1c8b951b1d8">id</a>;</div>
<div class="line"><span class="lineno">   53</span>    TEST_ASSERT_TRUE_MESSAGE(result, <span class="stringliteral">&quot;Machine ID not per default configuration&quot;</span>);</div>
<div class="line"><span class="lineno">   54</span> </div>
<div class="line"><span class="lineno">   55</span>    result = machine.getMachineName() == <a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1default__config.xhtml#a2a77484183bbfbb6330615405509a615">fabomatic::conf::default_config::machine_name</a>;</div>
<div class="line"><span class="lineno">   56</span>    TEST_ASSERT_TRUE_MESSAGE(result, <span class="stringliteral">&quot;Machine Name not per default configuration&quot;</span>);</div>
<div class="line"><span class="lineno">   57</span> </div>
<div class="line"><span class="lineno">   58</span>    result = machine.getAutologoffDelay() == <a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1machine.xhtml#ad6ef16188656c4ca243871b47ae55f33">fabomatic::conf::machine::DEFAULT_AUTO_LOGOFF_DELAY</a>;</div>
<div class="line"><span class="lineno">   59</span>    TEST_ASSERT_TRUE_MESSAGE(result, <span class="stringliteral">&quot;Machine autologoff delay not per default configuration&quot;</span>);</div>
<div class="line"><span class="lineno">   60</span> </div>
<div class="line"><span class="lineno">   61</span>    result = machine.toString().length() &gt; 0;</div>
<div class="line"><span class="lineno">   62</span>    TEST_ASSERT_TRUE_MESSAGE(result, <span class="stringliteral">&quot;Machine toString() failed&quot;</span>);</div>
<div class="line"><span class="lineno">   63</span> </div>
<div class="line"><span class="lineno">   64</span>    TEST_ASSERT_TRUE_MESSAGE(config.hasRelay() || <a class="code hl_variable" href="namespacefabomatic.xhtml#a90e4180ab5a1ffd3393b4f0d6b01f2b3">fabomatic::pins</a>.<a class="code hl_variable" href="structfabomatic_1_1pins__config.xhtml#a310be8cfdd1f9617522c2eb0dd02f252">relay</a>.<a class="code hl_variable" href="structfabomatic_1_1pins__config_1_1relay__config.xhtml#a3cfbcbcee8f3bb2aa8a2c6fc1246f27e">ch1_pin</a> == <a class="code hl_variable" href="namespacefabomatic.xhtml#a01a9e2e5f9e92f6f3fa9204ba3d946b9">fabomatic::NO_PIN</a>, <span class="stringliteral">&quot;Machine relay not configured&quot;</span>);</div>
<div class="line"><span class="lineno">   65</span>    TEST_ASSERT_TRUE_MESSAGE(config.hasMqttSwitch() || <a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">fabomatic::conf::mqtt::mqtt_switch_topic</a>.empty(), <span class="stringliteral">&quot;Machine MQTT switch not configured&quot;</span>);</div>
<div class="line"><span class="lineno">   66</span> </div>
<div class="line"><span class="lineno">   67</span>    TEST_ASSERT_TRUE_MESSAGE(config.machine_id.id == <a class="code hl_variable" href="namespacefabomatic_1_1conf_1_1default__config.xhtml#a6c7775af29f012f0623c8898f1998ea1">fabomatic::conf::default_config::machine_id</a>.<a class="code hl_variable" href="struct_machine_i_d.xhtml#a4be27146270f5fccce68f1c8b951b1d8">id</a>, <span class="stringliteral">&quot;Machine ID not configured&quot;</span>);</div>
<div class="line"><span class="lineno">   68</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1default__config_xhtml_a2a77484183bbfbb6330615405509a615"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1default__config.xhtml#a2a77484183bbfbb6330615405509a615">fabomatic::conf::default_config::machine_name</a></div><div class="ttdeci">static constexpr std::string_view machine_name</div><div class="ttdoc">Default machine name for LCD. Will be overriden with Backend config data.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00021">conf.hpp:21</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1default__config_xhtml_a6c7775af29f012f0623c8898f1998ea1"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1default__config.xhtml#a6c7775af29f012f0623c8898f1998ea1">fabomatic::conf::default_config::machine_id</a></div><div class="ttdeci">static constexpr MachineID machine_id</div><div class="ttdoc">Default MachineID for backend. Can be overriden through WiFi Portal config.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00018">conf.hpp:18</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1machine_xhtml_ad6ef16188656c4ca243871b47ae55f33"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1machine.xhtml#ad6ef16188656c4ca243871b47ae55f33">fabomatic::conf::machine::DEFAULT_AUTO_LOGOFF_DELAY</a></div><div class="ttdeci">static constexpr auto DEFAULT_AUTO_LOGOFF_DELAY</div><div class="ttdoc">User will be log out after this delay. If 0h, no auto-logout. This may be overriden by backend data.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00059">conf.hpp:59</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1conf_1_1mqtt_xhtml_a27d3131c4e18f30225c9499cadb75ff4"><div class="ttname"><a href="namespacefabomatic_1_1conf_1_1mqtt.xhtml#a27d3131c4e18f30225c9499cadb75ff4">fabomatic::conf::mqtt::mqtt_switch_topic</a></div><div class="ttdeci">static constexpr std::string_view mqtt_switch_topic</div><div class="ttdoc">In case Shelly is used, name of the topic on MQTT Broker.</div><div class="ttdef"><b>Definition</b> <a href="conf_8hpp_source.xhtml#l00157">conf.hpp:157</a></div></div>
<div class="ttc" id="anamespacefabomatic_xhtml_a01a9e2e5f9e92f6f3fa9204ba3d946b9"><div class="ttname"><a href="namespacefabomatic.xhtml#a01a9e2e5f9e92f6f3fa9204ba3d946b9">fabomatic::NO_PIN</a></div><div class="ttdeci">static constexpr uint8_t NO_PIN</div><div class="ttdoc">Constant used to indicate the pin is not used.</div><div class="ttdef"><b>Definition</b> <a href="_pins_config_8hpp_source.xhtml#l00010">PinsConfig.hpp:10</a></div></div>
<div class="ttc" id="anamespacefabomatic_xhtml_a90e4180ab5a1ffd3393b4f0d6b01f2b3"><div class="ttname"><a href="namespacefabomatic.xhtml#a90e4180ab5a1ffd3393b4f0d6b01f2b3">fabomatic::pins</a></div><div class="ttdeci">static constexpr pins_config pins</div><div class="ttdef"><b>Definition</b> <a href="pins_8hpp_source.xhtml#l00246">pins.hpp:246</a></div></div>
<div class="ttc" id="astruct_machine_i_d_xhtml_a4be27146270f5fccce68f1c8b951b1d8"><div class="ttname"><a href="struct_machine_i_d.xhtml#a4be27146270f5fccce68f1c8b951b1d8">MachineID::id</a></div><div class="ttdeci">uint16_t id</div><div class="ttdef"><b>Definition</b> <a href="_machine_i_d_8hpp_source.xhtml#l00021">MachineID.hpp:21</a></div></div>
<div class="ttc" id="astructfabomatic_1_1pins__config_1_1relay__config_xhtml_a3cfbcbcee8f3bb2aa8a2c6fc1246f27e"><div class="ttname"><a href="structfabomatic_1_1pins__config_1_1relay__config.xhtml#a3cfbcbcee8f3bb2aa8a2c6fc1246f27e">fabomatic::pins_config::relay_config::ch1_pin</a></div><div class="ttdeci">uint8_t ch1_pin</div><div class="ttdoc">Control pin for Machine 1.</div><div class="ttdef"><b>Definition</b> <a href="_pins_config_8hpp_source.xhtml#l00044">PinsConfig.hpp:44</a></div></div>
<div class="ttc" id="astructfabomatic_1_1pins__config_xhtml_a310be8cfdd1f9617522c2eb0dd02f252"><div class="ttname"><a href="structfabomatic_1_1pins__config.xhtml#a310be8cfdd1f9617522c2eb0dd02f252">fabomatic::pins_config::relay</a></div><div class="ttdeci">relay_config relay</div><div class="ttdef"><b>Definition</b> <a href="_pins_config_8hpp_source.xhtml#l00070">PinsConfig.hpp:70</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_pins_config_8hpp_source.xhtml#l00044">fabomatic::pins_config::relay_config::ch1_pin</a>, <a class="el" href="conf_8hpp_source.xhtml#l00059">fabomatic::conf::machine::DEFAULT_AUTO_LOGOFF_DELAY</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_machine_i_d_8hpp_source.xhtml#l00021">MachineID::id</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="conf_8hpp_source.xhtml#l00018">fabomatic::conf::default_config::machine_id</a>, <a class="el" href="conf_8hpp_source.xhtml#l00021">fabomatic::conf::default_config::machine_name</a>, <a class="el" href="conf_8hpp_source.xhtml#l00157">fabomatic::conf::mqtt::mqtt_switch_topic</a>, <a class="el" href="_pins_config_8hpp_source.xhtml#l00010">fabomatic::NO_PIN</a>, <a class="el" href="pins_8hpp_source.xhtml#l00246">fabomatic::pins</a>, and <a class="el" href="_pins_config_8hpp_source.xhtml#l00070">fabomatic::pins_config::relay</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a574e0054ef8ba573fc2efd53600b0ec4_cgraph.svg" width="351" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a574e0054ef8ba573fc2efd53600b0ec4_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a9a34631c2dc01cbdbbce146895c94e12" name="a9a34631c2dc01cbdbbce146895c94e12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a34631c2dc01cbdbbce146895c94e12">&#9670;&#160;</a></span>test_machine_maintenance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_machine_maintenance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00260">260</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  261</span>  {</div>
<div class="line"><span class="lineno">  262</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>);</div>
<div class="line"><span class="lineno">  263</span> </div>
<div class="line"><span class="lineno">  264</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>();</div>
<div class="line"><span class="lineno">  265</span>    <span class="keyword">const</span> <span class="keyword">auto</span> card_fabuser = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(2);</div>
<div class="line"><span class="lineno">  266</span>    <span class="keyword">const</span> <span class="keyword">auto</span> card_admin = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0);</div>
<div class="line"><span class="lineno">  267</span> </div>
<div class="line"><span class="lineno">  268</span>    machine.setAllowed(<span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">  269</span>    machine.setMaintenanceNeeded(<span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">  270</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_fabuser);</div>
<div class="line"><span class="lineno">  271</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896">BoardLogic::Status::MaintenanceNeeded</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MaintenanceNeeded&quot;</span>);</div>
<div class="line"><span class="lineno">  272</span> </div>
<div class="line"><span class="lineno">  273</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  274</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_admin, conf::machine::LONG_TAP_DURATION + 10s); <span class="comment">// Log in + Conferma manutenzione perché non ritorna prima della conclusione</span></div>
<div class="line"><span class="lineno">  275</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);                                       <span class="comment">// Card away</span></div>
<div class="line"><span class="lineno">  276</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineInUse by admin&quot;</span>);</div>
<div class="line"><span class="lineno">  277</span>    TEST_ASSERT_FALSE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isMaintenanceNeeded(), <span class="stringliteral">&quot;Maintenance not cleared by admin&quot;</span>);</div>
<div class="line"><span class="lineno">  278</span> </div>
<div class="line"><span class="lineno">  279</span>    <span class="comment">// Logoff admin</span></div>
<div class="line"><span class="lineno">  280</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_admin);</div>
<div class="line"><span class="lineno">  281</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is not free&quot;</span>);</div>
<div class="line"><span class="lineno">  282</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  283</span> </div>
<div class="line"><span class="lineno">  284</span>    <span class="comment">// Now try to logon with fabuser (should succeed because maintenance is cleared)</span></div>
<div class="line"><span class="lineno">  285</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_fabuser);</div>
<div class="line"><span class="lineno">  286</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  287</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineInUse by normal user&quot;</span>);</div>
<div class="line"><span class="lineno">  288</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::Status::MachineInUse</a></div><div class="ttdeci">@ MachineInUse</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896">fabomatic::BoardLogic::Status::MaintenanceNeeded</a></div><div class="ttdeci">@ MaintenanceNeeded</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00587">fabomatic::BoardLogic::getMachineForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="conf_8hpp_source.xhtml#l00071">fabomatic::conf::machine::LONG_TAP_DURATION</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::MachineInUse</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896">fabomatic::BoardLogic::MaintenanceNeeded</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a9a34631c2dc01cbdbbce146895c94e12_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a9a34631c2dc01cbdbbce146895c94e12_icgraph.svg" width="271" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a77b8df849708615c63f34444d640d001" name="a77b8df849708615c63f34444d640d001"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77b8df849708615c63f34444d640d001">&#9670;&#160;</a></span>test_magic_number()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_magic_number </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00152">152</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  153</span>  {</div>
<div class="line"><span class="lineno">  154</span>    <span class="keyword">auto</span> result1 = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">  155</span>    TEST_ASSERT_TRUE_MESSAGE(result1.has_value(), <span class="stringliteral">&quot;Loaded config is empty&quot;</span>);</div>
<div class="line"><span class="lineno">  156</span>    <span class="keyword">auto</span> loaded = result1.value();</div>
<div class="line"><span class="lineno">  157</span>    <span class="keyword">auto</span> original_magic = loaded.magic_number;</div>
<div class="line"><span class="lineno">  158</span>    loaded.magic_number++;</div>
<div class="line"><span class="lineno">  159</span>    TEST_ASSERT_TRUE_MESSAGE(loaded.SaveToEEPROM(), <span class="stringliteral">&quot;Loaded config save failed&quot;</span>);</div>
<div class="line"><span class="lineno">  160</span>    TEST_ASSERT_EQUAL_MESSAGE(original_magic, loaded.magic_number, <span class="stringliteral">&quot;Magic number overwritten by application&quot;</span>);</div>
<div class="line"><span class="lineno">  161</span> </div>
<div class="line"><span class="lineno">  162</span>    <span class="comment">// Force abnormal case after FW update</span></div>
<div class="line"><span class="lineno">  163</span>    TEST_ASSERT_TRUE(EEPROM.begin(<span class="keyword">sizeof</span>(<a class="code hl_class" href="classfabomatic_1_1_saved_config.xhtml">SavedConfig</a>)));</div>
<div class="line"><span class="lineno">  164</span>    loaded.magic_number = SavedConfig::MAGIC_NUMBER - 1;</div>
<div class="line"><span class="lineno">  165</span>    EEPROM.put(0, &amp;loaded);</div>
<div class="line"><span class="lineno">  166</span>    TEST_ASSERT_TRUE(EEPROM.commit());</div>
<div class="line"><span class="lineno">  167</span> </div>
<div class="line"><span class="lineno">  168</span>    <span class="comment">// Now check the loaded version is null due to version mismatch</span></div>
<div class="line"><span class="lineno">  169</span>    <span class="keyword">auto</span> result2 = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">  170</span>    TEST_ASSERT_FALSE_MESSAGE(result2.has_value(), <span class="stringliteral">&quot;Loaded config is not empty&quot;</span>);</div>
<div class="line"><span class="lineno">  171</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, and <a class="el" href="_saved_config_8hpp_source.xhtml#l00038">fabomatic::SavedConfig::MAGIC_NUMBER</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00318">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a77b8df849708615c63f34444d640d001_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a77b8df849708615c63f34444d640d001_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af8fa7ace86309b5f699540d8898660c7" name="af8fa7ace86309b5f699540d8898660c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8fa7ace86309b5f699540d8898660c7">&#9670;&#160;</a></span>test_messages_buffered()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_messages_buffered </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00312">312</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  313</span>  {</div>
<div class="line"><span class="lineno">  314</span>    <span class="keyword">auto</span> card_admin = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0);</div>
<div class="line"><span class="lineno">  315</span>    <span class="keyword">auto</span> &amp;backend = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">  316</span> </div>
<div class="line"><span class="lineno">  317</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_admin, 500ms); <span class="comment">// Start use</span></div>
<div class="line"><span class="lineno">  318</span>    delay(1);                                           <span class="comment">// 1s usage</span></div>
<div class="line"><span class="lineno">  319</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_admin, 500ms); <span class="comment">// End use</span></div>
<div class="line"><span class="lineno">  320</span> </div>
<div class="line"><span class="lineno">  321</span>    TEST_ASSERT_TRUE_MESSAGE(backend.hasBufferedMsg(), <span class="stringliteral">&quot;Messages have been buffered&quot;</span>);</div>
<div class="line"><span class="lineno">  322</span> </div>
<div class="line"><span class="lineno">  323</span>    <span class="keyword">auto</span> result = backend.transmitBuffer();</div>
<div class="line"><span class="lineno">  324</span>    TEST_ASSERT_FALSE_MESSAGE(result, <span class="stringliteral">&quot;Retransmission fails&quot;</span>);</div>
<div class="line"><span class="lineno">  325</span> </div>
<div class="line"><span class="lineno">  326</span>    <span class="keyword">auto</span> save_result = backend.saveBuffer();</div>
<div class="line"><span class="lineno">  327</span>    TEST_ASSERT_TRUE_MESSAGE(save_result, <span class="stringliteral">&quot;Saving buffered messages works&quot;</span>);</div>
<div class="line"><span class="lineno">  328</span> </div>
<div class="line"><span class="lineno">  329</span>    <span class="keyword">auto</span> sc = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">  330</span>    TEST_ASSERT_TRUE_MESSAGE(sc.has_value(), <span class="stringliteral">&quot;SavedConfig has valid contents&quot;</span>);</div>
<div class="line"><span class="lineno">  331</span> </div>
<div class="line"><span class="lineno">  332</span>    backend.configure(sc.value());</div>
<div class="line"><span class="lineno">  333</span>    TEST_ASSERT_TRUE_MESSAGE(backend.hasBufferedMsg(), <span class="stringliteral">&quot;Reloading buffered messages works&quot;</span>);</div>
<div class="line"><span class="lineno">  334</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af8fa7ace86309b5f699540d8898660c7_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af8fa7ace86309b5f699540d8898660c7_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="adf323d841fd7207901e373cdc073d4af" name="adf323d841fd7207901e373cdc073d4af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf323d841fd7207901e373cdc073d4af">&#9670;&#160;</a></span>test_normal_use()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_normal_use </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00324">324</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  325</span>  {</div>
<div class="line"><span class="lineno">  326</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a2acce29901dbfd56a0f49beb277e3e76">updateSchedules</a>();</div>
<div class="line"><span class="lineno">  327</span>    TEST_ASSERT_EQUAL_UINT32_MESSAGE(6, <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a203784237087f7f1b0b77c15bcdb85f9">taskCount</a>(), <span class="stringliteral">&quot;Scheduler does not contain all tasks&quot;</span>);</div>
<div class="line"><span class="lineno">  328</span>    <span class="keyword">auto</span> start = <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>();</div>
<div class="line"><span class="lineno">  329</span>    <span class="keywordflow">while</span> (<a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>() - start &lt;= 1min)</div>
<div class="line"><span class="lineno">  330</span>    {</div>
<div class="line"><span class="lineno">  331</span>      <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#aff9b0c44cc0bef222932a681ace0d406">execute</a>();</div>
<div class="line"><span class="lineno">  332</span>      delay(25);</div>
<div class="line"><span class="lineno">  333</span>    }</div>
<div class="line"><span class="lineno">  334</span>    <span class="comment">// Check that all tasks ran at least once</span></div>
<div class="line"><span class="lineno">  335</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> tp : test_scheduler.getTasks())</div>
<div class="line"><span class="lineno">  336</span>    {</div>
<div class="line"><span class="lineno">  337</span>      <span class="keyword">const</span> <span class="keyword">auto</span> t = *tp;</div>
<div class="line"><span class="lineno">  338</span>      ESP_LOGD(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;Task %s: %lu runs, %llu ms total runtime, %llu ms avg tardiness&quot;</span>, t.getId().c_str(), t.getRunCounter(), t.getTotalRuntime().count(), t.getAvgTardiness().count());</div>
<div class="line"><span class="lineno">  339</span>      TEST_ASSERT_GREATER_OR_EQUAL_MESSAGE(1, t.getRunCounter(), <span class="stringliteral">&quot;Task did not run&quot;</span>);</div>
<div class="line"><span class="lineno">  340</span>    }</div>
<div class="line"><span class="lineno">  341</span>    <span class="comment">// Remove the HW Watchdog</span></div>
<div class="line"><span class="lineno">  342</span>    esp32::removeWatchdog();</div>
<div class="line"><span class="lineno">  343</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_tasks_1_1_scheduler_xhtml_aff9b0c44cc0bef222932a681ace0d406"><div class="ttname"><a href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#aff9b0c44cc0bef222932a681ace0d406">fabomatic::Tasks::Scheduler::execute</a></div><div class="ttdeci">auto execute() -&gt; void</div><div class="ttdoc">Execute all tasks that are ready to run.</div><div class="ttdef"><b>Definition</b> <a href="_tasks_8cpp_source.xhtml#l00083">Tasks.cpp:83</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a6404b5d30ab37f8b12de788296e2b92c"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">fabomatic::tests::test_scheduler</a></div><div class="ttdeci">fabomatic::Tasks::Scheduler test_scheduler</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00035">test_mqtt.cpp:35</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tasks_8hpp_source.xhtml#l00017">fabomatic::Tasks::arduinoNow()</a>, <a class="el" href="_tasks_8cpp_source.xhtml#l00083">fabomatic::Tasks::Scheduler::execute()</a>, <a class="el" href="_tasks_8cpp_source.xhtml#l00110">fabomatic::Tasks::Scheduler::getTasks()</a>, <a class="el" href="_espressif_8cpp_source.xhtml#l00061">fabomatic::esp32::removeWatchdog()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>, <a class="el" href="_tasks_8cpp_source.xhtml#l00105">fabomatic::Tasks::Scheduler::taskCount()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00035">test_scheduler</a>, and <a class="el" href="_tasks_8cpp_source.xhtml#l00032">fabomatic::Tasks::Scheduler::updateSchedules()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_adf323d841fd7207901e373cdc073d4af_cgraph.svg" width="100%" height="566"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_adf323d841fd7207901e373cdc073d4af_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a6f3dff17fd964aba76c35c514957a0a5" name="a6f3dff17fd964aba76c35c514957a0a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f3dff17fd964aba76c35c514957a0a5">&#9670;&#160;</a></span>test_one_user_at_a_time()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_one_user_at_a_time </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  164</span>  {</div>
<div class="line"><span class="lineno">  165</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>);</div>
<div class="line"><span class="lineno">  166</span> </div>
<div class="line"><span class="lineno">  167</span>    <span class="keyword">const</span> <span class="keyword">auto</span> card_uid = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0);</div>
<div class="line"><span class="lineno">  168</span>    <span class="keyword">auto</span> new_state = <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid);</div>
<div class="line"><span class="lineno">  169</span> </div>
<div class="line"><span class="lineno">  170</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, new_state, <span class="stringliteral">&quot;Status not LoggedIn&quot;</span>);</div>
<div class="line"><span class="lineno">  171</span>    TEST_ASSERT_TRUE_MESSAGE(!<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  172</span> </div>
<div class="line"><span class="lineno">  173</span>    <span class="comment">// Card away, machine shall be busy</span></div>
<div class="line"><span class="lineno">  174</span>    new_state = <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  175</span>    TEST_ASSERT_TRUE_MESSAGE(!<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  176</span> </div>
<div class="line"><span class="lineno">  177</span>    <span class="comment">// New card, shall be denied</span></div>
<div class="line"><span class="lineno">  178</span>    <span class="keyword">const</span> <span class="keyword">auto</span> card_uid2 = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(1);</div>
<div class="line"><span class="lineno">  179</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid2, 100ms);</div>
<div class="line"><span class="lineno">  180</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getActiveUser().card_uid == card_uid, <span class="stringliteral">&quot;User UID has changed&quot;</span>);</div>
<div class="line"><span class="lineno">  181</span> </div>
<div class="line"><span class="lineno">  182</span>    <span class="comment">// New card away, first user shall still be here</span></div>
<div class="line"><span class="lineno">  183</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  184</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getActiveUser().card_uid == card_uid, <span class="stringliteral">&quot;User UID has changed&quot;</span>);</div>
<div class="line"><span class="lineno">  185</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineInUse&quot;</span>);</div>
<div class="line"><span class="lineno">  186</span> </div>
<div class="line"><span class="lineno">  187</span>    <span class="comment">// Original card, shall log out</span></div>
<div class="line"><span class="lineno">  188</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid);</div>
<div class="line"><span class="lineno">  189</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is not free&quot;</span>);</div>
<div class="line"><span class="lineno">  190</span>    <span class="comment">// Original card away</span></div>
<div class="line"><span class="lineno">  191</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  192</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is not free&quot;</span>);</div>
<div class="line"><span class="lineno">  193</span> </div>
<div class="line"><span class="lineno">  194</span>    <span class="comment">// Now new card must succeed</span></div>
<div class="line"><span class="lineno">  195</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid2);</div>
<div class="line"><span class="lineno">  196</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not LoggedIn&quot;</span>);</div>
<div class="line"><span class="lineno">  197</span> </div>
<div class="line"><span class="lineno">  198</span>    <span class="comment">// Card away</span></div>
<div class="line"><span class="lineno">  199</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  200</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineInUse&quot;</span>);</div>
<div class="line"><span class="lineno">  201</span> </div>
<div class="line"><span class="lineno">  202</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getActiveUser().card_uid == card_uid2, <span class="stringliteral">&quot;User UID is not expected&quot;</span>);</div>
<div class="line"><span class="lineno">  203</span>    TEST_ASSERT_TRUE_MESSAGE(!<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  204</span> </div>
<div class="line"><span class="lineno">  205</span>    <span class="keyword">auto</span> save_result = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>().saveBuffer();</div>
<div class="line"><span class="lineno">  206</span>    TEST_ASSERT_TRUE_MESSAGE(save_result, <span class="stringliteral">&quot;Saving buffered messages works&quot;</span>);</div>
<div class="line"><span class="lineno">  207</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">fabomatic::BoardLogic::Status::LoggedIn</a></div><div class="ttdeci">@ LoggedIn</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">fabomatic::BoardLogic::LoggedIn</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::MachineInUse</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6f3dff17fd964aba76c35c514957a0a5_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a6f3dff17fd964aba76c35c514957a0a5_icgraph.svg" width="258" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aeb3e51f6d2841cd2869df4c0629f694d" name="aeb3e51f6d2841cd2869df4c0629f694d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb3e51f6d2841cd2869df4c0629f694d">&#9670;&#160;</a></span>test_rfid_cache()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_rfid_cache </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   95</span>  {</div>
<div class="line"><span class="lineno">   96</span>    <span class="keyword">auto</span> defaults = SavedConfig::DefaultConfig();</div>
<div class="line"><span class="lineno">   97</span>    defaults.SaveToEEPROM();</div>
<div class="line"><span class="lineno">   98</span> </div>
<div class="line"><span class="lineno">   99</span>    TEST_ASSERT_TRUE_MESSAGE(defaults.cachedRfid.size() == conf::rfid_tags::CACHE_LEN, <span class="stringliteral">&quot;Default config cachedRfid size mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">  100</span> </div>
<div class="line"><span class="lineno">  101</span>    <span class="comment">// Test that default config has empty cache</span></div>
<div class="line"><span class="lineno">  102</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; defaults.cachedRfid.size(); i++)</div>
<div class="line"><span class="lineno">  103</span>    {</div>
<div class="line"><span class="lineno">  104</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;tag = defaults.cachedRfid[i];</div>
<div class="line"><span class="lineno">  105</span>      TEST_ASSERT_TRUE_MESSAGE(tag.uid == 0, <span class="stringliteral">&quot;Default config cachedRfid not empty&quot;</span>);</div>
<div class="line"><span class="lineno">  106</span>      TEST_ASSERT_TRUE_MESSAGE(tag.level == FabUser::UserLevel::Unknown, <span class="stringliteral">&quot;Default config cachedRfid not empty&quot;</span>);</div>
<div class="line"><span class="lineno">  107</span>    }</div>
<div class="line"><span class="lineno">  108</span> </div>
<div class="line"><span class="lineno">  109</span>    <a class="code hl_class" href="classfabomatic_1_1_auth_provider.xhtml">AuthProvider</a> authProvider(secrets::cards::whitelist);</div>
<div class="line"><span class="lineno">  110</span>    TEST_ASSERT_TRUE_MESSAGE(authProvider.saveCache(), <span class="stringliteral">&quot;AuthProvider saveCache failed&quot;</span>);</div>
<div class="line"><span class="lineno">  111</span> </div>
<div class="line"><span class="lineno">  112</span>    defaults = SavedConfig::LoadFromEEPROM().value_or(SavedConfig::DefaultConfig());</div>
<div class="line"><span class="lineno">  113</span> </div>
<div class="line"><span class="lineno">  114</span>    <span class="comment">// Test that default config is still empty</span></div>
<div class="line"><span class="lineno">  115</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; defaults.cachedRfid.size(); i++)</div>
<div class="line"><span class="lineno">  116</span>    {</div>
<div class="line"><span class="lineno">  117</span>      <span class="keyword">const</span> <span class="keyword">auto</span> &amp;tag = defaults.cachedRfid[i];</div>
<div class="line"><span class="lineno">  118</span>      TEST_ASSERT_TRUE_MESSAGE(tag.uid == 0, <span class="stringliteral">&quot;Default config cachedRfid not empty after AuthProvider saveCache&quot;</span>);</div>
<div class="line"><span class="lineno">  119</span>      TEST_ASSERT_TRUE_MESSAGE(tag.level == FabUser::UserLevel::Unknown, <span class="stringliteral">&quot;Default config cachedRfid not empty after AuthProvider saveCache&quot;</span>);</div>
<div class="line"><span class="lineno">  120</span>    }</div>
<div class="line"><span class="lineno">  121</span> </div>
<div class="line"><span class="lineno">  122</span>    FabBackend server;</div>
<div class="line"><span class="lineno">  123</span>    defaults.mqtt_server = <span class="stringliteral">&quot;INVALID_SERVER&quot;</span>; <span class="comment">// Must be invalid to test the cache</span></div>
<div class="line"><span class="lineno">  124</span>    server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#acf5644d920896038018f990568e710c3">configure</a>(defaults);</div>
<div class="line"><span class="lineno">  125</span> </div>
<div class="line"><span class="lineno">  126</span>    <span class="keyword">auto</span> [wl_uid, wl_level, name] = secrets::cards::whitelist[0];</div>
<div class="line"><span class="lineno">  127</span>    <span class="keyword">auto</span> result = authProvider.tryLogin(wl_uid, server);</div>
<div class="line"><span class="lineno">  128</span> </div>
<div class="line"><span class="lineno">  129</span>    TEST_ASSERT_TRUE_MESSAGE(result.has_value(), <span class="stringliteral">&quot;AuthProvider tryLogin failed&quot;</span>);</div>
<div class="line"><span class="lineno">  130</span> </div>
<div class="line"><span class="lineno">  131</span>    <span class="comment">// Now save the positive result (should not be do anything, because offline)</span></div>
<div class="line"><span class="lineno">  132</span>    TEST_ASSERT_TRUE_MESSAGE(authProvider.saveCache(), <span class="stringliteral">&quot;AuthProvider saveCache 2 failed&quot;</span>);</div>
<div class="line"><span class="lineno">  133</span>    <span class="comment">// Reload the cache</span></div>
<div class="line"><span class="lineno">  134</span>    defaults = SavedConfig::LoadFromEEPROM().value_or(SavedConfig::DefaultConfig());</div>
<div class="line"><span class="lineno">  135</span> </div>
<div class="line"><span class="lineno">  136</span>    TEST_ASSERT_TRUE_MESSAGE(0 == defaults.cachedRfid[0].uid, <span class="stringliteral">&quot;AuthProvider tryLogin card_uid mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">  137</span>    TEST_ASSERT_TRUE_MESSAGE(FabUser::UserLevel::Unknown == defaults.cachedRfid[0].level, <span class="stringliteral">&quot;AuthProvider tryLogin user_level mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">  138</span> </div>
<div class="line"><span class="lineno">  139</span>    <span class="comment">// Generate many events</span></div>
<div class="line"><span class="lineno">  140</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; 50; i++)</div>
<div class="line"><span class="lineno">  141</span>    {</div>
<div class="line"><span class="lineno">  142</span>      <span class="keyword">auto</span> rnd = random(0, conf::rfid_tags::CACHE_LEN);</div>
<div class="line"><span class="lineno">  143</span>      <span class="keyword">auto</span> result = authProvider.tryLogin(defaults.cachedRfid[rnd].uid, server);</div>
<div class="line"><span class="lineno">  144</span>    }</div>
<div class="line"><span class="lineno">  145</span> </div>
<div class="line"><span class="lineno">  146</span>    TEST_ASSERT_TRUE_MESSAGE(authProvider.saveCache(), <span class="stringliteral">&quot;AuthProvider saveCache 2 failed&quot;</span>);</div>
<div class="line"><span class="lineno">  147</span>    defaults = SavedConfig::LoadFromEEPROM().value_or(SavedConfig::DefaultConfig());</div>
<div class="line"><span class="lineno">  148</span> </div>
<div class="line"><span class="lineno">  149</span>    <span class="comment">// Online scenario with cache is testing in MQTT testcase with the broker.</span></div>
<div class="line"><span class="lineno">  150</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_auth_provider_xhtml"><div class="ttname"><a href="classfabomatic_1_1_auth_provider.xhtml">fabomatic::AuthProvider</a></div><div class="ttdoc">This class manages authentication of a RFID tag through cache, whitelist or network request.</div><div class="ttdef"><b>Definition</b> <a href="_auth_provider_8hpp_source.xhtml#l00018">AuthProvider.hpp:19</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="conf_8hpp_source.xhtml#l00037">fabomatic::conf::rfid_tags::CACHE_LEN</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00021">fabomatic::FabBackend::configure()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00028">fabomatic::SavedConfig::DefaultConfig()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, <a class="el" href="_auth_provider_8cpp_source.xhtml#l00183">fabomatic::AuthProvider::saveCache()</a>, <a class="el" href="_auth_provider_8cpp_source.xhtml#l00054">fabomatic::AuthProvider::tryLogin()</a>, <a class="el" href="structfabomatic_1_1_fab_user.xhtml#a75deeb54124600e0387550735c7a0ca0a88183b946cc5f0e8c96b2e66e1c74a7e">fabomatic::FabUser::Unknown</a>, and <a class="el" href="secrets_8hpp_source.xhtml#l00023">fabomatic::secrets::cards::whitelist</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00318">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aeb3e51f6d2841cd2869df4c0629f694d_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aeb3e51f6d2841cd2869df4c0629f694d_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aec03a7ee459718d314b930fdd75d3cee" name="aec03a7ee459718d314b930fdd75d3cee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec03a7ee459718d314b930fdd75d3cee">&#9670;&#160;</a></span>test_simple_methods()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_simple_methods </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00070">70</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   71</span>  {</div>
<div class="line"><span class="lineno">   72</span>    {</div>
<div class="line"><span class="lineno">   73</span>      <span class="keyword">auto</span> cpt = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a1724172254d9262c6b1a61cf5de5cee0">getBuzzerForTesting</a>()-&gt;getBeepCount();</div>
<div class="line"><span class="lineno">   74</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac198a07d00fda36a527cd9db2d97efc1">beepFail</a>();</div>
<div class="line"><span class="lineno">   75</span>      <span class="keyword">auto</span> beeps = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a1724172254d9262c6b1a61cf5de5cee0">getBuzzerForTesting</a>()-&gt;getBeepCount() - cpt;</div>
<div class="line"><span class="lineno">   76</span>      TEST_ASSERT_EQUAL_UINT16_MESSAGE(conf::buzzer::NB_BEEPS, beeps, <span class="stringliteral">&quot;Buzzer FAIL has been beeped&quot;</span>);</div>
<div class="line"><span class="lineno">   77</span>    }</div>
<div class="line"><span class="lineno">   78</span>    {</div>
<div class="line"><span class="lineno">   79</span>      <span class="keyword">auto</span> cpt = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a1724172254d9262c6b1a61cf5de5cee0">getBuzzerForTesting</a>()-&gt;getBeepCount();</div>
<div class="line"><span class="lineno">   80</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8e0c35d138333907cc217c9e141091cd">beepOk</a>();</div>
<div class="line"><span class="lineno">   81</span>      <span class="keyword">auto</span> beeps = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a1724172254d9262c6b1a61cf5de5cee0">getBuzzerForTesting</a>()-&gt;getBeepCount() - cpt;</div>
<div class="line"><span class="lineno">   82</span>      TEST_ASSERT_EQUAL_UINT16_MESSAGE(1, beeps, <span class="stringliteral">&quot;Buzzer OK has been beeped&quot;</span>);</div>
<div class="line"><span class="lineno">   83</span>    }</div>
<div class="line"><span class="lineno">   84</span> </div>
<div class="line"><span class="lineno">   85</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ad05b4db308773e56d866fe87d34022d9">blinkLed</a>();</div>
<div class="line"><span class="lineno">   86</span> </div>
<div class="line"><span class="lineno">   87</span>    std::vector statuses{<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a902b0d55fddef6f8d651fe1035b7d4bd">BoardLogic::Status::Error</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a1e50b02a42cd210ea7dc0ed55e79f9d6">BoardLogic::Status::ErrorHardware</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7">BoardLogic::Status::Connected</a>,</div>
<div class="line"><span class="lineno">   88</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458">BoardLogic::Status::Connecting</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adc30bc0c7914db5918da4263fce93ad2">BoardLogic::Status::Clear</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">BoardLogic::Status::MachineFree</a>,</div>
<div class="line"><span class="lineno">   89</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a317613b2a5acaaa53519c44526a11859">BoardLogic::Status::LoginDenied</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad8a942ef2b04672adfafef0ad817a407">BoardLogic::Status::Busy</a>,</div>
<div class="line"><span class="lineno">   90</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">BoardLogic::Status::LoggedOut</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a6d3cb253e5f0cfa98184c8509beafcf0">BoardLogic::Status::AlreadyInUse</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>,</div>
<div class="line"><span class="lineno">   91</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a8d9da4bc0e49a50e09ac9f7e56789d39">BoardLogic::Status::Offline</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">BoardLogic::Status::NotAllowed</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a5c02116895314194cd3ba79c0eb2cec4">BoardLogic::Status::Verifying</a>,</div>
<div class="line"><span class="lineno">   92</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896">BoardLogic::Status::MaintenanceNeeded</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adbb4b0a2d8a60cbf820c75233ab84e18">BoardLogic::Status::MaintenanceQuery</a>,</div>
<div class="line"><span class="lineno">   93</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a92992e3855328c237975f2806f5b2194">BoardLogic::Status::MaintenanceDone</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0df4bdde6ecbaa556250a62412817982">BoardLogic::Status::PortalStarting</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aa358d35f0818b076115b29a0490253d7">BoardLogic::Status::PortalFailed</a>,</div>
<div class="line"><span class="lineno">   94</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a40d7d2e7b91cecc73800e47accd25ca8">BoardLogic::Status::PortalSuccess</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad31181c15b9b2bfe52e84052376b0c04">BoardLogic::Status::Booting</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a075d9c9ae8c8f1c79c1a1965cd8c5a42">BoardLogic::Status::ShuttingDown</a>,</div>
<div class="line"><span class="lineno">   95</span>                         <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a195c01d301a592904e026b829f658f4b">BoardLogic::Status::OTAStarting</a>, <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae8d0fe00091000284822d7216b46b6cf">BoardLogic::Status::FactoryDefaults</a>};</div>
<div class="line"><span class="lineno">   96</span> </div>
<div class="line"><span class="lineno">   97</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> status : statuses)</div>
<div class="line"><span class="lineno">   98</span>    {</div>
<div class="line"><span class="lineno">   99</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a3c38d7a3ed7952c6d6297efdf50ea4dd">changeStatus</a>(status);</div>
<div class="line"><span class="lineno">  100</span>      TEST_ASSERT_EQUAL_UINT8_MESSAGE(status, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status mismatch&quot;</span>);</div>
<div class="line"><span class="lineno">  101</span>    }</div>
<div class="line"><span class="lineno">  102</span> </div>
<div class="line"><span class="lineno">  103</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>().setMaintenanceInfo(<span class="stringliteral">&quot;Lente laser&quot;</span>);</div>
<div class="line"><span class="lineno">  104</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>().setMaintenanceNeeded(<span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">  105</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a3c38d7a3ed7952c6d6297efdf50ea4dd">changeStatus</a>(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">BoardLogic::Status::MachineFree</a>);</div>
<div class="line"><span class="lineno">  106</span>    sleep(2);</div>
<div class="line"><span class="lineno">  107</span> </div>
<div class="line"><span class="lineno">  108</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; 3; ++i)</div>
<div class="line"><span class="lineno">  109</span>    {</div>
<div class="line"><span class="lineno">  110</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac05af486941c620c9494ba545dd83c3d">checkPowerOff</a>();</div>
<div class="line"><span class="lineno">  111</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ad05b4db308773e56d866fe87d34022d9">blinkLed</a>();</div>
<div class="line"><span class="lineno">  112</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a47b4d515c0d3488eceb49769036bce8b">updateLCD</a>();</div>
<div class="line"><span class="lineno">  113</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ad4d15925f4f48caa25335db63aeab734">reconfigure</a>();</div>
<div class="line"><span class="lineno">  114</span>    }</div>
<div class="line"><span class="lineno">  115</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a1724172254d9262c6b1a61cf5de5cee0"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a1724172254d9262c6b1a61cf5de5cee0">fabomatic::BoardLogic::getBuzzerForTesting</a></div><div class="ttdeci">auto getBuzzerForTesting() -&gt; Buzzer *</div><div class="ttdoc">returns a modificable machine for testing only</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00594">BoardLogic.cpp:594</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a075d9c9ae8c8f1c79c1a1965cd8c5a42"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a075d9c9ae8c8f1c79c1a1965cd8c5a42">fabomatic::BoardLogic::Status::ShuttingDown</a></div><div class="ttdeci">@ ShuttingDown</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a0df4bdde6ecbaa556250a62412817982"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0df4bdde6ecbaa556250a62412817982">fabomatic::BoardLogic::Status::PortalStarting</a></div><div class="ttdeci">@ PortalStarting</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a195c01d301a592904e026b829f658f4b"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a195c01d301a592904e026b829f658f4b">fabomatic::BoardLogic::Status::OTAStarting</a></div><div class="ttdeci">@ OTAStarting</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a1e50b02a42cd210ea7dc0ed55e79f9d6"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a1e50b02a42cd210ea7dc0ed55e79f9d6">fabomatic::BoardLogic::Status::ErrorHardware</a></div><div class="ttdeci">@ ErrorHardware</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7">fabomatic::BoardLogic::Status::Connected</a></div><div class="ttdeci">@ Connected</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a317613b2a5acaaa53519c44526a11859"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a317613b2a5acaaa53519c44526a11859">fabomatic::BoardLogic::Status::LoginDenied</a></div><div class="ttdeci">@ LoginDenied</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a40d7d2e7b91cecc73800e47accd25ca8"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a40d7d2e7b91cecc73800e47accd25ca8">fabomatic::BoardLogic::Status::PortalSuccess</a></div><div class="ttdeci">@ PortalSuccess</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a5c02116895314194cd3ba79c0eb2cec4"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a5c02116895314194cd3ba79c0eb2cec4">fabomatic::BoardLogic::Status::Verifying</a></div><div class="ttdeci">@ Verifying</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a6d3cb253e5f0cfa98184c8509beafcf0"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a6d3cb253e5f0cfa98184c8509beafcf0">fabomatic::BoardLogic::Status::AlreadyInUse</a></div><div class="ttdeci">@ AlreadyInUse</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a8d9da4bc0e49a50e09ac9f7e56789d39"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a8d9da4bc0e49a50e09ac9f7e56789d39">fabomatic::BoardLogic::Status::Offline</a></div><div class="ttdeci">@ Offline</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a902b0d55fddef6f8d651fe1035b7d4bd"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a902b0d55fddef6f8d651fe1035b7d4bd">fabomatic::BoardLogic::Status::Error</a></div><div class="ttdeci">@ Error</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0a92992e3855328c237975f2806f5b2194"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a92992e3855328c237975f2806f5b2194">fabomatic::BoardLogic::Status::MaintenanceDone</a></div><div class="ttdeci">@ MaintenanceDone</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0aa358d35f0818b076115b29a0490253d7"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aa358d35f0818b076115b29a0490253d7">fabomatic::BoardLogic::Status::PortalFailed</a></div><div class="ttdeci">@ PortalFailed</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0ad31181c15b9b2bfe52e84052376b0c04"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad31181c15b9b2bfe52e84052376b0c04">fabomatic::BoardLogic::Status::Booting</a></div><div class="ttdeci">@ Booting</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0ad8a942ef2b04672adfafef0ad817a407"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad8a942ef2b04672adfafef0ad817a407">fabomatic::BoardLogic::Status::Busy</a></div><div class="ttdeci">@ Busy</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0adbb4b0a2d8a60cbf820c75233ab84e18"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adbb4b0a2d8a60cbf820c75233ab84e18">fabomatic::BoardLogic::Status::MaintenanceQuery</a></div><div class="ttdeci">@ MaintenanceQuery</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0adc30bc0c7914db5918da4263fce93ad2"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adc30bc0c7914db5918da4263fce93ad2">fabomatic::BoardLogic::Status::Clear</a></div><div class="ttdeci">@ Clear</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">fabomatic::BoardLogic::Status::LoggedOut</a></div><div class="ttdeci">@ LoggedOut</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458">fabomatic::BoardLogic::Status::Connecting</a></div><div class="ttdeci">@ Connecting</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0ae8d0fe00091000284822d7216b46b6cf"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae8d0fe00091000284822d7216b46b6cf">fabomatic::BoardLogic::Status::FactoryDefaults</a></div><div class="ttdeci">@ FactoryDefaults</div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3c38d7a3ed7952c6d6297efdf50ea4dd"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3c38d7a3ed7952c6d6297efdf50ea4dd">fabomatic::BoardLogic::changeStatus</a></div><div class="ttdeci">auto changeStatus(Status newStatus) -&gt; void</div><div class="ttdoc">Sets the board in the state given.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00273">BoardLogic.cpp:273</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a47b4d515c0d3488eceb49769036bce8b"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a47b4d515c0d3488eceb49769036bce8b">fabomatic::BoardLogic::updateLCD</a></div><div class="ttdeci">auto updateLCD() const -&gt; void</div><div class="ttdoc">Updates the LCD screen as per the current status.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00285">BoardLogic.cpp:285</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a8e0c35d138333907cc217c9e141091cd"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a8e0c35d138333907cc217c9e141091cd">fabomatic::BoardLogic::beepOk</a></div><div class="ttdeci">auto beepOk() const -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00445">BoardLogic.cpp:445</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_ac05af486941c620c9494ba545dd83c3d"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#ac05af486941c620c9494ba545dd83c3d">fabomatic::BoardLogic::checkPowerOff</a></div><div class="ttdeci">auto checkPowerOff() -&gt; void</div><div class="ttdoc">Checks if the machine must be powered off.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00577">BoardLogic.cpp:577</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_ac198a07d00fda36a527cd9db2d97efc1"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#ac198a07d00fda36a527cd9db2d97efc1">fabomatic::BoardLogic::beepFail</a></div><div class="ttdeci">auto beepFail() const -&gt; void</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00450">BoardLogic.cpp:450</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_ad05b4db308773e56d866fe87d34022d9"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#ad05b4db308773e56d866fe87d34022d9">fabomatic::BoardLogic::blinkLed</a></div><div class="ttdeci">auto blinkLed(uint8_t r=0, uint8_t g=0, uint8_t b=0) -&gt; void</div><div class="ttdoc">Blinks the LED.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00499">BoardLogic.cpp:499</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_ad4d15925f4f48caa25335db63aeab734"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#ad4d15925f4f48caa25335db63aeab734">fabomatic::BoardLogic::reconfigure</a></div><div class="ttdeci">auto reconfigure() -&gt; bool</div><div class="ttdoc">Configures the board with the given references.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00464">BoardLogic.cpp:464</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a6d3cb253e5f0cfa98184c8509beafcf0">fabomatic::BoardLogic::AlreadyInUse</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00450">fabomatic::BoardLogic::beepFail()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00445">fabomatic::BoardLogic::beepOk()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00499">fabomatic::BoardLogic::blinkLed()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad31181c15b9b2bfe52e84052376b0c04">fabomatic::BoardLogic::Booting</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ad8a942ef2b04672adfafef0ad817a407">fabomatic::BoardLogic::Busy</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00273">fabomatic::BoardLogic::changeStatus()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00577">fabomatic::BoardLogic::checkPowerOff()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adc30bc0c7914db5918da4263fce93ad2">fabomatic::BoardLogic::Clear</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7">fabomatic::BoardLogic::Connected</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458">fabomatic::BoardLogic::Connecting</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a902b0d55fddef6f8d651fe1035b7d4bd">fabomatic::BoardLogic::Error</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a1e50b02a42cd210ea7dc0ed55e79f9d6">fabomatic::BoardLogic::ErrorHardware</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae8d0fe00091000284822d7216b46b6cf">fabomatic::BoardLogic::FactoryDefaults</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00594">fabomatic::BoardLogic::getBuzzerForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00587">fabomatic::BoardLogic::getMachineForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">fabomatic::BoardLogic::LoggedIn</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">fabomatic::BoardLogic::LoggedOut</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a317613b2a5acaaa53519c44526a11859">fabomatic::BoardLogic::LoginDenied</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">fabomatic::BoardLogic::MachineFree</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::MachineInUse</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a92992e3855328c237975f2806f5b2194">fabomatic::BoardLogic::MaintenanceDone</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aac426b0c913ec5ba40bda964477b4896">fabomatic::BoardLogic::MaintenanceNeeded</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0adbb4b0a2d8a60cbf820c75233ab84e18">fabomatic::BoardLogic::MaintenanceQuery</a>, <a class="el" href="conf_8hpp_source.xhtml#l00105">fabomatic::conf::buzzer::NB_BEEPS</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afa89fcc81e9dcfd52671c968fe4e6ddf">fabomatic::BoardLogic::NotAllowed</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a8d9da4bc0e49a50e09ac9f7e56789d39">fabomatic::BoardLogic::Offline</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a195c01d301a592904e026b829f658f4b">fabomatic::BoardLogic::OTAStarting</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0aa358d35f0818b076115b29a0490253d7">fabomatic::BoardLogic::PortalFailed</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0df4bdde6ecbaa556250a62412817982">fabomatic::BoardLogic::PortalStarting</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a40d7d2e7b91cecc73800e47accd25ca8">fabomatic::BoardLogic::PortalSuccess</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00464">fabomatic::BoardLogic::reconfigure()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a075d9c9ae8c8f1c79c1a1965cd8c5a42">fabomatic::BoardLogic::ShuttingDown</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00285">fabomatic::BoardLogic::updateLCD()</a>, and <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a5c02116895314194cd3ba79c0eb2cec4">fabomatic::BoardLogic::Verifying</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aec03a7ee459718d314b930fdd75d3cee_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aec03a7ee459718d314b930fdd75d3cee_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aba7f55ee91c2d2a647fca6c8cc106c97" name="aba7f55ee91c2d2a647fca6c8cc106c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba7f55ee91c2d2a647fca6c8cc106c97">&#9670;&#160;</a></span>test_start_broker()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_start_broker </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">97</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   98</span>  {</div>
<div class="line"><span class="lineno">   99</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">  100</span>    server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a492c94ed0682ad834ccd7ddc7c20a55a">setChannel</a>(-1);</div>
<div class="line"><span class="lineno">  101</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#ad928751b2f967feaac0f2cb708c0d6e9">connectWiFi</a>(), <span class="stringliteral">&quot;WiFi works&quot;</span>);</div>
<div class="line"><span class="lineno">  102</span> </div>
<div class="line"><span class="lineno">  103</span>    <span class="comment">// Set the same IP Adress as MQTT server</span></div>
<div class="line"><span class="lineno">  104</span>    <span class="keyword">auto</span> config = SavedConfig::LoadFromEEPROM();</div>
<div class="line"><span class="lineno">  105</span>    TEST_ASSERT_TRUE_MESSAGE(config.has_value(), <span class="stringliteral">&quot;Config load failed&quot;</span>);</div>
<div class="line"><span class="lineno">  106</span>    config.value().mqtt_server.assign(<span class="stringliteral">&quot;127.0.0.1&quot;</span>);</div>
<div class="line"><span class="lineno">  107</span>    TEST_ASSERT_TRUE_MESSAGE(config.value().SaveToEEPROM(), <span class="stringliteral">&quot;Config save failed&quot;</span>);</div>
<div class="line"><span class="lineno">  108</span>    server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#acf5644d920896038018f990568e710c3">configure</a>(config.value());</div>
<div class="line"><span class="lineno">  109</span> </div>
<div class="line"><span class="lineno">  110</span>    <span class="comment">// Start MQTT server thread in simulation</span></div>
<div class="line"><span class="lineno">  111</span>    <a class="code hl_variable" href="test__mqtt_8cpp.xhtml#ae6c877ec448b1e99c6f9207301e622f6">attr_mqtt_broker</a>.stacksize = 3 * 1024; <span class="comment">// Required for ESP32-S2</span></div>
<div class="line"><span class="lineno">  112</span>    <a class="code hl_variable" href="test__mqtt_8cpp.xhtml#ae6c877ec448b1e99c6f9207301e622f6">attr_mqtt_broker</a>.detachstate = PTHREAD_CREATE_DETACHED;</div>
<div class="line"><span class="lineno">  113</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#acaf37fbb67ed375298e6a277500632ae">exit_request</a> = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">  114</span>    pthread_create(&amp;<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#ad8f69fc4a7778b405081abbf9fe6aa82">thread_mqtt_broker</a>, &amp;<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#ae6c877ec448b1e99c6f9207301e622f6">attr_mqtt_broker</a>, threadMQTTServer, NULL);</div>
<div class="line"><span class="lineno">  115</span> </div>
<div class="line"><span class="lineno">  116</span>    <span class="keyword">auto</span> start = <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>();</div>
<div class="line"><span class="lineno">  117</span>    <span class="keyword">constexpr</span> <span class="keyword">auto</span> timeout = 5s;</div>
<div class="line"><span class="lineno">  118</span>    <span class="keywordflow">while</span> (!<a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a0feac8d80c54d5fe02cfac6bfcb43a7e">broker</a>.<a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a>() &amp;&amp; <a class="code hl_function" href="namespacefabomatic_1_1_tasks.xhtml#adc67d1313c6695d813feb935eafdaf60">fabomatic::Tasks::arduinoNow</a>() - start &lt; timeout)</div>
<div class="line"><span class="lineno">  119</span>    {</div>
<div class="line"><span class="lineno">  120</span>      delay(100);</div>
<div class="line"><span class="lineno">  121</span>    }</div>
<div class="line"><span class="lineno">  122</span>    TEST_ASSERT_TRUE_MESSAGE(broker.<a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">isRunning</a>(), <span class="stringliteral">&quot;MQTT server not running&quot;</span>);</div>
<div class="line"><span class="lineno">  123</span>    delay(5000);</div>
<div class="line"><span class="lineno">  124</span>    TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">connect</a>(), <span class="stringliteral">&quot;Server connect failed in start MQTT&quot;</span>);</div>
<div class="line"><span class="lineno">  125</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_a492c94ed0682ad834ccd7ddc7c20a55a"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#a492c94ed0682ad834ccd7ddc7c20a55a">fabomatic::FabBackend::setChannel</a></div><div class="ttdeci">auto setChannel(int32_t channel) -&gt; void</div><div class="ttdoc">Sets the WiFi channel to use.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00583">FabBackend.cpp:583</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_fab_backend_xhtml_ad928751b2f967feaac0f2cb708c0d6e9"><div class="ttname"><a href="classfabomatic_1_1_fab_backend.xhtml#ad928751b2f967feaac0f2cb708c0d6e9">fabomatic::FabBackend::connectWiFi</a></div><div class="ttdeci">auto connectWiFi() -&gt; bool</div><div class="ttdoc">Connects to the WiFi network.</div><div class="ttdef"><b>Definition</b> <a href="_fab_backend_8cpp_source.xhtml#l00259">FabBackend.cpp:259</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a78a57e64b156c6d6d93104fec142740d"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a78a57e64b156c6d6d93104fec142740d">fabomatic::MockMQTTBroker::isRunning</a></div><div class="ttdeci">auto isRunning() const -&gt; bool</div><div class="ttdoc">Checks if the MQTT broker is running.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">MockMQTTBroker.cpp:109</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_a0feac8d80c54d5fe02cfac6bfcb43a7e"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#a0feac8d80c54d5fe02cfac6bfcb43a7e">fabomatic::tests::broker</a></div><div class="ttdeci">fabomatic::MockMQTTBroker broker</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00034">test_mqtt.cpp:34</a></div></div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_acaf37fbb67ed375298e6a277500632ae"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#acaf37fbb67ed375298e6a277500632ae">fabomatic::tests::exit_request</a></div><div class="ttdeci">std::atomic&lt; bool &gt; exit_request</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00037">test_mqtt.cpp:37</a></div></div>
<div class="ttc" id="atest__mqtt_8cpp_xhtml_ad8f69fc4a7778b405081abbf9fe6aa82"><div class="ttname"><a href="test__mqtt_8cpp.xhtml#ad8f69fc4a7778b405081abbf9fe6aa82">thread_mqtt_broker</a></div><div class="ttdeci">pthread_t thread_mqtt_broker</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00024">test_mqtt.cpp:24</a></div></div>
<div class="ttc" id="atest__mqtt_8cpp_xhtml_ae6c877ec448b1e99c6f9207301e622f6"><div class="ttname"><a href="test__mqtt_8cpp.xhtml#ae6c877ec448b1e99c6f9207301e622f6">attr_mqtt_broker</a></div><div class="ttdeci">pthread_attr_t attr_mqtt_broker</div><div class="ttdef"><b>Definition</b> <a href="test__mqtt_8cpp_source.xhtml#l00025">test_mqtt.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_tasks_8hpp_source.xhtml#l00017">fabomatic::Tasks::arduinoNow()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00025">attr_mqtt_broker</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00034">broker</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00021">fabomatic::FabBackend::configure()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00291">fabomatic::FabBackend::connect()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00259">fabomatic::FabBackend::connectWiFi()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00037">exit_request</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00109">fabomatic::MockMQTTBroker::isRunning()</a>, <a class="el" href="_saved_config_8cpp_source.xhtml#l00052">fabomatic::SavedConfig::LoadFromEEPROM()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00583">fabomatic::FabBackend::setChannel()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00024">thread_mqtt_broker</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">threadMQTTServer()</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aba7f55ee91c2d2a647fca6c8cc106c97_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aba7f55ee91c2d2a647fca6c8cc106c97_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5690a5ef67d3ca76c79c4eeeb8fb9b90" name="a5690a5ef67d3ca76c79c4eeeb8fb9b90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5690a5ef67d3ca76c79c4eeeb8fb9b90">&#9670;&#160;</a></span>test_steady_clock()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_steady_clock </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__chrono_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="test__chrono_8cpp_source.xhtml">test_chrono.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   31</span>  {</div>
<div class="line"><span class="lineno">   32</span>    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> nb_tests = 100;</div>
<div class="line"><span class="lineno">   33</span> </div>
<div class="line"><span class="lineno">   34</span>    <span class="keyword">auto</span> cpt = 0;</div>
<div class="line"><span class="lineno">   35</span>    TEST_ASSERT_TRUE_MESSAGE(std::chrono::steady_clock::is_steady, <span class="stringliteral">&quot;Steady clock available&quot;</span>);</div>
<div class="line"><span class="lineno">   36</span>    <span class="keyword">auto</span> previous_val = std::chrono::steady_clock::now();</div>
<div class="line"><span class="lineno">   37</span>    <span class="keywordflow">while</span> (cpt &lt; nb_tests)</div>
<div class="line"><span class="lineno">   38</span>    {</div>
<div class="line"><span class="lineno">   39</span>      <span class="keyword">auto</span> val = std::chrono::steady_clock::now();</div>
<div class="line"><span class="lineno">   40</span>      <span class="keyword">auto</span> duration = (val - previous_val);</div>
<div class="line"><span class="lineno">   41</span>      <span class="keyword">auto</span> count = duration.count();</div>
<div class="line"><span class="lineno">   42</span>      std::stringstream ss{};</div>
<div class="line"><span class="lineno">   43</span>      ss &lt;&lt; <span class="stringliteral">&quot;Duration = &quot;</span> &lt;&lt; duration &lt;&lt; <span class="stringliteral">&quot;, tse=&quot;</span> &lt;&lt; val.time_since_epoch();</div>
<div class="line"><span class="lineno">   44</span>      <span class="keyword">auto</span> log = ss.str().c_str();</div>
<div class="line"><span class="lineno">   45</span>      ESP_LOGI(<a class="code hl_variable" href="test__chrono_8cpp.xhtml#a8d86b08c6f07a1f85ba1ee2eeb214e9c">TAG4</a>, <span class="stringliteral">&quot;%s&quot;</span>, log);</div>
<div class="line"><span class="lineno">   46</span>      TEST_ASSERT_GREATER_THAN_MESSAGE(0, count, <span class="stringliteral">&quot;Duration&quot;</span>);</div>
<div class="line"><span class="lineno">   47</span>      ::delay(10);</div>
<div class="line"><span class="lineno">   48</span>      previous_val = val;</div>
<div class="line"><span class="lineno">   49</span>      cpt++;</div>
<div class="line"><span class="lineno">   50</span>    }</div>
<div class="line"><span class="lineno">   51</span>  }</div>
<div class="ttc" id="atest__chrono_8cpp_xhtml_a8d86b08c6f07a1f85ba1ee2eeb214e9c"><div class="ttname"><a href="test__chrono_8cpp.xhtml#a8d86b08c6f07a1f85ba1ee2eeb214e9c">TAG4</a></div><div class="ttdeci">static const char * TAG4</div><div class="ttdef"><b>Definition</b> <a href="test__chrono_8cpp_source.xhtml#l00012">test_chrono.cpp:12</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__chrono_8cpp_source.xhtml#l00012">TAG4</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__chrono_8cpp_source.xhtml#l00055">setup()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a5690a5ef67d3ca76c79c4eeeb8fb9b90_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af71fb65d41b9fc211910208ea71a4c91" name="af71fb65d41b9fc211910208ea71a4c91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af71fb65d41b9fc211910208ea71a4c91">&#9670;&#160;</a></span>test_stop_broker()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_stop_broker </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  128</span>  {</div>
<div class="line"><span class="lineno">  129</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#acaf37fbb67ed375298e6a277500632ae">exit_request</a> = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  130</span>    pthread_join(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#ad8f69fc4a7778b405081abbf9fe6aa82">thread_mqtt_broker</a>, NULL);</div>
<div class="line"><span class="lineno">  131</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__mqtt_8cpp_source.xhtml#l00037">exit_request</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00024">thread_mqtt_broker</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af71fb65d41b9fc211910208ea71a4c91_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac1005faec6496778a7981b3695005b4e" name="ac1005faec6496778a7981b3695005b4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1005faec6496778a7981b3695005b4e">&#9670;&#160;</a></span>test_stop_start_tasks()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_stop_start_tasks </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  102</span>  {</div>
<div class="line"><span class="lineno">  103</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a9bbef7cf45ab43901130143647b0f495">create_tasks</a>(scheduler, 150ms);</div>
<div class="line"><span class="lineno">  104</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#a203784237087f7f1b0b77c15bcdb85f9">taskCount</a>(), <span class="stringliteral">&quot;Scheduler does not contain all tasks&quot;</span>);</div>
<div class="line"><span class="lineno">  105</span> </div>
<div class="line"><span class="lineno">  106</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;t : <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#ad0120073d4ac1eb75d3f13dd4c3e9341">tasks</a>)</div>
<div class="line"><span class="lineno">  107</span>    {</div>
<div class="line"><span class="lineno">  108</span>      t-&gt;disable();</div>
<div class="line"><span class="lineno">  109</span>    }</div>
<div class="line"><span class="lineno">  110</span> </div>
<div class="line"><span class="lineno">  111</span>    task_counter = 0;</div>
<div class="line"><span class="lineno">  112</span>    run_for_duration(execute, 150ms);</div>
<div class="line"><span class="lineno">  113</span>    TEST_ASSERT_EQUAL_MESSAGE(0, task_counter, <span class="stringliteral">&quot;Stopped tasks has been executed&quot;</span>);</div>
<div class="line"><span class="lineno">  114</span> </div>
<div class="line"><span class="lineno">  115</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;t : tasks)</div>
<div class="line"><span class="lineno">  116</span>    {</div>
<div class="line"><span class="lineno">  117</span>      t-&gt;enable();</div>
<div class="line"><span class="lineno">  118</span>    }</div>
<div class="line"><span class="lineno">  119</span> </div>
<div class="line"><span class="lineno">  120</span>    task_counter = 0;</div>
<div class="line"><span class="lineno">  121</span>    run_for_duration(execute, 150ms);</div>
<div class="line"><span class="lineno">  122</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, task_counter, <span class="stringliteral">&quot;Started tasks have not all been executed&quot;</span>);</div>
<div class="line"><span class="lineno">  123</span> </div>
<div class="line"><span class="lineno">  124</span>    task_counter = 0;</div>
<div class="line"><span class="lineno">  125</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;t : tasks)</div>
<div class="line"><span class="lineno">  126</span>    {</div>
<div class="line"><span class="lineno">  127</span>      t-&gt;updateSchedule();</div>
<div class="line"><span class="lineno">  128</span>    }</div>
<div class="line"><span class="lineno">  129</span>    <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#af731a8053ea2031b72a146436546214c">execute</a>();</div>
<div class="line"><span class="lineno">  130</span>    TEST_ASSERT_EQUAL_MESSAGE(NB_TASKS, task_counter, <span class="stringliteral">&quot;Restarted tasks did not run immediately&quot;</span>);</div>
<div class="line"><span class="lineno">  131</span>  }</div>
<div class="ttc" id="anamespacefabomatic_1_1tests_xhtml_af731a8053ea2031b72a146436546214c"><div class="ttname"><a href="namespacefabomatic_1_1tests.xhtml#af731a8053ea2031b72a146436546214c">fabomatic::tests::execute</a></div><div class="ttdeci">const auto execute</div><div class="ttdef"><b>Definition</b> <a href="test__tasks_8cpp_source.xhtml#l00025">test_tasks.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00025">execute</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00020">NB_TASKS</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00070">run_for_duration()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00024">scheduler</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00023">task_counter</a>, <a class="el" href="_tasks_8cpp_source.xhtml#l00105">fabomatic::Tasks::Scheduler::taskCount()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00022">tasks</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00145">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_ac1005faec6496778a7981b3695005b4e_cgraph.svg" width="100%" height="437"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_ac1005faec6496778a7981b3695005b4e_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a294b4767ecf1e1d11cc31dafb2541d23" name="a294b4767ecf1e1d11cc31dafb2541d23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a294b4767ecf1e1d11cc31dafb2541d23">&#9670;&#160;</a></span>test_taskCheckRfid()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskCheckRfid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>periodic check for new RFID card </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00245">245</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  246</span>  {</div>
<div class="line"><span class="lineno">  247</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a25bdc3a49d850aa49f92faf951b68efb">checkRfid</a>();</div>
<div class="line"><span class="lineno">  248</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00549">fabomatic::BoardLogic::checkRfid()</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a294b4767ecf1e1d11cc31dafb2541d23_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a88a4242d48bfa4a0337df522d303c367" name="a88a4242d48bfa4a0337df522d303c367"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88a4242d48bfa4a0337df522d303c367">&#9670;&#160;</a></span>test_taskConnect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskConnect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Opens WiFi and server connection and updates board state accordingly. </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00222">222</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  223</span>  {</div>
<div class="line"><span class="lineno">  224</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">  225</span>    <span class="keywordflow">if</span> (!server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">isOnline</a>())</div>
<div class="line"><span class="lineno">  226</span>    {</div>
<div class="line"><span class="lineno">  227</span>      <span class="comment">// connection to wifi</span></div>
<div class="line"><span class="lineno">  228</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a3c38d7a3ed7952c6d6297efdf50ea4dd">changeStatus</a>(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458">BoardLogic::Status::Connecting</a>);</div>
<div class="line"><span class="lineno">  229</span> </div>
<div class="line"><span class="lineno">  230</span>      <span class="comment">// Try to connect</span></div>
<div class="line"><span class="lineno">  231</span>      server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#a1a45f556aadcbc428d14b7c7577ed43d">connect</a>();</div>
<div class="line"><span class="lineno">  232</span>      <span class="comment">// Refresh after connection</span></div>
<div class="line"><span class="lineno">  233</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a3c38d7a3ed7952c6d6297efdf50ea4dd">changeStatus</a>(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">isOnline</a>() ? <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7">BoardLogic::Status::Connected</a> : <a class="code hl_class" href="classfabomatic_1_1_board_logic.xhtml">BoardLogic</a>::<a class="code hl_enumeration" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0">Status</a>::Offline);</div>
<div class="line"><span class="lineno">  234</span>    }</div>
<div class="line"><span class="lineno">  235</span> </div>
<div class="line"><span class="lineno">  236</span>    <span class="keywordflow">if</span> (server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">isOnline</a>())</div>
<div class="line"><span class="lineno">  237</span>    {</div>
<div class="line"><span class="lineno">  238</span>      ESP_LOGI(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;taskConnect - online, calling refreshFromServer&quot;</span>);</div>
<div class="line"><span class="lineno">  239</span>      <span class="comment">// Get machine data from the server if it is online</span></div>
<div class="line"><span class="lineno">  240</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#aa0d3d3aa742eba1ffd00b97868ce7edc">refreshFromServer</a>();</div>
<div class="line"><span class="lineno">  241</span>    }</div>
<div class="line"><span class="lineno">  242</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml">fabomatic::BoardLogic</a></div><div class="ttdoc">Main class implementing the state changes.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8hpp_source.xhtml#l00019">BoardLogic.hpp:20</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a3885e1cd078bb49bbf54e3ddfe245ef0"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0">fabomatic::BoardLogic::Status</a></div><div class="ttdeci">Status</div><div class="ttdoc">Main states of the board.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8hpp_source.xhtml#l00023">BoardLogic.hpp:24</a></div></div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_aa0d3d3aa742eba1ffd00b97868ce7edc"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#aa0d3d3aa742eba1ffd00b97868ce7edc">fabomatic::BoardLogic::refreshFromServer</a></div><div class="ttdeci">auto refreshFromServer() -&gt; void</div><div class="ttdoc">connects and polls the server for up-to-date machine information</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00042">BoardLogic.cpp:42</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00273">fabomatic::BoardLogic::changeStatus()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00291">fabomatic::FabBackend::connect()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a2ec0d16e4ca169baedb9b2d50ec5c6d7">fabomatic::BoardLogic::Connected</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae321c53b354930ba96f0243e652df458">fabomatic::BoardLogic::Connecting</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00235">fabomatic::FabBackend::isOnline()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a8d9da4bc0e49a50e09ac9f7e56789d39">fabomatic::BoardLogic::Offline</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00042">fabomatic::BoardLogic::refreshFromServer()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a88a4242d48bfa4a0337df522d303c367_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a046c348aaf1a15bf80358065553e748b" name="a046c348aaf1a15bf80358065553e748b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a046c348aaf1a15bf80358065553e748b">&#9670;&#160;</a></span>test_taskEspWatchdog()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskEspWatchdog </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Keep the ESP32 HW watchdog alive. If code gets stuck this will cause an automatic reset. </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00274">274</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  275</span>  {</div>
<div class="line"><span class="lineno">  276</span>    <span class="keyword">static</span> <span class="keyword">auto</span> initialized = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">  277</span> </div>
<div class="line"><span class="lineno">  278</span>    <span class="keywordflow">if</span> (conf::tasks::WATCHDOG_TIMEOUT &gt; 0s)</div>
<div class="line"><span class="lineno">  279</span>    {</div>
<div class="line"><span class="lineno">  280</span>      <span class="keywordflow">if</span> (!initialized)</div>
<div class="line"><span class="lineno">  281</span>      {</div>
<div class="line"><span class="lineno">  282</span>        initialized = esp32::setupWatchdog(conf::tasks::WATCHDOG_TIMEOUT);</div>
<div class="line"><span class="lineno">  283</span>        TEST_ASSERT_TRUE_MESSAGE(initialized, <span class="stringliteral">&quot;Watchdog initialization works&quot;</span>);</div>
<div class="line"><span class="lineno">  284</span>      }</div>
<div class="line"><span class="lineno">  285</span>      <span class="keywordflow">if</span> (initialized)</div>
<div class="line"><span class="lineno">  286</span>      {</div>
<div class="line"><span class="lineno">  287</span>        TEST_ASSERT_TRUE_MESSAGE(esp32::signalWatchdog(), <span class="stringliteral">&quot;Watchdog signalling failed&quot;</span>);</div>
<div class="line"><span class="lineno">  288</span>      }</div>
<div class="line"><span class="lineno">  289</span>    }</div>
<div class="line"><span class="lineno">  290</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_espressif_8cpp_source.xhtml#l00032">fabomatic::esp32::setupWatchdog()</a>, <a class="el" href="_espressif_8cpp_source.xhtml#l00056">fabomatic::esp32::signalWatchdog()</a>, and <a class="el" href="conf_8hpp_source.xhtml#l00122">fabomatic::conf::tasks::WATCHDOG_TIMEOUT</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a046c348aaf1a15bf80358065553e748b_cgraph.svg" width="632" height="110"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae0c2cd74b089905fbdebeca807403606" name="ae0c2cd74b089905fbdebeca807403606"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0c2cd74b089905fbdebeca807403606">&#9670;&#160;</a></span>test_taskMQTTAlive()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskMQTTAlive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>sends the MQTT alive message </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00308">308</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  309</span>  {</div>
<div class="line"><span class="lineno">  310</span>    <span class="keyword">auto</span> &amp;server = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>();</div>
<div class="line"><span class="lineno">  311</span>    <span class="keywordflow">if</span> (server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aef092e0e1db0c3539d5474fad2456255">isOnline</a>())</div>
<div class="line"><span class="lineno">  312</span>    {</div>
<div class="line"><span class="lineno">  313</span>      TEST_ASSERT_TRUE_MESSAGE(server.<a class="code hl_function" href="classfabomatic_1_1_fab_backend.xhtml#aaf05998bb9dec17ae98283969109bb2d">loop</a>(), <span class="stringliteral">&quot;test_taskMQTTAlive: Server loop failed&quot;</span>);</div>
<div class="line"><span class="lineno">  314</span>    }</div>
<div class="line"><span class="lineno">  315</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_fab_backend_8cpp_source.xhtml#l00235">fabomatic::FabBackend::isOnline()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, and <a class="el" href="_fab_backend_8cpp_source.xhtml#l00184">fabomatic::FabBackend::loop()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_ae0c2cd74b089905fbdebeca807403606_cgraph.svg" width="358" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af592b66b287714a90a895709829622b3" name="af592b66b287714a90a895709829622b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af592b66b287714a90a895709829622b3">&#9670;&#160;</a></span>test_taskRfidWatchdog()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskRfidWatchdog </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>checks the RFID chip status and re-init it if necessary. </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00293">293</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  294</span>  {</div>
<div class="line"><span class="lineno">  295</span>    <span class="keyword">auto</span> result = <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.selfTest();</div>
<div class="line"><span class="lineno">  296</span>    TEST_ASSERT_TRUE_MESSAGE(result, <span class="stringliteral">&quot;test_taskRfidWatchdog: RFID chip failure&quot;</span>);</div>
<div class="line"><span class="lineno">  297</span>    <span class="keywordflow">if</span> (!result)</div>
<div class="line"><span class="lineno">  298</span>    {</div>
<div class="line"><span class="lineno">  299</span>      ESP_LOGE(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;RFID chip failure&quot;</span>);</div>
<div class="line"><span class="lineno">  300</span> </div>
<div class="line"><span class="lineno">  301</span>      <span class="comment">// Infinite retry until success or hw watchdog timeout</span></div>
<div class="line"><span class="lineno">  302</span>      <span class="keywordflow">while</span> (!<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.rfidInit())</div>
<div class="line"><span class="lineno">  303</span>        TEST_FAIL_MESSAGE(<span class="stringliteral">&quot;Init RFID chip failed&quot;</span>);</div>
<div class="line"><span class="lineno">  304</span>    }</div>
<div class="line"><span class="lineno">  305</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>.</p>

</div>
</div>
<a id="a7cd22311b16fc7c256a30ba4c2f6f387" name="a7cd22311b16fc7c256a30ba4c2f6f387"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cd22311b16fc7c256a30ba4c2f6f387">&#9670;&#160;</a></span>test_taskVarious()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_taskVarious </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>blink led </p>

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00251">251</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  252</span>  {</div>
<div class="line"><span class="lineno">  253</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ad05b4db308773e56d866fe87d34022d9">blinkLed</a>();</div>
<div class="line"><span class="lineno">  254</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac05af486941c620c9494ba545dd83c3d">checkPowerOff</a>();</div>
<div class="line"><span class="lineno">  255</span> </div>
<div class="line"><span class="lineno">  256</span>    <span class="keywordflow">if</span> (<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isShutdownImminent())</div>
<div class="line"><span class="lineno">  257</span>    {</div>
<div class="line"><span class="lineno">  258</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac198a07d00fda36a527cd9db2d97efc1">beepFail</a>();</div>
<div class="line"><span class="lineno">  259</span>      ESP_LOGI(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;Machine is about to shutdown&quot;</span>);</div>
<div class="line"><span class="lineno">  260</span>    }</div>
<div class="line"><span class="lineno">  261</span> </div>
<div class="line"><span class="lineno">  262</span>    <span class="comment">// auto logout after delay</span></div>
<div class="line"><span class="lineno">  263</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>();</div>
<div class="line"><span class="lineno">  264</span>    <span class="keywordflow">if</span> (machine.isAutologoffExpired())</div>
<div class="line"><span class="lineno">  265</span>    {</div>
<div class="line"><span class="lineno">  266</span>      ESP_LOGI(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;Auto-logging out user %s\r\n&quot;</span>, machine.getActiveUser().holder_name.data());</div>
<div class="line"><span class="lineno">  267</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a98a15cc323f97adc394c29e897afc12d">logout</a>();</div>
<div class="line"><span class="lineno">  268</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac198a07d00fda36a527cd9db2d97efc1">beepFail</a>();</div>
<div class="line"><span class="lineno">  269</span>    }</div>
<div class="line"><span class="lineno">  270</span>  }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00450">fabomatic::BoardLogic::beepFail()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00499">fabomatic::BoardLogic::blinkLed()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00577">fabomatic::BoardLogic::checkPowerOff()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00112">fabomatic::BoardLogic::logout()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_a7cd22311b16fc7c256a30ba4c2f6f387_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="afa92fef9250d918ee02c79dbf2de2546" name="afa92fef9250d918ee02c79dbf2de2546"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa92fef9250d918ee02c79dbf2de2546">&#9670;&#160;</a></span>test_user_autologoff()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_user_autologoff </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00209">209</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  210</span>  {</div>
<div class="line"><span class="lineno">  211</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>);</div>
<div class="line"><span class="lineno">  212</span>    <span class="keyword">auto</span> &amp;machine = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a8332053c1e3343652632bde1a81a9ff4">getMachineForTesting</a>();</div>
<div class="line"><span class="lineno">  213</span>    machine.setGracePeriod(5s);</div>
<div class="line"><span class="lineno">  214</span> </div>
<div class="line"><span class="lineno">  215</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getAutologoffDelay() == conf::machine::DEFAULT_AUTO_LOGOFF_DELAY, <span class="stringliteral">&quot;Autologoff delay not default&quot;</span>);</div>
<div class="line"><span class="lineno">  216</span> </div>
<div class="line"><span class="lineno">  217</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a49df0c7440292476d25f1e76973cadb4">setAutologoffDelay</a>(10s);</div>
<div class="line"><span class="lineno">  218</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getAutologoffDelay() == 10s, <span class="stringliteral">&quot;Autologoff delay not 10s&quot;</span>);</div>
<div class="line"><span class="lineno">  219</span> </div>
<div class="line"><span class="lineno">  220</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0));</div>
<div class="line"><span class="lineno">  221</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not LoggedIn&quot;</span>);</div>
<div class="line"><span class="lineno">  222</span>    TEST_ASSERT_TRUE_MESSAGE(machine.getPowerState() == Machine::PowerState::PoweredOn, <span class="stringliteral">&quot;Machine is powered on&quot;</span>);</div>
<div class="line"><span class="lineno">  223</span>    <span class="comment">// Card away</span></div>
<div class="line"><span class="lineno">  224</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  225</span> </div>
<div class="line"><span class="lineno">  226</span>    TEST_ASSERT_FALSE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  227</span>    TEST_ASSERT_FALSE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isAutologoffExpired(), <span class="stringliteral">&quot;Autologoff not expired&quot;</span>);</div>
<div class="line"><span class="lineno">  228</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineInUse&quot;</span>);</div>
<div class="line"><span class="lineno">  229</span> </div>
<div class="line"><span class="lineno">  230</span>    <span class="comment">// Now shall expire afer 10s</span></div>
<div class="line"><span class="lineno">  231</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt, 10s);</div>
<div class="line"><span class="lineno">  232</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isAutologoffExpired(), <span class="stringliteral">&quot;Autologoff expired&quot;</span>);</div>
<div class="line"><span class="lineno">  233</span> </div>
<div class="line"><span class="lineno">  234</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a98a15cc323f97adc394c29e897afc12d">logout</a>();</div>
<div class="line"><span class="lineno">  235</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt, 5s);</div>
<div class="line"><span class="lineno">  236</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  237</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">BoardLogic::Status::MachineFree</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not MachineFree&quot;</span>);</div>
<div class="line"><span class="lineno">  238</span>    TEST_ASSERT_TRUE_MESSAGE(machine.canPowerOff(), <span class="stringliteral">&quot;Machine should be powered off&quot;</span>);</div>
<div class="line"><span class="lineno">  239</span>    machine.power(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  240</span>    TEST_ASSERT_EQUAL_UINT8_MESSAGE(Machine::PowerState::PoweredOff, machine.getPowerState(), <span class="stringliteral">&quot;(2) Machine is powered off&quot;</span>);</div>
<div class="line"><span class="lineno">  241</span> </div>
<div class="line"><span class="lineno">  242</span>    <span class="comment">// Check Grace period</span></div>
<div class="line"><span class="lineno">  243</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0), 1s); <span class="comment">// Login</span></div>
<div class="line"><span class="lineno">  244</span>    TEST_ASSERT_EQUAL_UINT8_MESSAGE(Machine::PowerState::PoweredOn, machine.getPowerState(), <span class="stringliteral">&quot;(2) Machine is ON&quot;</span>);</div>
<div class="line"><span class="lineno">  245</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(0), 1s); <span class="comment">// Logout</span></div>
<div class="line"><span class="lineno">  246</span>    TEST_ASSERT_EQUAL_UINT8_MESSAGE(Machine::PowerState::WaitingPowerOff, machine.getPowerState(), <span class="stringliteral">&quot;(2) Machine is waiting for power off&quot;</span>);</div>
<div class="line"><span class="lineno">  247</span>    TEST_ASSERT_TRUE_MESSAGE(machine.isShutdownImminent(), <span class="stringliteral">&quot;Machine in grace period&quot;</span>);</div>
<div class="line"><span class="lineno">  248</span>    TEST_ASSERT_FALSE_MESSAGE(machine.canPowerOff(), <span class="stringliteral">&quot;Machine cannot be powered off yet&quot;</span>);</div>
<div class="line"><span class="lineno">  249</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a2600320f41c9fa343c66058ecb12b5ee">simulate_rfid_card</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt, 5s); <span class="comment">// Let grace period expire</span></div>
<div class="line"><span class="lineno">  250</span>    TEST_ASSERT_FALSE_MESSAGE(machine.isShutdownImminent(), <span class="stringliteral">&quot;Machine is still in grace period&quot;</span>);</div>
<div class="line"><span class="lineno">  251</span>    TEST_ASSERT_TRUE_MESSAGE(machine.canPowerOff(), <span class="stringliteral">&quot;Machine can now be powered off&quot;</span>);</div>
<div class="line"><span class="lineno">  252</span>    machine.power(<span class="keyword">false</span>);</div>
<div class="line"><span class="lineno">  253</span> </div>
<div class="line"><span class="lineno">  254</span>    TEST_ASSERT_EQUAL_UINT8_MESSAGE(Machine::PowerState::PoweredOff, machine.getPowerState(), <span class="stringliteral">&quot;Machine is powered off&quot;</span>);</div>
<div class="line"><span class="lineno">  255</span> </div>
<div class="line"><span class="lineno">  256</span>    <span class="keyword">auto</span> save_result = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>().saveBuffer();</div>
<div class="line"><span class="lineno">  257</span>    TEST_ASSERT_TRUE_MESSAGE(save_result, <span class="stringliteral">&quot;Saving buffered messages works&quot;</span>);</div>
<div class="line"><span class="lineno">  258</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a49df0c7440292476d25f1e76973cadb4"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a49df0c7440292476d25f1e76973cadb4">fabomatic::BoardLogic::setAutologoffDelay</a></div><div class="ttdeci">auto setAutologoffDelay(std::chrono::seconds delay) -&gt; void</div><div class="ttdoc">Sets the autologoff delay.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00624">BoardLogic.cpp:624</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="conf_8hpp_source.xhtml#l00059">fabomatic::conf::machine::DEFAULT_AUTO_LOGOFF_DELAY</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00587">fabomatic::BoardLogic::getMachineForTesting()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">fabomatic::BoardLogic::LoggedIn</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00112">fabomatic::BoardLogic::logout()</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">fabomatic::BoardLogic::MachineFree</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::MachineInUse</a>, <a class="el" href="classfabomatic_1_1_machine.xhtml#a409acc0089d7cfe849b2e775840e5838ab161cc0f80e1c236e1f0816a42c4a00c">fabomatic::Machine::PoweredOff</a>, <a class="el" href="classfabomatic_1_1_machine.xhtml#a409acc0089d7cfe849b2e775840e5838a5fb98f2976a3f8c8980354a730398a87">fabomatic::Machine::PoweredOn</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00624">fabomatic::BoardLogic::setAutologoffDelay()</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>, and <a class="el" href="classfabomatic_1_1_machine.xhtml#a409acc0089d7cfe849b2e775840e5838a878a40722160ead08a1f3cdef3e70a14">fabomatic::Machine::WaitingPowerOff</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_afa92fef9250d918ee02c79dbf2de2546_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_afa92fef9250d918ee02c79dbf2de2546_icgraph.svg" width="254" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aab0f4e1439b281ffef8be51db9a81f9d" name="aab0f4e1439b281ffef8be51db9a81f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab0f4e1439b281ffef8be51db9a81f9d">&#9670;&#160;</a></span>test_whitelist_no_network()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void fabomatic::tests::test_whitelist_no_network </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__logic_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="test__logic_8cpp_source.xhtml">test_logic.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  118</span>  {</div>
<div class="line"><span class="lineno">  119</span>    <a class="code hl_function" href="namespacefabomatic_1_1tests.xhtml#a6a7645a865dc822746f972ea6f43224d">machine_init</a>(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>);</div>
<div class="line"><span class="lineno">  120</span> </div>
<div class="line"><span class="lineno">  121</span>    <span class="comment">// Check whitelist is recognized</span></div>
<div class="line"><span class="lineno">  122</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;wle : test_whitelist)</div>
<div class="line"><span class="lineno">  123</span>    {</div>
<div class="line"><span class="lineno">  124</span>      <span class="keyword">const</span> <span class="keyword">auto</span> [card_uid, level, name] = wle;</div>
<div class="line"><span class="lineno">  125</span>      TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a51390e6bf10c4de427abd7f175a2e6a8">authorize</a>(card_uid), <span class="stringliteral">&quot;Card not authorized&quot;</span>);</div>
<div class="line"><span class="lineno">  126</span>      TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>() == <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, <span class="stringliteral">&quot;Status not LoggedIn&quot;</span>);</div>
<div class="line"><span class="lineno">  127</span>      TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getActiveUser().card_uid == card_uid, <span class="stringliteral">&quot;User UID not equal&quot;</span>);</div>
<div class="line"><span class="lineno">  128</span>      <span class="comment">// Name may not be equal because of cache RFID feature which does not save strings</span></div>
<div class="line"><span class="lineno">  129</span>      <span class="comment">// TEST_ASSERT_TRUE_MESSAGE(logic.getMachine().getActiveUser().holder_name == name, &quot;User name not equal&quot;);</span></div>
<div class="line"><span class="lineno">  130</span>      TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().getActiveUser().user_level == level, <span class="stringliteral">&quot;User level not equal&quot;</span>);</div>
<div class="line"><span class="lineno">  131</span>      <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a98a15cc323f97adc394c29e897afc12d">logout</a>();</div>
<div class="line"><span class="lineno">  132</span>      TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>() == <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">BoardLogic::Status::LoggedOut</a>, <span class="stringliteral">&quot;Status not LoggedOut&quot;</span>);</div>
<div class="line"><span class="lineno">  133</span>    }</div>
<div class="line"><span class="lineno">  134</span> </div>
<div class="line"><span class="lineno">  135</span>    <span class="comment">// Check that machine is free</span></div>
<div class="line"><span class="lineno">  136</span>    <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a25bdc3a49d850aa49f92faf951b68efb">checkRfid</a>();</div>
<div class="line"><span class="lineno">  137</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>() == <a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">BoardLogic::Status::MachineFree</a>, <span class="stringliteral">&quot;Status not MachineFree&quot;</span>);</div>
<div class="line"><span class="lineno">  138</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine not free&quot;</span>);</div>
<div class="line"><span class="lineno">  139</span> </div>
<div class="line"><span class="lineno">  140</span>    <span class="comment">// Logon simulating RFID tag</span></div>
<div class="line"><span class="lineno">  141</span>    <span class="keyword">const</span> <span class="keyword">auto</span> card_uid = <a class="code hl_function" href="test__logic_8cpp.xhtml#aef0e78ba3db8c253be4c46687c3c800c">get_test_uid</a>(1);</div>
<div class="line"><span class="lineno">  142</span> </div>
<div class="line"><span class="lineno">  143</span>    simulate_rfid_card(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid, std::nullopt);</div>
<div class="line"><span class="lineno">  144</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.isNewCardPresent(), <span class="stringliteral">&quot;New card not present&quot;</span>);</div>
<div class="line"><span class="lineno">  145</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.readCardSerial().has_value(), <span class="stringliteral">&quot;Card serial not read&quot;</span>);</div>
<div class="line"><span class="lineno">  146</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>.readCardSerial().value() == card_uid, <span class="stringliteral">&quot;Card serial not equal&quot;</span>);</div>
<div class="line"><span class="lineno">  147</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">BoardLogic::Status::LoggedIn</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a17520059a761d7b76513724f8f56dc9c">getStatus</a>(), <span class="stringliteral">&quot;Status not LoggedIn&quot;</span>);</div>
<div class="line"><span class="lineno">  148</span> </div>
<div class="line"><span class="lineno">  149</span>    <span class="comment">// Card away, machine shall be busy</span></div>
<div class="line"><span class="lineno">  150</span>    <span class="keyword">auto</span> new_state = simulate_rfid_card(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, std::nullopt);</div>
<div class="line"><span class="lineno">  151</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">BoardLogic::Status::MachineInUse</a>, new_state, <span class="stringliteral">&quot;Status not MachineInUse&quot;</span>);</div>
<div class="line"><span class="lineno">  152</span>    TEST_ASSERT_FALSE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is free&quot;</span>);</div>
<div class="line"><span class="lineno">  153</span> </div>
<div class="line"><span class="lineno">  154</span>    <span class="comment">// Same card back, shall logout user</span></div>
<div class="line"><span class="lineno">  155</span>    new_state = simulate_rfid_card(<a class="code hl_variable" href="test__logic_8cpp.xhtml#af6931c3ecf1cb64d3ff6cb0eab2e590c">rfid</a>, <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>, card_uid);</div>
<div class="line"><span class="lineno">  156</span>    TEST_ASSERT_EQUAL_UINT16_MESSAGE(<a class="code hl_enumvalue" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">BoardLogic::Status::LoggedOut</a>, new_state, <span class="stringliteral">&quot;Status not LoggedOut&quot;</span>);</div>
<div class="line"><span class="lineno">  157</span>    TEST_ASSERT_TRUE_MESSAGE(<a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#a164e40105242d0b7c56c6b4f21155101">getMachine</a>().isFree(), <span class="stringliteral">&quot;Machine is not free&quot;</span>);</div>
<div class="line"><span class="lineno">  158</span> </div>
<div class="line"><span class="lineno">  159</span>    <span class="keyword">auto</span> save_result = <a class="code hl_variable" href="test__logic_8cpp.xhtml#a07dd6eb8e9dc2dc50bf69ef6032c5055">logic</a>.<a class="code hl_function" href="classfabomatic_1_1_board_logic.xhtml#ac2feade03b2a74a1998dcec282a8eacb">getServer</a>().saveBuffer();</div>
<div class="line"><span class="lineno">  160</span>    TEST_ASSERT_TRUE_MESSAGE(save_result, <span class="stringliteral">&quot;Saving buffered messages works&quot;</span>);</div>
<div class="line"><span class="lineno">  161</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_board_logic_xhtml_a51390e6bf10c4de427abd7f175a2e6a8"><div class="ttname"><a href="classfabomatic_1_1_board_logic.xhtml#a51390e6bf10c4de427abd7f175a2e6a8">fabomatic::BoardLogic::authorize</a></div><div class="ttdeci">auto authorize(const card::uid_t uid) -&gt; bool</div><div class="ttdoc">Checks if the card UID is valid, and tries to check the user in to the machine.</div><div class="ttdef"><b>Definition</b> <a href="_board_logic_8cpp_source.xhtml#l00164">BoardLogic.cpp:164</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="_board_logic_8cpp_source.xhtml#l00164">fabomatic::BoardLogic::authorize()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00549">fabomatic::BoardLogic::checkRfid()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00601">fabomatic::BoardLogic::getMachine()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00634">fabomatic::BoardLogic::getServer()</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00440">fabomatic::BoardLogic::getStatus()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0afebcd1edf6010db4858e623d1dd2f3bc">fabomatic::BoardLogic::LoggedIn</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0ae27816978dfe5f0f3acd72cee314955f">fabomatic::BoardLogic::LoggedOut</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">logic</a>, <a class="el" href="_board_logic_8cpp_source.xhtml#l00112">fabomatic::BoardLogic::logout()</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a276dffa823d39fc437cea5e3fd7706ea">fabomatic::BoardLogic::MachineFree</a>, <a class="el" href="classfabomatic_1_1_board_logic.xhtml#a3885e1cd078bb49bbf54e3ddfe245ef0a0bbe2b46fd8bc4ccf79f21530983518d">fabomatic::BoardLogic::MachineInUse</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">rfid</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>, and <a class="el" href="test__common_8h_source.xhtml#l00015">test_whitelist</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00354">setup()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aab0f4e1439b281ffef8be51db9a81f9d_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_aab0f4e1439b281ffef8be51db9a81f9d_icgraph.svg" width="263" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af046ac0a4d53b62e8f3bf0cec2d07440" name="af046ac0a4d53b62e8f3bf0cec2d07440"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af046ac0a4d53b62e8f3bf0cec2d07440">&#9670;&#160;</a></span>threadMQTTServer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * fabomatic::tests::threadMQTTServer </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>arg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">39</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   40</span>  {</div>
<div class="line"><span class="lineno">   41</span>    <span class="keywordflow">while</span> (!exit_request)</div>
<div class="line"><span class="lineno">   42</span>    {</div>
<div class="line"><span class="lineno">   43</span>      <a class="code hl_variable" href="namespacefabomatic_1_1tests.xhtml#a0feac8d80c54d5fe02cfac6bfcb43a7e">broker</a>.<a class="code hl_function" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">mainLoop</a>();</div>
<div class="line"><span class="lineno">   44</span>      delay(15);</div>
<div class="line"><span class="lineno">   45</span>    }</div>
<div class="line"><span class="lineno">   46</span>    ESP_LOGI(<a class="code hl_variable" href="test__mqtt_8cpp.xhtml#a61fc6209a48e9414bc6f6dff41c34f09">TAG3</a>, <span class="stringliteral">&quot;MQTT server thread exiting&quot;</span>);</div>
<div class="line"><span class="lineno">   47</span>    <span class="keywordflow">return</span> arg;</div>
<div class="line"><span class="lineno">   48</span>  }</div>
<div class="ttc" id="aclassfabomatic_1_1_mock_m_q_t_t_broker_xhtml_a4cd18cc3fb887b17e4668bbf99a531e5"><div class="ttname"><a href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml#a4cd18cc3fb887b17e4668bbf99a531e5">fabomatic::MockMQTTBroker::mainLoop</a></div><div class="ttdeci">auto mainLoop() -&gt; void</div><div class="ttdoc">Main loop for the MQTT broker.</div><div class="ttdef"><b>Definition</b> <a href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">MockMQTTBroker.cpp:239</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="test__mqtt_8cpp_source.xhtml#l00034">broker</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00037">exit_request</a>, <a class="el" href="_mock_m_q_t_t_broker_8cpp_source.xhtml#l00239">fabomatic::MockMQTTBroker::mainLoop()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00025">TAG3</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">test_start_broker()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af046ac0a4d53b62e8f3bf0cec2d07440_cgraph.svg" width="646" height="183"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespacefabomatic_1_1tests_af046ac0a4d53b62e8f3bf0cec2d07440_icgraph.svg" width="458" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a0feac8d80c54d5fe02cfac6bfcb43a7e" name="a0feac8d80c54d5fe02cfac6bfcb43a7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0feac8d80c54d5fe02cfac6bfcb43a7e">&#9670;&#160;</a></span>broker</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_mock_m_q_t_t_broker.xhtml">fabomatic::MockMQTTBroker</a> fabomatic::tests::broker</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">test_start_broker()</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">threadMQTTServer()</a>.</p>

</div>
</div>
<a id="af731a8053ea2031b72a146436546214c" name="af731a8053ea2031b72a146436546214c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af731a8053ea2031b72a146436546214c">&#9670;&#160;</a></span>execute</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const auto fabomatic::tests::execute</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= []()</div>
<div class="line">  { scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#aff9b0c44cc0bef222932a681ace0d406">execute</a>(); }</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   26</span>  { scheduler.<a class="code hl_function" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml#aff9b0c44cc0bef222932a681ace0d406">execute</a>(); };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>

</div>
</div>
<a id="acaf37fbb67ed375298e6a277500632ae" name="acaf37fbb67ed375298e6a277500632ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acaf37fbb67ed375298e6a277500632ae">&#9670;&#160;</a></span>exit_request</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::atomic&lt;bool&gt; fabomatic::tests::exit_request {false}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   37</span>{<span class="keyword">false</span>};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">test_start_broker()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00127">test_stop_broker()</a>, and <a class="el" href="test__mqtt_8cpp_source.xhtml#l00039">threadMQTTServer()</a>.</p>

</div>
</div>
<a id="aa2f9f558fe3c311acc82ca6b7552c373" name="aa2f9f558fe3c311acc82ca6b7552c373"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2f9f558fe3c311acc82ca6b7552c373">&#9670;&#160;</a></span>lcd</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_l_c_d_wrapper.xhtml">fabomatic::LCDWrapper</a> fabomatic::tests::lcd {fabomatic::pins.lcd}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   32</span>{<a class="code hl_variable" href="namespacefabomatic.xhtml#a90e4180ab5a1ffd3393b4f0d6b01f2b3">fabomatic::pins</a>.<a class="code hl_variable" href="structfabomatic_1_1pins__config.xhtml#abd0d35daf6efede38501593182b6d574">lcd</a>};</div>
<div class="ttc" id="astructfabomatic_1_1pins__config_xhtml_abd0d35daf6efede38501593182b6d574"><div class="ttname"><a href="structfabomatic_1_1pins__config.xhtml#abd0d35daf6efede38501593182b6d574">fabomatic::pins_config::lcd</a></div><div class="ttdeci">lcd_config lcd</div><div class="ttdef"><b>Definition</b> <a href="_pins_config_8hpp_source.xhtml#l00069">PinsConfig.hpp:69</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00348">setUp()</a>.</p>

</div>
</div>
<a id="ae67aa957d270478a0793908703b77446" name="ae67aa957d270478a0793908703b77446"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae67aa957d270478a0793908703b77446">&#9670;&#160;</a></span>logic</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_board_logic.xhtml">fabomatic::BoardLogic</a> fabomatic::tests::logic</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00033">33</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00348">setUp()</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00079">test_check_transmission()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00050">test_create_buffered_messages()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00133">test_fabserver_calls()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00290">test_machine_allowed()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00041">test_machine_defaults()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00260">test_machine_maintenance()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00312">test_messages_buffered()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00163">test_one_user_at_a_time()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00070">test_simple_methods()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00097">test_start_broker()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00245">test_taskCheckRfid()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00222">test_taskConnect()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00308">test_taskMQTTAlive()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00251">test_taskVarious()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00209">test_user_autologoff()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00117">test_whitelist_no_network()</a>.</p>

</div>
</div>
<a id="a08af7cf7959700ad4a46d76a4f31dbb7" name="a08af7cf7959700ad4a46d76a4f31dbb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08af7cf7959700ad4a46d76a4f31dbb7">&#9670;&#160;</a></span>NB_TASKS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr int fabomatic::tests::NB_TASKS = 100</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>

</div>
</div>
<a id="a159f700a4f413190a0fd5eaa878b2cdd" name="a159f700a4f413190a0fd5eaa878b2cdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a159f700a4f413190a0fd5eaa878b2cdd">&#9670;&#160;</a></span>original</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_saved_config.xhtml">SavedConfig</a> fabomatic::tests::original</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="test__savedconfig_8cpp_source.xhtml">test_savedconfig.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__savedconfig_8cpp_source.xhtml#l00048">test_changes()</a>.</p>

</div>
</div>
<a id="ab11df5855a7b6969c5b44b095bce756f" name="ab11df5855a7b6969c5b44b095bce756f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab11df5855a7b6969c5b44b095bce756f">&#9670;&#160;</a></span>rfid</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_r_f_i_d_wrapper.xhtml">fabomatic::RFIDWrapper</a>&lt;<a class="el" href="classfabomatic_1_1_mock_mrfc522.xhtml">fabomatic::MockMrfc522</a>&gt; fabomatic::tests::rfid</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00031">31</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__common_8cpp_source.xhtml#l00051">machine_init()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00348">setUp()</a>, <a class="el" href="test__common_8cpp_source.xhtml#l00020">simulate_rfid_card()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00290">test_machine_allowed()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00260">test_machine_maintenance()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00312">test_messages_buffered()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00163">test_one_user_at_a_time()</a>, <a class="el" href="test__mqtt_8cpp_source.xhtml#l00293">test_taskRfidWatchdog()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00209">test_user_autologoff()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00117">test_whitelist_no_network()</a>.</p>

</div>
</div>
<a id="a4b0bffffbaa955b708c5812416ba2b6d" name="a4b0bffffbaa955b708c5812416ba2b6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b0bffffbaa955b708c5812416ba2b6d">&#9670;&#160;</a></span>scheduler</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacefabomatic_1_1tests.xhtml#aeeb234a5c7a18c21d4e378d9daa15233">Scheduler</a> fabomatic::tests::scheduler</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00028">delete_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>

</div>
</div>
<a id="a009fc290d438fc7821dddc336aae2f3b" name="a009fc290d438fc7821dddc336aae2f3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a009fc290d438fc7821dddc336aae2f3b">&#9670;&#160;</a></span>t1</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t1 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskConnect&quot;, 15s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a88a4242d48bfa4a0337df522d303c367">test_taskConnect</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00317">317</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="a739cb1ea71dc21bde3450d76b4eb2749" name="a739cb1ea71dc21bde3450d76b4eb2749"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a739cb1ea71dc21bde3450d76b4eb2749">&#9670;&#160;</a></span>t2</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t2 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskCheckRfid&quot;, 50ms, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a294b4767ecf1e1d11cc31dafb2541d23">test_taskCheckRfid</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00318">318</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="aaa8f9a92ebaa17b28d4c53e1f9608daf" name="aaa8f9a92ebaa17b28d4c53e1f9608daf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa8f9a92ebaa17b28d4c53e1f9608daf">&#9670;&#160;</a></span>t3</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t3 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskVarious&quot;, 1s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a7cd22311b16fc7c256a30ba4c2f6f387">test_taskVarious</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00319">319</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="af8a8ce64acab16055eb3a994dfbe6d33" name="af8a8ce64acab16055eb3a994dfbe6d33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8a8ce64acab16055eb3a994dfbe6d33">&#9670;&#160;</a></span>t4</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t4 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskEspWatchdog&quot;, 5s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#a046c348aaf1a15bf80358065553e748b">test_taskEspWatchdog</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00320">320</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="a2a7b41334e2a6684e389f6204da0305a" name="a2a7b41334e2a6684e389f6204da0305a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a7b41334e2a6684e389f6204da0305a">&#9670;&#160;</a></span>t5</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t5 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskRfidWatchdog&quot;, 30s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#af592b66b287714a90a895709829622b3">test_taskRfidWatchdog</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00321">321</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="a9a8176cc8103382324e4d067a4d0613d" name="a9a8176cc8103382324e4d067a4d0613d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a8176cc8103382324e4d067a4d0613d">&#9670;&#160;</a></span>t6</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">auto fabomatic::tests::t6 = <a class="el" href="classfabomatic_1_1_tasks_1_1_task.xhtml">Tasks::Task</a>(&quot;taskMQTTAlive&quot;, 30s, &amp;<a class="el" href="namespacefabomatic_1_1tests.xhtml#ae0c2cd74b089905fbdebeca807403606">test_taskMQTTAlive</a>, <a class="el" href="namespacefabomatic_1_1tests.xhtml#a6404b5d30ab37f8b12de788296e2b92c">test_scheduler</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00322">322</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

</div>
</div>
<a id="ae44a848faed425990c1a0e33a85c587c" name="ae44a848faed425990c1a0e33a85c587c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae44a848faed425990c1a0e33a85c587c">&#9670;&#160;</a></span>task_counter</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t fabomatic::tests::task_counter {0}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   23</span>{0};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00084">test_execute_runs_all_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>

</div>
</div>
<a id="ad0120073d4ac1eb75d3f13dd4c3e9341" name="ad0120073d4ac1eb75d3f13dd4c3e9341"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0120073d4ac1eb75d3f13dd4c3e9341">&#9670;&#160;</a></span>tasks</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacefabomatic_1_1tests.xhtml#ae908327d6ba514c61989d251b1feec67">Task</a>* fabomatic::tests::tasks[<a class="el" href="namespacefabomatic_1_1tests.xhtml#a08af7cf7959700ad4a46d76a4f31dbb7">NB_TASKS</a>] {nullptr}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00022">22</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   22</span>{<span class="keyword">nullptr</span>};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>, <a class="el" href="test__tasks_8cpp_source.xhtml#l00028">delete_tasks()</a>, and <a class="el" href="test__tasks_8cpp_source.xhtml#l00101">test_stop_start_tasks()</a>.</p>

</div>
</div>
<a id="a5c6753fd10922d922982e420e92f9b7f" name="a5c6753fd10922d922982e420e92f9b7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c6753fd10922d922982e420e92f9b7f">&#9670;&#160;</a></span>tasks_status</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fabomatic::tests::tasks_status[<a class="el" href="namespacefabomatic_1_1tests.xhtml#a08af7cf7959700ad4a46d76a4f31dbb7">NB_TASKS</a>] {false}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__tasks_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="test__tasks_8cpp_source.xhtml">test_tasks.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   21</span>{<span class="keyword">false</span>};</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__tasks_8cpp_source.xhtml#l00045">create_tasks()</a>.</p>

</div>
</div>
<a id="a6404b5d30ab37f8b12de788296e2b92c" name="a6404b5d30ab37f8b12de788296e2b92c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6404b5d30ab37f8b12de788296e2b92c">&#9670;&#160;</a></span>test_scheduler</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classfabomatic_1_1_tasks_1_1_scheduler.xhtml">fabomatic::Tasks::Scheduler</a> fabomatic::tests::test_scheduler</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="test__mqtt_8cpp_source.xhtml#l00035">35</a> of file <a class="el" href="test__mqtt_8cpp_source.xhtml">test_mqtt.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="test__mqtt_8cpp_source.xhtml#l00324">test_normal_use()</a>.</p>

</div>
</div>
<a id="af9a30e2db3fbfa479b6512cfd428aab1" name="af9a30e2db3fbfa479b6512cfd428aab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9a30e2db3fbfa479b6512cfd428aab1">&#9670;&#160;</a></span>test_whitelist</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespacefabomatic.xhtml#a626fe6fe3dcf9b459c45e9f769f7b8e7">WhiteList</a> fabomatic::tests::test_whitelist</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{</div>
<div class="line">          std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FabAdmin, <span class="stringliteral">&quot;ABCDEFG&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FabStaff, <span class="stringliteral">&quot;PIPPO&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD3, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER1&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD4, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER2&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD5, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER3&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD7, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER4&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD8, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER5&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD9, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER6&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCD0, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER7&quot;</span>),</div>
<div class="line">          std::make_tuple(0xAABBCCDA, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER8&quot;</span>),</div>
<div class="line">      }</div>
</div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="test__common_8h_source.xhtml#l00014">14</a> of file <a class="el" href="test__common_8h_source.xhtml">test_common.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   15</span>      {</div>
<div class="line"><span class="lineno">   16</span>          std::make_tuple(0xAABBCCD1, FabUser::UserLevel::FabAdmin, <span class="stringliteral">&quot;ABCDEFG&quot;</span>),</div>
<div class="line"><span class="lineno">   17</span>          std::make_tuple(0xAABBCCD2, FabUser::UserLevel::FabStaff, <span class="stringliteral">&quot;PIPPO&quot;</span>),</div>
<div class="line"><span class="lineno">   18</span>          std::make_tuple(0xAABBCCD3, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER1&quot;</span>),</div>
<div class="line"><span class="lineno">   19</span>          std::make_tuple(0xAABBCCD4, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER2&quot;</span>),</div>
<div class="line"><span class="lineno">   20</span>          std::make_tuple(0xAABBCCD5, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER3&quot;</span>),</div>
<div class="line"><span class="lineno">   21</span>          std::make_tuple(0xAABBCCD7, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER4&quot;</span>),</div>
<div class="line"><span class="lineno">   22</span>          std::make_tuple(0xAABBCCD8, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER5&quot;</span>),</div>
<div class="line"><span class="lineno">   23</span>          std::make_tuple(0xAABBCCD9, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER6&quot;</span>),</div>
<div class="line"><span class="lineno">   24</span>          std::make_tuple(0xAABBCCD0, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER7&quot;</span>),</div>
<div class="line"><span class="lineno">   25</span>          std::make_tuple(0xAABBCCDA, FabUser::UserLevel::NormalUser, <span class="stringliteral">&quot;USER8&quot;</span>),</div>
<div class="line"><span class="lineno">   26</span>      };</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="test__logic_8cpp_source.xhtml#l00033">get_test_uid()</a>, <a class="el" href="test__logic_8cpp_source.xhtml#l00339">setUp()</a>, and <a class="el" href="test__logic_8cpp_source.xhtml#l00117">test_whitelist_no_network()</a>.</p>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Jul 19 2024 19:24:18 for Fab-O-Matic by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.8
</small></address>
</body>
</html>
